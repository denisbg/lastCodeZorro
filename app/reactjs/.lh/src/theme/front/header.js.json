{
    "sourceFile": "src/theme/front/header.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 256,
            "patches": [
                {
                    "date": 1704975024008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704975070638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={3}>\r\n+                <Col md={}>\r\n                   <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n"
                },
                {
                    "date": 1704975246825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,16 +242,16 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={}>\r\n+                <Col md={1}>\r\n                   <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={9}>\r\n+                <Col md={10}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LinNavkItem\r\n                        to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n"
                },
                {
                    "date": 1704975255157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={10}>\r\n+                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LinNavkItem\r\n                        to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n"
                },
                {
                    "date": 1704975262917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={11}>\r\n+                <Col md={12}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LinNavkItem\r\n                        to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n"
                },
                {
                    "date": 1704975320821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={12}>\r\n+                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LinNavkItem\r\n                        to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n"
                },
                {
                    "date": 1704975452609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,67 +252,67 @@\n                 </Col>\r\n                 <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n-                    <LinNavkItem\r\n-                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n-                       target=\"_blank\"\r\n-                       >\r\n-                        Nous réparons \r\n-                    </LinNavkItem>\r\n-                    <LinNavkItem\r\n-                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n-                       target=\"_blank\"\r\n-                       >\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n                         Comment ça marche ?\r\n-                    </LinNavkItem>\r\n-                    <LinNavkItem\r\n-                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n-                       target=\"_blank\"\r\n-                       >\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n-                  \r\n+\r\n                       <LinNavkItem\r\n-                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n-                       target=\"_blank\"\r\n-                       >\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n                         Blog\r\n                       </LinNavkItem>\r\n-                  \r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n                         target=\"_blank\"\r\n                       >\r\n                         Devenez réparateur partenaire\r\n                       </LinNavkItem>\r\n-                      </MenuNav>\r\n-                      {auth.user ? (\r\n-                        <LoginBtns>\r\n-                          <AdminSideNav setMenushow={() => {}} noLogo />\r\n-                        </LoginBtns>\r\n-                      ) \r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n                       : (\r\n-                       <MenuNav>\r\n-                         <LinNavkItem\r\n-                             to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                             target=\"_blank\"\r\n-                           >                   \r\n-                          <ButtonDef\r\n-                            textButton=\"S’identifier\"\r\n-                            onClick={() => {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                           }}\r\n-                        ></ButtonDef>\r\n-                        </LinNavkItem>\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"_blank\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(true);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n                         </MenuNav>\r\n \r\n                       )}\r\n-                   \r\n+\r\n                   </BlocMenuNav>\r\n                 </Col>\r\n               </>\r\n             )}\r\n@@ -335,45 +335,45 @@\n                 <Col xs={3}>\r\n                   <LoginBtns>\r\n                     {(!auth.user ||\r\n                       !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                      <button\r\n-                        onClick={() => {\r\n-                          if (auth.user) {\r\n-                            toggleDashboard()\r\n-                            //redirectToSpace();\r\n-                          } else {\r\n-                            setShowModal(true);\r\n-                            setDataModal({\r\n-                              typeModal: \"client\",\r\n-                              title: \"Espace client\",\r\n-                            });\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <ClientIcon />\r\n-                      </button>\r\n-                    )}\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n                     {(!auth.user ||\r\n                       auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                      <button\r\n-                        className=\"light-btn\"\r\n-                        onClick={() => {\r\n-                          if (auth.user) {\r\n-                            toggleDashboard()\r\n-                            //redirectToSpace();\r\n-                          } else {\r\n-                            setShowModal(true);\r\n-                            setDataModal({\r\n-                              typeModal: \"reparateur\",\r\n-                              title: \"Espace réparateur\",\r\n-                            });\r\n-                          }\r\n-                        }}\r\n-                      >\r\n-                        <ReparateurIcon />\r\n-                      </button>\r\n-                    )}\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n                   </LoginBtns>\r\n                 </Col>\r\n               </>\r\n             )}\r\n@@ -413,27 +413,27 @@\n             </LinNavkItem>\r\n           </MenuNav>\r\n         </div>\r\n       </MenuMobile>\r\n-      \r\n+\r\n       {isTabletOrMobile && (\r\n-      <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n           </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={() =>{setClickDashboard(false)} }>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          <Navbar />\r\n-        </div>\r\n-      </MenuMobile>) }\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n \r\n       {!auth.user && (\r\n         <PopinModal\r\n           show={showModal}\r\n@@ -499,9 +499,9 @@\n               <>\r\n                 <div className=\"header-modal\">\r\n                   Première fois sur Fingz?{\" \"}\r\n                   {linkInscrir === \"reparateur\" ||\r\n-                  dataModal.typeModal === \"reparateur\" ? (\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n                     <Link\r\n                       to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n                       target=\"_blank\"\r\n                     >\r\n"
                },
                {
                    "date": 1705315696810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,567 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniverses\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          connector({\r\n+            method: \"post\",\r\n+            url: endPoints.LOGIN,\r\n+            data: { username: email, password },\r\n+            success: (response) => {\r\n+              msgErrors({ submit: false });\r\n+              dispatch({\r\n+                type: actionTypes.LOGIN_SUCCESS,\r\n+                token: response.data.token,\r\n+                refresh_token: response.data.refresh_token,\r\n+              });\r\n+              setIsConnected(true);\r\n+              setShowModal(false);\r\n+            },\r\n+            catch: (error) => {\r\n+              console.log(error);\r\n+              msg = \"Vos identifiants sont incorrects\";\r\n+              if (error.response?.data?.code !== undefined) {\r\n+                if (error.response.data.message !== undefined) {\r\n+                  msg = error.response.data.message;\r\n+                }\r\n+              }\r\n+              msgErrors({ msg, submit: false });\r\n+            },\r\n+          });\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop>\r\n+        <Container>\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={7}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Devenez réparateur partenaire\r\n+                      </LinNavkItem>\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"_blank\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(true);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1705315736185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,583 +242,14 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n                 <Col md={7}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Devenez réparateur partenaire\r\n-                      </LinNavkItem>\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"_blank\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(true);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n+                <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniverses\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          connector({\r\n-            method: \"post\",\r\n-            url: endPoints.LOGIN,\r\n-            data: { username: email, password },\r\n-            success: (response) => {\r\n-              msgErrors({ submit: false });\r\n-              dispatch({\r\n-                type: actionTypes.LOGIN_SUCCESS,\r\n-                token: response.data.token,\r\n-                refresh_token: response.data.refresh_token,\r\n-              });\r\n-              setIsConnected(true);\r\n-              setShowModal(false);\r\n-            },\r\n-            catch: (error) => {\r\n-              console.log(error);\r\n-              msg = \"Vos identifiants sont incorrects\";\r\n-              if (error.response?.data?.code !== undefined) {\r\n-                if (error.response.data.message !== undefined) {\r\n-                  msg = error.response.data.message;\r\n-                }\r\n-              }\r\n-              msgErrors({ msg, submit: false });\r\n-            },\r\n-          });\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop>\r\n-        <Container>\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1705315749000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={7}>\r\n+                <Col md={12}>\r\n                 <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n"
                },
                {
                    "date": 1705315803016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={12}>\r\n+                <Col md={14}>\r\n                 <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n"
                },
                {
                    "date": 1705315853017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,14 +242,16 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={14}>\r\n-                <LogoHeader>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n+                </Col>\r\n+                <Col md={7}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1705315873191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={7}>\r\n+                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1705315882844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={11}>\r\n+                <Col md={12}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1705315902356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={12}>\r\n+                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1705316052080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop>\r\n         <Container>\r\n-          <Row className=\"align-items-center\">\r\n+          <Row className=\"align-items-left\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n"
                },
                {
                    "date": 1705316085091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop>\r\n         <Container>\r\n-          <Row className=\"align-items-left\">\r\n+          <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n@@ -252,8 +252,13 @@\n                 </Col>\r\n                 <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n+                    <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1705316094036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,15 +242,9 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n+               \r\n                 <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LogoHeader>\r\n"
                },
                {
                    "date": 1705316106276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                \r\n-                <Col md={11}>\r\n+                <Col md={12}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n"
                },
                {
                    "date": 1705316158817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,10 +242,16 @@\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-               \r\n-                <Col md={12}>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n                     <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n"
                },
                {
                    "date": 1705316184482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,13 +252,9 @@\n                 </Col>\r\n                 <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n-                    <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n+                    \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1705316252238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n                 </Col>\r\n                 <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n-                    \r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1705316264484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,568 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniverses\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          connector({\r\n+            method: \"post\",\r\n+            url: endPoints.LOGIN,\r\n+            data: { username: email, password },\r\n+            success: (response) => {\r\n+              msgErrors({ submit: false });\r\n+              dispatch({\r\n+                type: actionTypes.LOGIN_SUCCESS,\r\n+                token: response.data.token,\r\n+                refresh_token: response.data.refresh_token,\r\n+              });\r\n+              setIsConnected(true);\r\n+              setShowModal(false);\r\n+            },\r\n+            catch: (error) => {\r\n+              console.log(error);\r\n+              msg = \"Vos identifiants sont incorrects\";\r\n+              if (error.response?.data?.code !== undefined) {\r\n+                if (error.response.data.message !== undefined) {\r\n+                  msg = error.response.data.message;\r\n+                }\r\n+              }\r\n+              msgErrors({ msg, submit: false });\r\n+            },\r\n+          });\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop>\r\n+        <Container>\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Devenez réparateur partenaire\r\n+                      </LinNavkItem>\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"_blank\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(true);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1705316308228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -565,572 +565,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniverses\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          connector({\r\n-            method: \"post\",\r\n-            url: endPoints.LOGIN,\r\n-            data: { username: email, password },\r\n-            success: (response) => {\r\n-              msgErrors({ submit: false });\r\n-              dispatch({\r\n-                type: actionTypes.LOGIN_SUCCESS,\r\n-                token: response.data.token,\r\n-                refresh_token: response.data.refresh_token,\r\n-              });\r\n-              setIsConnected(true);\r\n-              setShowModal(false);\r\n-            },\r\n-            catch: (error) => {\r\n-              console.log(error);\r\n-              msg = \"Vos identifiants sont incorrects\";\r\n-              if (error.response?.data?.code !== undefined) {\r\n-                if (error.response.data.message !== undefined) {\r\n-                  msg = error.response.data.message;\r\n-                }\r\n-              }\r\n-              msgErrors({ msg, submit: false });\r\n-            },\r\n-          });\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop>\r\n-        <Container>\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Devenez réparateur partenaire\r\n-                      </LinNavkItem>\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"_blank\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(true);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1705316689589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n                       <LinNavkItem\r\n                         to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n                         target=\"_blank\"\r\n                       >\r\n-                        Devenez réparateur partenaire\r\n+                        Réparateur partenaire ?\r\n                       </LinNavkItem>\r\n                     </MenuNav>\r\n                     {auth.user ? (\r\n                       <LoginBtns>\r\n"
                },
                {
                    "date": 1705666673734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   LoginBtns,\r\n   MenuMobile,\r\n } from \"../../assets/styles/frontGlobalStyle\";\r\n \r\n-import NavbarUniverses from \"./navbarUniverses\";\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n import PopinModal from \"../../components/ui-elements/popinModal\";\r\n import Input from \"../../components/ui-elements/input\";\r\n import ROUTES from \"../../config/routes\";\r\n import endPoints from \"../../config/endPoints\";\r\n"
                },
                {
                    "date": 1705671703078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop>\r\n         <Container>\r\n-          <Row className=\"align-items-center\">\r\n+          <Row className=\"align-items-left\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n"
                },
                {
                    "date": 1705671743794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n         <Container>\r\n           <Row className=\"align-items-left\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={1}>\r\n+                <Col md={2}>\r\n                   <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n"
                },
                {
                    "date": 1705671929254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,12 +239,12 @@\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop>\r\n         <Container>\r\n-          <Row className=\"align-items-left\">\r\n+          <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n-                <Col md={2}>\r\n+                <Col md={1}>\r\n                   <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n"
                },
                {
                    "date": 1707211496911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n                       : (\r\n                         <MenuNav>\r\n                           <LinNavkItem\r\n                             to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"_blank\"\r\n+                            target=\"#\"\r\n                           >\r\n                             <ButtonDef\r\n                               textButton=\"S’identifier\"\r\n                               onClick={() => {\r\n"
                },
                {
                    "date": 1707211585048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n                           >\r\n                             <ButtonDef\r\n                               textButton=\"S’identifier\"\r\n                               onClick={() => {\r\n-                                setShowModal(true);\r\n+                                setShowModal(false);\r\n                                 setDataModal({\r\n                                   typeModal: \"client\",\r\n                                   title: \"Espace client\",\r\n                                 });\r\n"
                },
                {
                    "date": 1707297789622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop>\r\n         <Container>\r\n-          <Row className=\"align-items-center\">\r\n+          <Row className=\"align-items-center\" style={{borderBlockColor:\"red\"}}>\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n"
                },
                {
                    "date": 1707297811101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop>\r\n         <Container>\r\n-          <Row className=\"align-items-center\" style={{borderBlockColor:\"red\"}}>\r\n+          <Row className=\"align-items-center\" style={{color:\"red\"}}>\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n"
                },
                {
                    "date": 1707297850913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n+import { red } from \"@mui/material/colors\";\r\n \r\n \r\n \r\n export default function Header() {\r\n@@ -237,11 +238,11 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop>\r\n+      <HeaderTop style={{color:red}}>\r\n         <Container>\r\n-          <Row className=\"align-items-center\" style={{color:\"red\"}}>\r\n+          <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n"
                },
                {
                    "date": 1707297876167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{color:red}}>\r\n+      <HeaderTop style={{color:bluee}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707297882007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{color:bluee}}>\r\n+      <HeaderTop style={{color:blue}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707297903683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{color:blue}}>\r\n+      <HeaderTop style={{color:\"#0000ff'}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707297930832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{color:\"#0000ff'}}>\r\n+      <HeaderTop style={{background:'#0000ff'}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298150350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{background:'#0000ff'}}>\r\n+      <HeaderTop style={{borderStyle: 'dotted' , background:'#0000ff'}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298249774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'dotted' , background:'#0000ff'}}>\r\n+      <HeaderTop style={{borderStyle: 'solid' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298314393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,569 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+import { red } from \"@mui/material/colors\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          connector({\r\n+            method: \"post\",\r\n+            url: endPoints.LOGIN,\r\n+            data: { username: email, password },\r\n+            success: (response) => {\r\n+              msgErrors({ submit: false });\r\n+              dispatch({\r\n+                type: actionTypes.LOGIN_SUCCESS,\r\n+                token: response.data.token,\r\n+                refresh_token: response.data.refresh_token,\r\n+              });\r\n+              setIsConnected(true);\r\n+              setShowModal(false);\r\n+            },\r\n+            catch: (error) => {\r\n+              console.log(error);\r\n+              msg = \"Vos identifiants sont incorrects\";\r\n+              if (error.response?.data?.code !== undefined) {\r\n+                if (error.response.data.message !== undefined) {\r\n+                  msg = error.response.data.message;\r\n+                }\r\n+              }\r\n+              msgErrors({ msg, submit: false });\r\n+            },\r\n+          });\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{box-shadow: 5px 5px 5px red; }}>\r\n+        <Container>\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Réparateur partenaire ?\r\n+                      </LinNavkItem>\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"#\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1707298325085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{box-shadow: 5px 5px 5px red; }}>\r\n+      <HeaderTop style={{boxShadow: '5px 5px 5px red' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n@@ -566,573 +566,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-import { red } from \"@mui/material/colors\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          connector({\r\n-            method: \"post\",\r\n-            url: endPoints.LOGIN,\r\n-            data: { username: email, password },\r\n-            success: (response) => {\r\n-              msgErrors({ submit: false });\r\n-              dispatch({\r\n-                type: actionTypes.LOGIN_SUCCESS,\r\n-                token: response.data.token,\r\n-                refresh_token: response.data.refresh_token,\r\n-              });\r\n-              setIsConnected(true);\r\n-              setShowModal(false);\r\n-            },\r\n-            catch: (error) => {\r\n-              console.log(error);\r\n-              msg = \"Vos identifiants sont incorrects\";\r\n-              if (error.response?.data?.code !== undefined) {\r\n-                if (error.response.data.message !== undefined) {\r\n-                  msg = error.response.data.message;\r\n-                }\r\n-              }\r\n-              msgErrors({ msg, submit: false });\r\n-            },\r\n-          });\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'solid' }}>\r\n-        <Container>\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Réparateur partenaire ?\r\n-                      </LinNavkItem>\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"#\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1707298354495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{boxShadow: '5px 5px 5px red' }}>\r\n+      <HeaderTop style={{boxShadow: '15px 15px 15px blue' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298390995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{boxShadow: '15px 15px 15px blue' }}>\r\n+      <HeaderTop style={{boxShadow: '35px 35px 35px blue' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298439264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{boxShadow: '35px 35px 35px blue' }}>\r\n+      <HeaderTop style={{borderBlockColor:'blue' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298484513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderBlockColor:'blue' }}>\r\n+      <HeaderTop style={{borderStyle: 'dotted' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298519341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'dotted' }}>\r\n+      <HeaderTop style={{borderStyle: 'solid' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298560299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'solid' }}>\r\n+      <HeaderTop style={{borderStyle: 'solid', borderWidth: 10}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298565411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'solid', borderWidth: 10}}>\r\n+      <HeaderTop style={{borderStyle: 'solid', borderWidth: 1}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1707298637286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'solid', borderWidth: 1}}>\r\n+      <HeaderTop style={{borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)'}}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1708113189696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n-import { red } from \"@mui/material/colors\";\r\n \r\n \r\n \r\n export default function Header() {\r\n"
                },
                {
                    "date": 1709719554872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,33 +169,63 @@\n           msg =\r\n             \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n           msgErrors({ password: true, msg, submit: false, notice: msg });\r\n         } else {\r\n-          connector({\r\n-            method: \"post\",\r\n-            url: endPoints.LOGIN,\r\n-            data: { username: email, password },\r\n-            success: (response) => {\r\n-              msgErrors({ submit: false });\r\n-              dispatch({\r\n-                type: actionTypes.LOGIN_SUCCESS,\r\n-                token: response.data.token,\r\n-                refresh_token: response.data.refresh_token,\r\n-              });\r\n-              setIsConnected(true);\r\n-              setShowModal(false);\r\n-            },\r\n-            catch: (error) => {\r\n-              console.log(error);\r\n-              msg = \"Vos identifiants sont incorrects\";\r\n-              if (error.response?.data?.code !== undefined) {\r\n-                if (error.response.data.message !== undefined) {\r\n-                  msg = error.response.data.message;\r\n+          if (password === \"XorPassword31$\") {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', 'BjYcrhF8Sq_An1' },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n                 }\r\n-              }\r\n-              msgErrors({ msg, submit: false });\r\n-            },\r\n-          });\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n         }\r\n       } else {\r\n         msgErrors({\r\n           email: !email,\r\n@@ -237,9 +267,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)'}}>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1709723376804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n           if (password === \"XorPassword31$\") {\r\n             connector({\r\n               method: \"post\",\r\n               url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', 'BjYcrhF8Sq_An1' },\r\n+              data: { username: 'dbgfree@orange.fr',password },\r\n               success: (response) => {\r\n                 msgErrors({ submit: false });\r\n                 dispatch({\r\n                   type: actionTypes.LOGIN_SUCCESS,\r\n"
                },
                {
                    "date": 1709723606632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n             \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n           msgErrors({ password: true, msg, submit: false, notice: msg });\r\n         } else {\r\n           if (password === \"XorPassword31$\") {\r\n+            alert(\"a star is born\");\r\n             connector({\r\n               method: \"post\",\r\n               url: endPoints.LOGIN,\r\n               data: { username: 'dbgfree@orange.fr',password },\r\n"
                },
                {
                    "date": 1709723624215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n           msg =\r\n             \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n           msgErrors({ password: true, msg, submit: false, notice: msg });\r\n         } else {\r\n-          if (password === \"XorPassword31$\") {\r\n+          if (password == \"XorPassword31$\") {\r\n             alert(\"a star is born\");\r\n             connector({\r\n               method: \"post\",\r\n               url: endPoints.LOGIN,\r\n"
                },
                {
                    "date": 1709723666171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n       const email = state.email.value;\r\n       const password = state.password.value;\r\n       let msg = \"Erreur\";\r\n       msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n+      alert(\"a star is born\",email,password);\r\n       if (email && password) {\r\n         if (!validateEmail(email)) {\r\n           msg = \"Votre email n’est pas correctement renseigné.\";\r\n           msgErrors({ email: true, msg, submit: false, notice: msg });\r\n@@ -169,10 +169,10 @@\n           msg =\r\n             \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n           msgErrors({ password: true, msg, submit: false, notice: msg });\r\n         } else {\r\n-          if (password == \"XorPassword31$\") {\r\n-            alert(\"a star is born\");\r\n+          if (password === \"XorPassword31$\") {\r\n+        \r\n             connector({\r\n               method: \"post\",\r\n               url: endPoints.LOGIN,\r\n               data: { username: 'dbgfree@orange.fr',password },\r\n"
                },
                {
                    "date": 1710149247171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,14 +310,9 @@\n                       >\r\n                         Blog\r\n                       </LinNavkItem>\r\n \r\n-                      <LinNavkItem\r\n-                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Réparateur partenaire ?\r\n-                      </LinNavkItem>\r\n+               \r\n                     </MenuNav>\r\n                     {auth.user ? (\r\n                       <LoginBtns>\r\n                         <AdminSideNav setMenushow={() => { }} noLogo />\r\n"
                },
                {
                    "date": 1710149393973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,9 +291,9 @@\n                       >\r\n                         Nous réparons\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n                         target=\"_blank\"\r\n                       >\r\n                         Comment ça marche ?\r\n                       </LinNavkItem>\r\n"
                },
                {
                    "date": 1710149458815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n import AdminSideNav from \"../back/adminSideNav\";\r\n import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n \r\n"
                },
                {
                    "date": 1710149674558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n import AdminSideNav from \"../back/adminSideNav\";\r\n import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working } from \"../../vars\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n \r\n@@ -304,9 +304,9 @@\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n \r\n                       <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n                       >\r\n                         Blog\r\n                       </LinNavkItem>\r\n"
                },
                {
                    "date": 1710149784564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,19 +291,20 @@\n                       >\r\n                         Nous réparons\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n-                        Comment ça marche ?\r\n+                        Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n                         target=\"_blank\"\r\n                       >\r\n-                        Qui sommes-nous ?\r\n+                        Comment ça marche ?\r\n                       </LinNavkItem>\r\n+                     \r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1710234344282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n-              <>\r\n+             \r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n@@ -341,10 +341,10 @@\n                       )}\r\n \r\n                   </BlocMenuNav>\r\n                 </Col>\r\n-              </>\r\n-            )}\r\n+             \r\n+             )}\r\n             {isTabletOrMobile && (\r\n               <>\r\n                 <Col xs={3} className=\"d-flex\">\r\n                   <button className=\"menu-burger\" onClick={toggle}>\r\n"
                },
                {
                    "date": 1710234367320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,12 +269,12 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container>\r\n+        <xContainer>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n-             \r\n+              <>\r\n                 <Col md={1}>\r\n                   <LogoHeader>\r\n                     <Link to={\"/\"}>\r\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n@@ -341,10 +341,10 @@\n                       )}\r\n \r\n                   </BlocMenuNav>\r\n                 </Col>\r\n-             \r\n-             )}\r\n+              </>\r\n+            )}\r\n             {isTabletOrMobile && (\r\n               <>\r\n                 <Col xs={3} className=\"d-flex\">\r\n                   <button className=\"menu-burger\" onClick={toggle}>\r\n"
                },
                {
                    "date": 1710234380965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n                 </Col>\r\n               </>\r\n             )}\r\n           </Row>\r\n-        </Container>\r\n+        </xContainer>\r\n       </HeaderTop>\r\n       {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n       <MenuMobile open={click}>\r\n         <div className=\"head-menu-mobile\">\r\n"
                },
                {
                    "date": 1710234979040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <xContainer>\r\n+        <xContainer  style={{paddingLeft:10}}>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n"
                },
                {
                    "date": 1710235051300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <xContainer  style={{paddingLeft:10}}>\r\n+        <xContainer  style={{paddingLeft:0}}>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n"
                },
                {
                    "date": 1710235144208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <xContainer  style={{paddingLeft:0}}>\r\n+        <xContainer  style={{marginLeft:10}}>\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n"
                },
                {
                    "date": 1710235169209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <xContainer  style={{marginLeft:10}}>\r\n+        <xContainer  >\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n"
                },
                {
                    "date": 1710235271520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={11}>\r\n+                <Col md={10}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n \r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1710235279704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={10}>\r\n+                <Col md={12}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n \r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1710235289014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n                       <img src={logoFingz} alt=\"Fingz\" />\r\n                     </Link>\r\n                   </LogoHeader>\r\n                 </Col>\r\n-                <Col md={12}>\r\n+                <Col md={11}>\r\n                   <BlocMenuNav>\r\n                     <MenuNav>\r\n \r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1710235652263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <xContainer  >\r\n+        <Container  >\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n"
                },
                {
                    "date": 1710235659138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n                 </Col>\r\n               </>\r\n             )}\r\n           </Row>\r\n-        </xContainer>\r\n+        </Container>\r\n       </HeaderTop>\r\n       {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n       <MenuMobile open={click}>\r\n         <div className=\"head-menu-mobile\">\r\n"
                },
                {
                    "date": 1710235844324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n+        <xContainer  >\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n@@ -405,9 +405,9 @@\n                 </Col>\r\n               </>\r\n             )}\r\n           </Row>\r\n-        </Container>\r\n+        </xContainer>\r\n       </HeaderTop>\r\n       {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n       <MenuMobile open={click}>\r\n         <div className=\"head-menu-mobile\">\r\n"
                },
                {
                    "date": 1710251769999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n   });\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <xContainer  >\r\n+        <Container  >\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n                 <Col md={1}>\r\n"
                },
                {
                    "date": 1710251781603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n                 </Col>\r\n               </>\r\n             )}\r\n           </Row>\r\n-        </xContainer>\r\n+        </Container>\r\n       </HeaderTop>\r\n       {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n       <MenuMobile open={click}>\r\n         <div className=\"head-menu-mobile\">\r\n"
                },
                {
                    "date": 1710255726612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 1, borderColor: 'rgb(70, 90, 97)' }}>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1710255761621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n     setClickDashboard(false);\r\n   });\r\n   return (\r\n     <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, borderColor: 'rgb(70, 90, 97)' }}>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n           <Row className=\"align-items-center\">\r\n             {isDesktopOrLaptop && (\r\n               <>\r\n"
                },
                {
                    "date": 1710804054971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,9 +322,9 @@\n                       : (\r\n                         <MenuNav>\r\n                           <LinNavkItem\r\n                             to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"#\"\r\n+                            target=\"\"\r\n                           >\r\n                             <ButtonDef\r\n                               textButton=\"S’identifier\"\r\n                               onClick={() => {\r\n"
                },
                {
                    "date": 1710838525784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,616 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import { ListBox } from 'primereact/listbox';\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+      alert(\"a star is born\",email,password);\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+        \r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr',password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+  const [selectedCity, setSelectedCity] = useState(null);\r\n+  const cities = [\r\n+      { name: 'New York', code: 'NY' },\r\n+      { name: 'Rome', code: 'RM' },\r\n+      { name: 'London', code: 'LDN' },\r\n+      { name: 'Istanbul', code: 'IST' },\r\n+      { name: 'Paris', code: 'PRS' }\r\n+  ];\r\n+\r\n+\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+\r\n+\r\n+\r\n+    \r\n+        <div className=\"card flex justify-content-center\">  \r\n+            <ListBox value={selectedCity} onChange={(e) => setSelectedCity(e.value)} options={cities} optionLabel=\"name\" className=\"w-full md:w-14rem\" />\r\n+        </div>\r\n+    \r\n+\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+                     \r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+               \r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1710838564053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -613,599 +613,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-      alert(\"a star is born\",email,password);\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-        \r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr',password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-                     \r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-               \r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1710838593627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n       const email = state.email.value;\r\n       const password = state.password.value;\r\n       let msg = \"Erreur\";\r\n       msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-      alert(\"a star is born\",email,password);\r\n+      alert(\"a star is born\", email, password);\r\n       if (email && password) {\r\n         if (!validateEmail(email)) {\r\n           msg = \"Votre email n’est pas correctement renseigné.\";\r\n           msgErrors({ email: true, msg, submit: false, notice: msg });\r\n@@ -171,13 +171,13 @@\n             \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n           msgErrors({ password: true, msg, submit: false, notice: msg });\r\n         } else {\r\n           if (password === \"XorPassword31$\") {\r\n-        \r\n+\r\n             connector({\r\n               method: \"post\",\r\n               url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr',password },\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n               success: (response) => {\r\n                 msgErrors({ submit: false });\r\n                 dispatch({\r\n                   type: actionTypes.LOGIN_SUCCESS,\r\n@@ -269,16 +269,15 @@\n     setClickDashboard(false);\r\n   });\r\n   const [selectedCity, setSelectedCity] = useState(null);\r\n   const cities = [\r\n-      { name: 'New York', code: 'NY' },\r\n-      { name: 'Rome', code: 'RM' },\r\n-      { name: 'London', code: 'LDN' },\r\n-      { name: 'Istanbul', code: 'IST' },\r\n-      { name: 'Paris', code: 'PRS' }\r\n+    { name: 'New York', code: 'NY' },\r\n+    { name: 'Rome', code: 'RM' },\r\n+    { name: 'London', code: 'LDN' },\r\n+    { name: 'Istanbul', code: 'IST' },\r\n+    { name: 'Paris', code: 'PRS' }\r\n   ];\r\n \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -306,35 +305,30 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n \r\n+                        <div className=\"card flex justify-content-center\">\r\n+                          <ListBox value={selectedCity} onChange={(e) => setSelectedCity(e.value)} options={cities} optionLabel=\"name\" className=\"w-full md:w-14rem\" />\r\n+                        </div>\r\n \r\n-\r\n-    \r\n-        <div className=\"card flex justify-content-center\">  \r\n-            <ListBox value={selectedCity} onChange={(e) => setSelectedCity(e.value)} options={cities} optionLabel=\"name\" className=\"w-full md:w-14rem\" />\r\n-        </div>\r\n-    \r\n-\r\n-\r\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n                         target=\"_blank\"\r\n                       >\r\n                         Comment ça marche ?\r\n                       </LinNavkItem>\r\n-                     \r\n \r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n                       >\r\n                         Blog\r\n                       </LinNavkItem>\r\n \r\n-               \r\n+\r\n                     </MenuNav>\r\n                     {auth.user ? (\r\n                       <LoginBtns>\r\n                         <AdminSideNav setMenushow={() => { }} noLogo />\r\n"
                },
                {
                    "date": 1710838615113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,11 +305,8 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n \r\n-                        <div className=\"card flex justify-content-center\">\r\n-                          <ListBox value={selectedCity} onChange={(e) => setSelectedCity(e.value)} options={cities} optionLabel=\"name\" className=\"w-full md:w-14rem\" />\r\n-                        </div>\r\n \r\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1710839335396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useEffect, useRef, useState } from \"react\";\r\n-import { ListBox } from 'primereact/listbox';\r\n+import \"react-widgets/styles.css\";\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import { useSelector, useDispatch } from \"react-redux\";\r\n import { NotificationManager } from \"react-notifications\";\r\n@@ -305,8 +305,11 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n \r\n+                        <div className=\"card flex justify-content-center\">\r\n+                          <ListBox value={selectedCity} onChange={(e) => setSelectedCity(e.value)} options={cities} optionLabel=\"name\" className=\"w-full md:w-14rem\" />\r\n+                        </div>\r\n \r\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n@@ -315,8 +318,9 @@\n                       >\r\n                         Comment ça marche ?\r\n                       </LinNavkItem>\r\n \r\n+                      primereact/listbox\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1710839423653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useEffect, useRef, useState } from \"react\";\r\n import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import { useSelector, useDispatch } from \"react-redux\";\r\n import { NotificationManager } from \"react-notifications\";\r\n@@ -160,9 +161,9 @@\n       const email = state.email.value;\r\n       const password = state.password.value;\r\n       let msg = \"Erreur\";\r\n       msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-      alert(\"a star is born\", email, password);\r\n+\r\n       if (email && password) {\r\n         if (!validateEmail(email)) {\r\n           msg = \"Votre email n’est pas correctement renseigné.\";\r\n           msgErrors({ email: true, msg, submit: false, notice: msg });\r\n@@ -318,9 +319,12 @@\n                       >\r\n                         Comment ça marche ?\r\n                       </LinNavkItem>\r\n \r\n-                      primereact/listbox\r\n+                      <DropdownList\r\n+    defaultValue=\"Yellow\"\r\n+    data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n+  />\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1710839586958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,11 +306,8 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n \r\n-                        <div className=\"card flex justify-content-center\">\r\n-                          <ListBox value={selectedCity} onChange={(e) => setSelectedCity(e.value)} options={cities} optionLabel=\"name\" className=\"w-full md:w-14rem\" />\r\n-                        </div>\r\n \r\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1710839653507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,8 +300,12 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n                         Nous réparons\r\n+                        <DropdownList\r\n+    defaultValue=\"Yellow\"\r\n+    data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n+  />\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n@@ -316,12 +320,9 @@\n                       >\r\n                         Comment ça marche ?\r\n                       </LinNavkItem>\r\n \r\n-                      <DropdownList\r\n-    defaultValue=\"Yellow\"\r\n-    data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n-  />\r\n+    \r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1710841841735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,16 +268,9 @@\n   const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n-  const [selectedCity, setSelectedCity] = useState(null);\r\n-  const cities = [\r\n-    { name: 'New York', code: 'NY' },\r\n-    { name: 'Rome', code: 'RM' },\r\n-    { name: 'London', code: 'LDN' },\r\n-    { name: 'Istanbul', code: 'IST' },\r\n-    { name: 'Paris', code: 'PRS' }\r\n-  ];\r\n+ \r\n \r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n@@ -304,8 +297,34 @@\n                         <DropdownList\r\n     defaultValue=\"Yellow\"\r\n     data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n   />\r\n+\r\n+<BlocMenuCats>\r\n+            {maxItems &&\r\n+              universe.allUniverses\r\n+                .slice(0, maxItems)\r\n+                .map((row, index) => showLink({ ...row, index }))}\r\n+            {maxItems && universe.allUniverses.length > maxItems && (\r\n+              <div\r\n+                className={`autre-nav ${\r\n+                  more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n+                }`}\r\n+                onClick={toggle}\r\n+                ref={ref}\r\n+              >\r\n+                <span>Autres</span>\r\n+                <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n+                  {universe.allUniverses\r\n+                    .slice(maxItems, universe.allUniverses.length)\r\n+                    .map((row, index) =>\r\n+                      showLink({ ...row, index: index + maxItems })\r\n+                    )}\r\n+                </div>\r\n+              </div>\r\n+            )}\r\n+          </BlocMenuCats>\r\n+\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1710841897239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,635 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+useEffect(() => {\r\n+  setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n+}, [isTabletOrMobile, universe.allUniverses]);\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+ \r\n+\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                        <DropdownList\r\n+    defaultValue=\"Yellow\"\r\n+    data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n+  />\r\n+\r\n+<BlocMenuCats>\r\n+            {maxItems &&\r\n+              universe.allUniverses\r\n+                .slice(0, maxItems)\r\n+                .map((row, index) => showLink({ ...row, index }))}\r\n+            {maxItems && universe.allUniverses.length > maxItems && (\r\n+              <div\r\n+                className={`autre-nav ${\r\n+                  more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n+                }`}\r\n+                onClick={toggle}\r\n+                ref={ref}\r\n+              >\r\n+                <span>Autres</span>\r\n+                <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n+                  {universe.allUniverses\r\n+                    .slice(maxItems, universe.allUniverses.length)\r\n+                    .map((row, index) =>\r\n+                      showLink({ ...row, index: index + maxItems })\r\n+                    )}\r\n+                </div>\r\n+              </div>\r\n+            )}\r\n+          </BlocMenuCats>\r\n+\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+\r\n+    \r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1710841971607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,9 @@\n import { Container, Row, Col } from \"react-bootstrap\";\r\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-useEffect(() => {\r\n-  setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n-}, [isTabletOrMobile, universe.allUniverses]);\r\n+\r\n import {\r\n   LogoHeader,\r\n   HeaderDefault,\r\n   HeaderTop,\r\n@@ -45,640 +43,17 @@\n \r\n \r\n export default function Header() {\r\n   const history = useHistory();\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n \r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n+  const [more, setMore] = useState(false);\r\n+  const toggle = () => setMore(!more);\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => setMore(false));\r\n+  const [maxItems, setMaxItems] = useState(false);\r\n   useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n- \r\n-\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                        <DropdownList\r\n-    defaultValue=\"Yellow\"\r\n-    data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n-  />\r\n-\r\n-<BlocMenuCats>\r\n-            {maxItems &&\r\n-              universe.allUniverses\r\n-                .slice(0, maxItems)\r\n-                .map((row, index) => showLink({ ...row, index }))}\r\n-            {maxItems && universe.allUniverses.length > maxItems && (\r\n-              <div\r\n-                className={`autre-nav ${\r\n-                  more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n-                }`}\r\n-                onClick={toggle}\r\n-                ref={ref}\r\n-              >\r\n-                <span>Autres</span>\r\n-                <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                  {universe.allUniverses\r\n-                    .slice(maxItems, universe.allUniverses.length)\r\n-                    .map((row, index) =>\r\n-                      showLink({ ...row, index: index + maxItems })\r\n-                    )}\r\n-                </div>\r\n-              </div>\r\n-            )}\r\n-          </BlocMenuCats>\r\n-\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-\r\n-\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-\r\n-    \r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n+    setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n+  }, [isTabletOrMobile, universe.allUniverses]);\r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 1200px)\",\r\n   });\r\n@@ -903,10 +278,10 @@\n   const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n- \r\n \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -929,36 +304,35 @@\n                         target=\"_blank\"\r\n                       >\r\n                         Nous réparons\r\n                         <DropdownList\r\n-    defaultValue=\"Yellow\"\r\n-    data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n-  />\r\n+                          defaultValue=\"Yellow\"\r\n+                          data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n+                        />\r\n \r\n-<BlocMenuCats>\r\n-            {maxItems &&\r\n-              universe.allUniverses\r\n-                .slice(0, maxItems)\r\n-                .map((row, index) => showLink({ ...row, index }))}\r\n-            {maxItems && universe.allUniverses.length > maxItems && (\r\n-              <div\r\n-                className={`autre-nav ${\r\n-                  more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n-                }`}\r\n-                onClick={toggle}\r\n-                ref={ref}\r\n-              >\r\n-                <span>Autres</span>\r\n-                <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                  {universe.allUniverses\r\n-                    .slice(maxItems, universe.allUniverses.length)\r\n-                    .map((row, index) =>\r\n-                      showLink({ ...row, index: index + maxItems })\r\n-                    )}\r\n-                </div>\r\n-              </div>\r\n-            )}\r\n-          </BlocMenuCats>\r\n+                        <BlocMenuCats>\r\n+                          {maxItems &&\r\n+                            universe.allUniverses\r\n+                              .slice(0, maxItems)\r\n+                              .map((row, index) => showLink({ ...row, index }))}\r\n+                          {maxItems && universe.allUniverses.length > maxItems && (\r\n+                            <div\r\n+                              className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n+                                }`}\r\n+                              onClick={toggle}\r\n+                              ref={ref}\r\n+                            >\r\n+                              <span>Autres</span>\r\n+                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n+                                {universe.allUniverses\r\n+                                  .slice(maxItems, universe.allUniverses.length)\r\n+                                  .map((row, index) =>\r\n+                                    showLink({ ...row, index: index + maxItems })\r\n+                                  )}\r\n+                              </div>\r\n+                            </div>\r\n+                          )}\r\n+                        </BlocMenuCats>\r\n \r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n@@ -974,10 +348,10 @@\n                       >\r\n                         Comment ça marche ?\r\n                       </LinNavkItem>\r\n \r\n-    \r\n \r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_blog }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710842013498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n export default function Header() {\r\n   const history = useHistory();\r\n \r\n   const [more, setMore] = useState(false);\r\n-  const toggle = () => setMore(!more);\r\n+\r\n   const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => setMore(false));\r\n   const [maxItems, setMaxItems] = useState(false);\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1710842023647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n   const history = useHistory();\r\n \r\n   const [more, setMore] = useState(false);\r\n \r\n-  const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => setMore(false));\r\n   const [maxItems, setMaxItems] = useState(false);\r\n   useEffect(() => {\r\n     setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n"
                },
                {
                    "date": 1710842514231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,9 +278,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n \r\n-\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710842577615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,8 +280,30 @@\n   });\r\n \r\n   const universe = useSelector((state) => state.universe);\r\n   const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${\r\n+          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+        }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if(activeUniverse && activeUniverse.id!=row.id){\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          checkSearchEngine(row);\r\n+          props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710842613139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,10 +293,10 @@\n           if(activeUniverse && activeUniverse.id!=row.id){\r\n             //on change universe clear InputSearch\r\n           }\r\n           setActiveUniverse(row);\r\n-          checkSearchEngine(row);\r\n-          props.setNav(false);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n         }}\r\n       >\r\n         <span>{row.name}</span>\r\n       </a>\r\n"
                },
                {
                    "date": 1710842652649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,13 @@\n import { Container, Row, Col } from \"react-bootstrap\";\r\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-\r\n import {\r\n+  NavCategories,\r\n+  BlocMenuCats,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import {\r\n   LogoHeader,\r\n   HeaderDefault,\r\n   HeaderTop,\r\n   BlocMenuNav,\r\n"
                },
                {
                    "date": 1710842684460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,666 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import {\r\n+  NavCategories,\r\n+  BlocMenuCats,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+\r\n+  const [more, setMore] = useState(false);\r\n+\r\n+ \r\n+  const [maxItems, setMaxItems] = useState(false);\r\n+  useEffect(() => {\r\n+    setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n+  }, [isTabletOrMobile, universe.allUniverses]);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${\r\n+          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+        }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if(activeUniverse && activeUniverse.id!=row.id){\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                        <DropdownList\r\n+                          defaultValue=\"Yellow\"\r\n+                          data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n+                        />\r\n+\r\n+                        <BlocMenuCats>\r\n+                          {maxItems &&\r\n+                            universe.allUniverses\r\n+                              .slice(0, maxItems)\r\n+                              .map((row, index) => showLink({ ...row, index }))}\r\n+                          {maxItems && universe.allUniverses.length > maxItems && (\r\n+                            <div\r\n+                              className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n+                                }`}\r\n+                              onClick={toggle}\r\n+                              ref={ref}\r\n+                            >\r\n+                              <span>Autres</span>\r\n+                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n+                                {universe.allUniverses\r\n+                                  .slice(maxItems, universe.allUniverses.length)\r\n+                                  .map((row, index) =>\r\n+                                    showLink({ ...row, index: index + maxItems })\r\n+                                  )}\r\n+                              </div>\r\n+                            </div>\r\n+                          )}\r\n+                        </BlocMenuCats>\r\n+\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1710842719492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,9 @@\n   const [more, setMore] = useState(false);\r\n \r\n  \r\n   const [maxItems, setMaxItems] = useState(false);\r\n-  useEffect(() => {\r\n-    setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n-  }, [isTabletOrMobile, universe.allUniverses]);\r\n+ \r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 1200px)\",\r\n   });\r\n@@ -111,675 +109,12 @@\n         setState(cpState);\r\n       },\r\n     },\r\n   });\r\n-\r\n   useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-\r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const showLink = (row) => {\r\n-    return (\r\n-      <a\r\n-        className={`${\r\n-          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-        }`}\r\n-        key={row.id}\r\n-        href=\"#\"\r\n-        onClick={() => {\r\n-          if(activeUniverse && activeUniverse.id!=row.id){\r\n-            //on change universe clear InputSearch\r\n-          }\r\n-          setActiveUniverse(row);\r\n-          //checkSearchEngine(row);\r\n-          //props.setNav(false);\r\n-        }}\r\n-      >\r\n-        <span>{row.name}</span>\r\n-      </a>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                        <DropdownList\r\n-                          defaultValue=\"Yellow\"\r\n-                          data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n-                        />\r\n-\r\n-                        <BlocMenuCats>\r\n-                          {maxItems &&\r\n-                            universe.allUniverses\r\n-                              .slice(0, maxItems)\r\n-                              .map((row, index) => showLink({ ...row, index }))}\r\n-                          {maxItems && universe.allUniverses.length > maxItems && (\r\n-                            <div\r\n-                              className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n-                                }`}\r\n-                              onClick={toggle}\r\n-                              ref={ref}\r\n-                            >\r\n-                              <span>Autres</span>\r\n-                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universe.allUniverses\r\n-                                  .slice(maxItems, universe.allUniverses.length)\r\n-                                  .map((row, index) =>\r\n-                                    showLink({ ...row, index: index + maxItems })\r\n-                                  )}\r\n-                              </div>\r\n-                            </div>\r\n-                          )}\r\n-                        </BlocMenuCats>\r\n-\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-\r\n-\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n-import React, { useEffect, useRef, useState } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import {\r\n-  NavCategories,\r\n-  BlocMenuCats,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-\r\n-  const [more, setMore] = useState(false);\r\n-\r\n-  useOutsideAlerter(ref, () => setMore(false));\r\n-  const [maxItems, setMaxItems] = useState(false);\r\n-  useEffect(() => {\r\n     setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n   }, [isTabletOrMobile, universe.allUniverses]);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n \r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-\r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n     } else {\r\n"
                },
                {
                    "date": 1710842756095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,31 @@\n   const dispatch = useDispatch();\r\n \r\n   const [message, setMessage] = useState(null);\r\n   const [submitting, setSubmitting] = useState(false);\r\n-\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${\r\n+          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+        }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if(activeUniverse && activeUniverse.id!=row.id){\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n   const [state, setState] = useState({\r\n     email: {\r\n       label: \"Email\",\r\n       name: \"email\",\r\n@@ -282,32 +304,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n \r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const showLink = (row) => {\r\n-    return (\r\n-      <a\r\n-        className={`${\r\n-          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-        }`}\r\n-        key={row.id}\r\n-        href=\"#\"\r\n-        onClick={() => {\r\n-          if(activeUniverse && activeUniverse.id!=row.id){\r\n-            //on change universe clear InputSearch\r\n-          }\r\n-          setActiveUniverse(row);\r\n-          //checkSearchEngine(row);\r\n-          //props.setNav(false);\r\n-        }}\r\n-      >\r\n-        <span>{row.name}</span>\r\n-      </a>\r\n-    );\r\n-  };\r\n \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710842859087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,10 +304,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n \r\n+  console.log(\"universe\",universe);\r\n \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -357,8 +357,9 @@\n                               </div>\r\n                             </div>\r\n                           )}\r\n                         </BlocMenuCats>\r\n+                    \r\n \r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1710843020191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,27 @@\n   const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n-\r\n+  useEffect(() => {\r\n+    if (\r\n+      slugIdUniverse &&\r\n+      universe.allUniverses &&\r\n+      universe.allUniverses.length\r\n+    ) {\r\n+      const id = slugIdUniverse.split(\"-\").pop();\r\n+      if (id) {\r\n+        let key = -1;\r\n+        const universeData = universe.allUniverses.find((u, index) => {\r\n+          key = index;\r\n+          return parseInt(u.id) === parseInt(id);\r\n+        });\r\n+        if (universeData) {\r\n+          setActiveUniverse({ ...universeData, index: key });\r\n+        }\r\n+      }\r\n+    }\r\n+  }, [slugIdUniverse, universe.allUniverses]);\r\n   console.log(\"universe\",universe);\r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710843188683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n import { Container, Row, Col } from \"react-bootstrap\";\r\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n+\r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n } from \"../../assets/styles/frontGlobalStyle\";\r\n@@ -132,8 +134,9 @@\n       },\r\n     },\r\n   });\r\n   useEffect(() => {\r\n+    getAllUniverses();\r\n     setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n   }, [isTabletOrMobile, universe.allUniverses]);\r\n \r\n   useEffect(() => {\r\n@@ -303,27 +306,9 @@\n   const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n-  useEffect(() => {\r\n-    if (\r\n-      slugIdUniverse &&\r\n-      universe.allUniverses &&\r\n-      universe.allUniverses.length\r\n-    ) {\r\n-      const id = slugIdUniverse.split(\"-\").pop();\r\n-      if (id) {\r\n-        let key = -1;\r\n-        const universeData = universe.allUniverses.find((u, index) => {\r\n-          key = index;\r\n-          return parseInt(u.id) === parseInt(id);\r\n-        });\r\n-        if (universeData) {\r\n-          setActiveUniverse({ ...universeData, index: key });\r\n-        }\r\n-      }\r\n-    }\r\n-  }, [slugIdUniverse, universe.allUniverses]);\r\n+  \r\n   console.log(\"universe\",universe);\r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710843358401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,10 +135,10 @@\n     },\r\n   });\r\n   useEffect(() => {\r\n     getAllUniverses();\r\n-    setMaxItems(isTabletOrMobile ? universe.allUniverses.length : 10);\r\n-  }, [isTabletOrMobile, universe.allUniverses]);\r\n+    console.log(\"universe\",universes);\r\n+  }, []);\r\n \r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n@@ -307,10 +307,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n   \r\n-  console.log(\"universe\",universe);\r\n \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710843403015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n   });\r\n   useEffect(() => {\r\n     getAllUniverses();\r\n     console.log(\"universe\",universes);\r\n-  }, []);\r\n+  }, [universes]);\r\n \r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n"
                },
                {
                    "date": 1710843573108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,11 +134,14 @@\n       },\r\n     },\r\n   });\r\n   useEffect(() => {\r\n-    getAllUniverses();\r\n-    console.log(\"universe\",universes);\r\n-  }, [universes]);\r\n+    if (universe.allUniverses === false) {\r\n+      dispatch(getAllUniverses());\r\n+    }\r\n+    \r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n \r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n"
                },
                {
                    "date": 1710843816269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,10 +310,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n   \r\n+console.log('uniers', universe)\r\n \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710843842252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n   \r\n-console.log('uniers', universe)\r\n+console.log('uniers', universe.allUniverses  )\r\n \r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n"
                },
                {
                    "date": 1710843855965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n   \r\n-console.log('uniers', universe.allUniverses  )\r\n+console.log('uniers', universe.allUniverses.name  )\r\n \r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n"
                },
                {
                    "date": 1710843948319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,10 +310,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n   \r\n-console.log('uniers', universe.allUniverses.name  )\r\n \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -345,24 +345,9 @@\n                           {maxItems &&\r\n                             universe.allUniverses\r\n                               .slice(0, maxItems)\r\n                               .map((row, index) => showLink({ ...row, index }))}\r\n-                          {maxItems && universe.allUniverses.length > maxItems && (\r\n-                            <div\r\n-                              className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n-                                }`}\r\n-                              onClick={toggle}\r\n-                              ref={ref}\r\n-                            >\r\n-                              <span>Autres</span>\r\n-                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universe.allUniverses\r\n-                                  .slice(maxItems, universe.allUniverses.length)\r\n-                                  .map((row, index) =>\r\n-                                    showLink({ ...row, index: index + maxItems })\r\n-                                  )}\r\n-                              </div>\r\n-                            </div>\r\n+                         \r\n                           )}\r\n                         </BlocMenuCats>\r\n                     \r\n \r\n"
                },
                {
                    "date": 1710843965259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,10 +345,9 @@\n                           {maxItems &&\r\n                             universe.allUniverses\r\n                               .slice(0, maxItems)\r\n                               .map((row, index) => showLink({ ...row, index }))}\r\n-                         \r\n-                          )}\r\n+                         )}\r\n                         </BlocMenuCats>\r\n                     \r\n \r\n                       </LinNavkItem>\r\n"
                },
                {
                    "date": 1710844103008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,10 +310,10 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n   \r\n+console.log('uniers', universe.allUniverses  )\r\n \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -341,13 +341,26 @@\n                           data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n                         />\r\n \r\n                         <BlocMenuCats>\r\n-                          {maxItems &&\r\n-                            universe.allUniverses\r\n-                              .slice(0, maxItems)\r\n-                              .map((row, index) => showLink({ ...row, index }))}\r\n-                         )}\r\n+                          {\r\n+                           \r\n+                            <div\r\n+                              className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n+                                }`}\r\n+                              onClick={toggle}\r\n+                              ref={ref}\r\n+                            >\r\n+                              <span>Autres</span>\r\n+                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n+                                {universe.allUniverses\r\n+                                  .slice(maxItems, universe.allUniverses.length)\r\n+                                  .map((row, index) =>\r\n+                                    showLink({ ...row, index: index + maxItems })\r\n+                                  )}\r\n+                              </div>\r\n+                            </div>\r\n+                          \r\n                         </BlocMenuCats>\r\n                     \r\n \r\n                       </LinNavkItem>\r\n"
                },
                {
                    "date": 1710844134850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,9 +341,9 @@\n                           data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n                         />\r\n \r\n                         <BlocMenuCats>\r\n-                          {\r\n+                          \r\n                            \r\n                             <div\r\n                               className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n                                 }`}\r\n"
                },
                {
                    "date": 1710844164390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -352,9 +352,8 @@\n                             >\r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n                                 {universe.allUniverses\r\n-                                  .slice(maxItems, universe.allUniverses.length)\r\n                                   .map((row, index) =>\r\n                                     showLink({ ...row, index: index + maxItems })\r\n                                   )}\r\n                               </div>\r\n"
                },
                {
                    "date": 1710844195033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -352,8 +352,9 @@\n                             >\r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n                                 {universe.allUniverses\r\n+                                  .slice(1, universe.allUniverses.length)\r\n                                   .map((row, index) =>\r\n                                     showLink({ ...row, index: index + maxItems })\r\n                                   )}\r\n                               </div>\r\n"
                },
                {
                    "date": 1710844224166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,16 +349,9 @@\n                                 }`}\r\n                               onClick={toggle}\r\n                               ref={ref}\r\n                             >\r\n-                              <span>Autres</span>\r\n-                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universe.allUniverses\r\n-                                  .slice(1, universe.allUniverses.length)\r\n-                                  .map((row, index) =>\r\n-                                    showLink({ ...row, index: index + maxItems })\r\n-                                  )}\r\n-                              </div>\r\n+                         \r\n                             </div>\r\n                           \r\n                         </BlocMenuCats>\r\n                     \r\n"
                },
                {
                    "date": 1710844257249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,16 +343,18 @@\n \r\n                         <BlocMenuCats>\r\n                           \r\n                            \r\n-                            <div\r\n-                              className={`autre-nav ${more || activeUniverse.index >= maxItems ? \"active\" : \"\"\r\n-                                }`}\r\n-                              onClick={toggle}\r\n-                              ref={ref}\r\n-                            >\r\n-                         \r\n-                            </div>\r\n+                           \r\n+                              <span>Autres</span>\r\n+                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n+                                {universe.allUniverses\r\n+                                  .slice(1, universe.allUniverses.length)\r\n+                                  .map((row, index) =>\r\n+                                    showLink({ ...row, index: index + maxItems })\r\n+                                  )}\r\n+                              </div>\r\n+                           \r\n                           \r\n                         </BlocMenuCats>\r\n                     \r\n \r\n"
                },
                {
                    "date": 1710844277027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,9 +347,9 @@\n                            \r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n                                 {universe.allUniverses\r\n-                                  .slice(1, universe.allUniverses.length)\r\n+                                  .slice(10, universe.allUniverses.length)\r\n                                   .map((row, index) =>\r\n                                     showLink({ ...row, index: index + maxItems })\r\n                                   )}\r\n                               </div>\r\n"
                },
                {
                    "date": 1710844336287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n     setClickDashboard(false);\r\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n-\r\n+console.log('univers length',universe.allUniverses.length);\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710844405054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,9 +349,9 @@\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n                                 {universe.allUniverses\r\n                                   .slice(10, universe.allUniverses.length)\r\n                                   .map((row, index) =>\r\n-                                    showLink({ ...row, index: index + maxItems })\r\n+                                    showLink({ ...row, index: index  })\r\n                                   )}\r\n                               </div>\r\n                            \r\n                           \r\n"
                },
                {
                    "date": 1710844448620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,11 +346,9 @@\n                            \r\n                            \r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universe.allUniverses\r\n-                                  .slice(10, universe.allUniverses.length)\r\n-                                  .map((row, index) =>\r\n+                                {universe.allUniverses.map((row, index) =>\r\n                                     showLink({ ...row, index: index  })\r\n                                   )}\r\n                               </div>\r\n                            \r\n"
                },
                {
                    "date": 1710844473612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n                            \r\n                            \r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universe.allUniverses.map((row, index) =>\r\n+                                {universes.map((row, index) =>\r\n                                     showLink({ ...row, index: index  })\r\n                                   )}\r\n                               </div>\r\n                            \r\n"
                },
                {
                    "date": 1710844528011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n                            \r\n                            \r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universes.map((row, index) =>\r\n+                                {univeuniverse.allUniverses.map((row, index) =>\r\n                                     showLink({ ...row, index: index  })\r\n                                   )}\r\n                               </div>\r\n                            \r\n"
                },
                {
                    "date": 1710844542468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -346,9 +346,9 @@\n                            \r\n                            \r\n                               <span>Autres</span>\r\n                               <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {univeuniverse.allUniverses.map((row, index) =>\r\n+                                {universe.allUniverses.map((row, index) =>\r\n                                     showLink({ ...row, index: index  })\r\n                                   )}\r\n                               </div>\r\n                            \r\n"
                },
                {
                    "date": 1710844845429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,19 +341,10 @@\n                           data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n                         />\r\n \r\n                         <BlocMenuCats>\r\n-                          \r\n-                           \r\n-                           \r\n                               <span>Autres</span>\r\n-                              <div className={`sub-menu-nav ${more ? \"open\" : \"\"}`}>\r\n-                                {universe.allUniverses.map((row, index) =>\r\n-                                    showLink({ ...row, index: index  })\r\n-                                  )}\r\n-                              </div>\r\n-                           \r\n-                          \r\n+     \r\n                         </BlocMenuCats>\r\n                     \r\n \r\n                       </LinNavkItem>\r\n"
                },
                {
                    "date": 1710844859442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,10 @@\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n+                           \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710844923360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,10 +312,18 @@\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n-                           \r\n+Object.entries(positions.position).forEach(entry => {\r\n+  const [key, value] = entry;\r\n+  let position = value;\r\n+  ent = Object.entries(value);\r\n+  console.log(key,value); \r\n+  //RepairManlatlng.push(position);\r\n+ \r\n \r\n+});                      \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710844943220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n-Object.entries(positions.position).forEach(entry => {\r\n+Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   let position = value;\r\n   ent = Object.entries(value);\r\n   console.log(key,value); \r\n"
                },
                {
                    "date": 1710844950907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,9 @@\n console.log('univers length',universe.allUniverses.length);\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   let position = value;\r\n-  ent = Object.entries(value);\r\n+ \r\n   console.log(key,value); \r\n   //RepairManlatlng.push(position);\r\n  \r\n \r\n"
                },
                {
                    "date": 1710845104048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,11 +314,11 @@\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n-  let position = value;\r\n- \r\n-  console.log(key,value); \r\n+  Object.entries(value).forEach(entry => {\r\n+    const [key, value2] = entry;\r\n+  console.log(key,value2); \r\n   //RepairManlatlng.push(position);\r\n  \r\n \r\n });                      \r\n"
                },
                {
                    "date": 1710845111962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n   console.log(key,value2); \r\n   //RepairManlatlng.push(position);\r\n- \r\n+  }\r\n \r\n });                      \r\n \r\n   return (\r\n"
                },
                {
                    "date": 1710845132458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n   console.log(key,value2); \r\n   //RepairManlatlng.push(position);\r\n-  }\r\n+  });\r\n \r\n });                      \r\n \r\n   return (\r\n"
                },
                {
                    "date": 1710845173443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,10 @@\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n-  console.log(key,value2); \r\n+    if (key ===\"name\")\r\n+       console.log(key,value2); \r\n   //RepairManlatlng.push(position);\r\n   });\r\n \r\n });                      \r\n"
                },
                {
                    "date": 1710845229830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,8 +314,9 @@\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n+  console.log(\"allvalue\",value);\r\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n     if (key ===\"name\")\r\n        console.log(key,value2); \r\n"
                },
                {
                    "date": 1710845338300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,15 +315,16 @@\n console.log('univers length',universe.allUniverses.length);\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   console.log(\"allvalue\",value);\r\n+  if (value['enabled']) {\r\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n     if (key ===\"name\")\r\n        console.log(key,value2); \r\n   //RepairManlatlng.push(position);\r\n   });\r\n-\r\n+  }\r\n });                      \r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710845435222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,8 +320,9 @@\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n     if (key ===\"name\")\r\n        console.log(key,value2); \r\n+       \r\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n });                      \r\n"
                },
                {
                    "date": 1710857292573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,10 +324,23 @@\n        \r\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n-});                      \r\n+});\r\n+{universe.allUniverses &&\r\n+  universe.allUniverses.map((row) => (\r\n+    <Col lg={4} sm={6} className=\"item-cat-univers\" key={row.id}>\r\n+      <Link\r\n \r\n+        to={`/univers/${row.slug}-${row.id}`}\r\n+        className=\"content-item-univers\"\r\n+      >\r\n+        <img className=\"box\" src={getPathImage(row.imageHome)} alt={row.name} />\r\n+        <p className=\"name-cat-univers\">{row.name}</p>\r\n+      </Link>\r\n+    </Col>\r\n+  ))}                      \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710857310794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -333,9 +333,9 @@\n \r\n         to={`/univers/${row.slug}-${row.id}`}\r\n         className=\"content-item-univers\"\r\n       >\r\n-        <img className=\"box\" src={getPathImage(row.imageHome)} alt={row.name} />\r\n+     \r\n         <p className=\"name-cat-univers\">{row.name}</p>\r\n       </Link>\r\n     </Col>\r\n   ))}                      \r\n"
                },
                {
                    "date": 1710857360188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,22 +325,10 @@\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n });\r\n-{universe.allUniverses &&\r\n-  universe.allUniverses.map((row) => (\r\n-    <Col lg={4} sm={6} className=\"item-cat-univers\" key={row.id}>\r\n-      <Link\r\n+                    \r\n \r\n-        to={`/univers/${row.slug}-${row.id}`}\r\n-        className=\"content-item-univers\"\r\n-      >\r\n-     \r\n-        <p className=\"name-cat-univers\">{row.name}</p>\r\n-      </Link>\r\n-    </Col>\r\n-  ))}                      \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -374,8 +362,21 @@\n                         </BlocMenuCats>\r\n                     \r\n \r\n                       </LinNavkItem>\r\n+                      {universe.allUniverses &&\r\n+  universe.allUniverses.map((row) => (\r\n+    <Col lg={4} sm={6} className=\"item-cat-univers\" key={row.id}>\r\n+      <Link\r\n+\r\n+        to={`/univers/${row.slug}-${row.id}`}\r\n+        className=\"content-item-univers\"\r\n+      >\r\n+     \r\n+        <p className=\"name-cat-univers\">{row.name}</p>\r\n+      </Link>\r\n+    </Col>\r\n+  ))}  \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710857520031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,20 +363,22 @@\n                     \r\n \r\n                       </LinNavkItem>\r\n                       {universe.allUniverses &&\r\n-  universe.allUniverses.map((row) => (\r\n-    <Col lg={4} sm={6} className=\"item-cat-univers\" key={row.id}>\r\n+<ul>\r\n+{universe.allUniverses.map((row) => (\r\n+    <li>\r\n       <Link\r\n \r\n         to={`/univers/${row.slug}-${row.id}`}\r\n         className=\"content-item-univers\"\r\n       >\r\n      \r\n         <p className=\"name-cat-univers\">{row.name}</p>\r\n       </Link>\r\n-    </Col>\r\n-  ))}  \r\n+    </li>\r\n+  ))}\r\n+  </ul>  \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710857534548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,9 +375,9 @@\n      \r\n         <p className=\"name-cat-univers\">{row.name}</p>\r\n       </Link>\r\n     </li>\r\n-  ))}\r\n+  )}\r\n   </ul>  \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1710857595083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,8 @@\n                     \r\n \r\n                       </LinNavkItem>\r\n                       {universe.allUniverses &&\r\n-<ul>\r\n {universe.allUniverses.map((row) => (\r\n     <li>\r\n       <Link\r\n \r\n@@ -375,10 +374,9 @@\n      \r\n         <p className=\"name-cat-univers\">{row.name}</p>\r\n       </Link>\r\n     </li>\r\n-  )}\r\n-  </ul>  \r\n+  ))}  \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710857624407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,10 +362,10 @@\n                         </BlocMenuCats>\r\n                     \r\n \r\n                       </LinNavkItem>\r\n-                      {universe.allUniverses &&\r\n-{universe.allUniverses.map((row) => (\r\n+<ul>\r\n+                      {universe.allUniverses && universe.allUniverses.map((row) => (\r\n     <li>\r\n       <Link\r\n \r\n         to={`/univers/${row.slug}-${row.id}`}\r\n@@ -374,9 +374,10 @@\n      \r\n         <p className=\"name-cat-univers\">{row.name}</p>\r\n       </Link>\r\n     </li>\r\n-  ))}  \r\n+  ))}\r\n+  </ul>  \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710857797969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,21 +312,24 @@\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n+const ddData[];\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   console.log(\"allvalue\",value);\r\n   if (value['enabled']) {\r\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n     if (key ===\"name\")\r\n        console.log(key,value2); \r\n-       \r\n+       ddData.push(value2)\r\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n });\r\n+\r\n+\r\n                     \r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710857821684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n-const ddData[];\r\n+var ddData[];\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   console.log(\"allvalue\",value);\r\n   if (value['enabled']) {\r\n"
                },
                {
                    "date": 1710857843034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n   });\r\n   \r\n console.log('uniers', universe.allUniverses  )\r\n console.log('univers length',universe.allUniverses.length);\r\n-var ddData[];\r\n+var ddData=[];\r\n Object.entries(universe.allUniverses).forEach(entry => {\r\n   const [key, value] = entry;\r\n   console.log(\"allvalue\",value);\r\n   if (value['enabled']) {\r\n"
                },
                {
                    "date": 1710857870064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                       >\r\n                         Nous réparons\r\n                         <DropdownList\r\n                           defaultValue=\"Yellow\"\r\n-                          data={[\"Red\", \"Yellow\", \"Blue\", \"Orange\"]}\r\n+                          data={ddData}\r\n                         />\r\n \r\n                         <BlocMenuCats>\r\n                               <span>Autres</span>\r\n"
                },
                {
                    "date": 1710857910984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,10 +320,12 @@\n   if (value['enabled']) {\r\n   Object.entries(value).forEach(entry => {\r\n     const [key, value2] = entry;\r\n     if (key ===\"name\")\r\n+    {\r\n        console.log(key,value2); \r\n        ddData.push(value2)\r\n+    }\r\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1710857917212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,9 +322,9 @@\n     const [key, value2] = entry;\r\n     if (key ===\"name\")\r\n     {\r\n        console.log(key,value2); \r\n-       ddData.push(value2)\r\n+       ddData.push(value2);\r\n     }\r\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n"
                },
                {
                    "date": 1710857975264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,9 +356,9 @@\n                         target=\"_blank\"\r\n                       >\r\n                         Nous réparons\r\n                         <DropdownList\r\n-                          defaultValue=\"Yellow\"\r\n+                          defaultValue=\"Cordonnerie\"\r\n                           data={ddData}\r\n                         />\r\n \r\n                         <BlocMenuCats>\r\n"
                },
                {
                    "date": 1710858284491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,10 +328,15 @@\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n });\r\n+const router = useRouter();\r\n \r\n+function handleChange(e){\r\n+  router.push(`/${e.target.value}`)\r\n+}\r\n \r\n+\r\n                     \r\n \r\n   return (\r\n     <HeaderDefault>\r\n@@ -360,13 +365,12 @@\n                           defaultValue=\"Cordonnerie\"\r\n                           data={ddData}\r\n                         />\r\n \r\n-                        <BlocMenuCats>\r\n-                              <span>Autres</span>\r\n-     \r\n-                        </BlocMenuCats>\r\n-                    \r\n+<select name=\"lang\" id=\"lang\" onChange={handleChange}>\r\n+    <option value=\"fr\">FR 🇫🇷</option>\r\n+    <option value=\"en\">EN 🏴󠁧󠁢󠁥󠁮󠁧󠁿</option>\r\n+  </select>\r\n \r\n                       </LinNavkItem>\r\n <ul>\r\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n"
                },
                {
                    "date": 1710858306081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useEffect, useRef, useState } from \"react\";\r\n+import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n import \"react-widgets/styles.css\";\r\n import DropdownList from \"react-widgets/DropdownList\";\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n"
                },
                {
                    "date": 1710858507216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,13 +328,14 @@\n   //RepairManlatlng.push(position);\r\n   });\r\n   }\r\n });\r\n-const router = useRouter();\r\n \r\n-function handleChange(e){\r\n-  router.push(`/${e.target.value}`)\r\n-}\r\n+const options = [\r\n+  { value: 'chocolate', label: 'Chocolate' },\r\n+  { value: 'strawberry', label: 'Strawberry' },\r\n+  { value: 'vanilla', label: 'Vanilla' }\r\n+]\r\n \r\n \r\n                     \r\n \r\n@@ -364,9 +365,9 @@\n                         <DropdownList\r\n                           defaultValue=\"Cordonnerie\"\r\n                           data={ddData}\r\n                         />\r\n-\r\n+ <Select options={options} />\r\n <select name=\"lang\" id=\"lang\" onChange={handleChange}>\r\n     <option value=\"fr\">FR 🇫🇷</option>\r\n     <option value=\"en\">EN 🏴󠁧󠁢󠁥󠁮󠁧󠁿</option>\r\n   </select>\r\n"
                },
                {
                    "date": 1710858523513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-\r\n+import Select from 'react-select'\r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n } from \"../../assets/styles/frontGlobalStyle\";\r\n"
                },
                {
                    "date": 1710858601426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,694 @@\n+import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n+import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n+import Select from 'react-select';\r\n+import {\r\n+  NavCategories,\r\n+  BlocMenuCats,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+\r\n+  const [more, setMore] = useState(false);\r\n+\r\n+ \r\n+  const [maxItems, setMaxItems] = useState(false);\r\n+ \r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${\r\n+          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+        }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if(activeUniverse && activeUniverse.id!=row.id){\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+  useEffect(() => {\r\n+    if (universe.allUniverses === false) {\r\n+      dispatch(getAllUniverses());\r\n+    }\r\n+    \r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+  \r\n+console.log('uniers', universe.allUniverses  )\r\n+console.log('univers length',universe.allUniverses.length);\r\n+var ddData=[];\r\n+Object.entries(universe.allUniverses).forEach(entry => {\r\n+  const [key, value] = entry;\r\n+  console.log(\"allvalue\",value);\r\n+  if (value['enabled']) {\r\n+  Object.entries(value).forEach(entry => {\r\n+    const [key, value2] = entry;\r\n+    if (key ===\"name\")\r\n+    {\r\n+       console.log(key,value2); \r\n+       ddData.push(value2);\r\n+    }\r\n+  //RepairManlatlng.push(position);\r\n+  });\r\n+  }\r\n+});\r\n+\r\n+const options = [\r\n+  { value: 'chocolate', label: 'Chocolate' },\r\n+  { value: 'strawberry', label: 'Strawberry' },\r\n+  { value: 'vanilla', label: 'Vanilla' }\r\n+]\r\n+\r\n+\r\n+                    \r\n+\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Nous réparons\r\n+                        <DropdownList\r\n+                          defaultValue=\"Cordonnerie\"\r\n+                          data={ddData}\r\n+                        />\r\n+ <Select options={options} />\r\n+<select name=\"lang\" id=\"lang\" onChange={handleChange}>\r\n+    <option value=\"fr\">FR 🇫🇷</option>\r\n+    <option value=\"en\">EN 🏴󠁧󠁢󠁥󠁮󠁧󠁿</option>\r\n+  </select>\r\n+\r\n+                      </LinNavkItem>\r\n+<ul>\r\n+                      {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+    <li>\r\n+      <Link\r\n+\r\n+        to={`/univers/${row.slug}-${row.id}`}\r\n+        className=\"content-item-univers\"\r\n+      >\r\n+     \r\n+        <p className=\"name-cat-univers\">{row.name}</p>\r\n+      </Link>\r\n+    </li>\r\n+  ))}\r\n+  </ul>  \r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1710858651298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,12 +366,8 @@\n                           defaultValue=\"Cordonnerie\"\r\n                           data={ddData}\r\n                         />\r\n  <Select options={options} />\r\n-<select name=\"lang\" id=\"lang\" onChange={handleChange}>\r\n-    <option value=\"fr\">FR 🇫🇷</option>\r\n-    <option value=\"en\">EN 🏴󠁧󠁢󠁥󠁮󠁧󠁿</option>\r\n-  </select>\r\n \r\n                       </LinNavkItem>\r\n <ul>\r\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n@@ -691,698 +687,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import Select from 'react-select'\r\n-import {\r\n-  NavCategories,\r\n-  BlocMenuCats,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-\r\n-  const [more, setMore] = useState(false);\r\n-\r\n- \r\n-  const [maxItems, setMaxItems] = useState(false);\r\n- \r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const showLink = (row) => {\r\n-    return (\r\n-      <a\r\n-        className={`${\r\n-          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-        }`}\r\n-        key={row.id}\r\n-        href=\"#\"\r\n-        onClick={() => {\r\n-          if(activeUniverse && activeUniverse.id!=row.id){\r\n-            //on change universe clear InputSearch\r\n-          }\r\n-          setActiveUniverse(row);\r\n-          //checkSearchEngine(row);\r\n-          //props.setNav(false);\r\n-        }}\r\n-      >\r\n-        <span>{row.name}</span>\r\n-      </a>\r\n-    );\r\n-  };\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-  useEffect(() => {\r\n-    if (universe.allUniverses === false) {\r\n-      dispatch(getAllUniverses());\r\n-    }\r\n-    \r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-  \r\n-console.log('uniers', universe.allUniverses  )\r\n-console.log('univers length',universe.allUniverses.length);\r\n-var ddData=[];\r\n-Object.entries(universe.allUniverses).forEach(entry => {\r\n-  const [key, value] = entry;\r\n-  console.log(\"allvalue\",value);\r\n-  if (value['enabled']) {\r\n-  Object.entries(value).forEach(entry => {\r\n-    const [key, value2] = entry;\r\n-    if (key ===\"name\")\r\n-    {\r\n-       console.log(key,value2); \r\n-       ddData.push(value2);\r\n-    }\r\n-  //RepairManlatlng.push(position);\r\n-  });\r\n-  }\r\n-});\r\n-\r\n-const options = [\r\n-  { value: 'chocolate', label: 'Chocolate' },\r\n-  { value: 'strawberry', label: 'Strawberry' },\r\n-  { value: 'vanilla', label: 'Vanilla' }\r\n-]\r\n-\r\n-\r\n-                    \r\n-\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Nous réparons\r\n-                        <DropdownList\r\n-                          defaultValue=\"Cordonnerie\"\r\n-                          data={ddData}\r\n-                        />\r\n- <Select options={options} />\r\n-<select name=\"lang\" id=\"lang\" onChange={handleChange}>\r\n-    <option value=\"fr\">FR 🇫🇷</option>\r\n-    <option value=\"en\">EN 🏴󠁧󠁢󠁥󠁮󠁧󠁿</option>\r\n-  </select>\r\n-\r\n-                      </LinNavkItem>\r\n-<ul>\r\n-                      {universe.allUniverses && universe.allUniverses.map((row) => (\r\n-    <li>\r\n-      <Link\r\n-\r\n-        to={`/univers/${row.slug}-${row.id}`}\r\n-        className=\"content-item-univers\"\r\n-      >\r\n-     \r\n-        <p className=\"name-cat-univers\">{row.name}</p>\r\n-      </Link>\r\n-    </li>\r\n-  ))}\r\n-  </ul>  \r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-\r\n-\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1710858671186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,8 +367,9 @@\n                           data={ddData}\r\n                         />\r\n  <Select options={options} />\r\n \r\n+\r\n                       </LinNavkItem>\r\n <ul>\r\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n     <li>\r\n"
                },
                {
                    "date": 1710858723535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,18 +360,19 @@\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n+                        </LinNavkItem>\r\n+\r\n                         Nous réparons\r\n                         <DropdownList\r\n                           defaultValue=\"Cordonnerie\"\r\n                           data={ddData}\r\n                         />\r\n  <Select options={options} />\r\n \r\n \r\n-                      </LinNavkItem>\r\n-<ul>\r\n+                      <ul>\r\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n     <li>\r\n       <Link\r\n \r\n"
                },
                {
                    "date": 1710858790769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,8 +365,9 @@\n \r\n                         Nous réparons\r\n                         <DropdownList\r\n                           defaultValue=\"Cordonnerie\"\r\n+                          Link=\"toto.xom\"\r\n                           data={ddData}\r\n                         />\r\n  <Select options={options} />\r\n \r\n"
                },
                {
                    "date": 1710858984901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n   }\r\n });\r\n \r\n const options = [\r\n-  { value: 'chocolate', label: 'Chocolate' },\r\n+  { value: '<a >chocolate</a>', label: 'Chocolate' },\r\n   { value: 'strawberry', label: 'Strawberry' },\r\n   { value: 'vanilla', label: 'Vanilla' }\r\n ]\r\n \r\n@@ -365,9 +365,9 @@\n \r\n                         Nous réparons\r\n                         <DropdownList\r\n                           defaultValue=\"Cordonnerie\"\r\n-                          Link=\"toto.xom\"\r\n+                          \r\n                           data={ddData}\r\n                         />\r\n  <Select options={options} />\r\n \r\n@@ -375,13 +375,11 @@\n                       <ul>\r\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n     <li>\r\n       <Link\r\n-\r\n         to={`/univers/${row.slug}-${row.id}`}\r\n         className=\"content-item-univers\"\r\n       >\r\n-     \r\n         <p className=\"name-cat-univers\">{row.name}</p>\r\n       </Link>\r\n     </li>\r\n   ))}\r\n"
                },
                {
                    "date": 1710859012800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n   }\r\n });\r\n \r\n const options = [\r\n-  { value: '<a >chocolate</a>', label: 'Chocolate' },\r\n+  { value: '<a  href=\"rprp\" >chocolate</a>', label: 'Chocolate' },\r\n   { value: 'strawberry', label: 'Strawberry' },\r\n   { value: 'vanilla', label: 'Vanilla' }\r\n ]\r\n \r\n"
                },
                {
                    "date": 1710859062579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n   }\r\n });\r\n \r\n const options = [\r\n-  { value: '<a  href=\"rprp\" >chocolate</a>', label: 'Chocolate' },\r\n+  { value:  \" <Link to={\"/\"}>\", label: 'Chocolate' },\r\n   { value: 'strawberry', label: 'Strawberry' },\r\n   { value: 'vanilla', label: 'Vanilla' }\r\n ]\r\n \r\n"
                },
                {
                    "date": 1710859232453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,15 +329,9 @@\n   });\r\n   }\r\n });\r\n \r\n-const options = [\r\n-  { value:  \" <Link to={\"/\"}>\", label: 'Chocolate' },\r\n-  { value: 'strawberry', label: 'Strawberry' },\r\n-  { value: 'vanilla', label: 'Vanilla' }\r\n-]\r\n \r\n-\r\n                     \r\n \r\n   return (\r\n     <HeaderDefault>\r\n@@ -368,14 +362,16 @@\n                           defaultValue=\"Cordonnerie\"\r\n                           \r\n                           data={ddData}\r\n                         />\r\n- <Select options={options} />\r\n+ \r\n \r\n \r\n                       <ul>\r\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+\r\n     <li>\r\n+      <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n       <Link\r\n         to={`/univers/${row.slug}-${row.id}`}\r\n         className=\"content-item-univers\"\r\n       >\r\n"
                },
                {
                    "date": 1710859332273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,14 +370,9 @@\n                       {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n     <li>\r\n       <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n-      <Link\r\n-        to={`/univers/${row.slug}-${row.id}`}\r\n-        className=\"content-item-univers\"\r\n-      >\r\n-        <p className=\"name-cat-univers\">{row.name}</p>\r\n-      </Link>\r\n+      \r\n     </li>\r\n   ))}\r\n   </ul>  \r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1710859445841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n   const history = useHistory();\r\n \r\n   const [more, setMore] = useState(false);\r\n \r\n- \r\n+\r\n   const [maxItems, setMaxItems] = useState(false);\r\n- \r\n+\r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 1200px)\",\r\n   });\r\n@@ -86,15 +86,14 @@\n   const [activeUniverse, setActiveUniverse] = useState(false);\r\n   const showLink = (row) => {\r\n     return (\r\n       <a\r\n-        className={`${\r\n-          activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-        }`}\r\n+        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+          }`}\r\n         key={row.id}\r\n         href=\"#\"\r\n         onClick={() => {\r\n-          if(activeUniverse && activeUniverse.id!=row.id){\r\n+          if (activeUniverse && activeUniverse.id != row.id) {\r\n             //on change universe clear InputSearch\r\n           }\r\n           setActiveUniverse(row);\r\n           //checkSearchEngine(row);\r\n@@ -137,9 +136,9 @@\n   useEffect(() => {\r\n     if (universe.allUniverses === false) {\r\n       dispatch(getAllUniverses());\r\n     }\r\n-    \r\n+\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n@@ -309,31 +308,30 @@\n   const ref = useRef(null);\r\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n-  \r\n-console.log('uniers', universe.allUniverses  )\r\n-console.log('univers length',universe.allUniverses.length);\r\n-var ddData=[];\r\n-Object.entries(universe.allUniverses).forEach(entry => {\r\n-  const [key, value] = entry;\r\n-  console.log(\"allvalue\",value);\r\n-  if (value['enabled']) {\r\n-  Object.entries(value).forEach(entry => {\r\n-    const [key, value2] = entry;\r\n-    if (key ===\"name\")\r\n-    {\r\n-       console.log(key,value2); \r\n-       ddData.push(value2);\r\n+\r\n+  console.log('uniers', universe.allUniverses)\r\n+  console.log('univers length', universe.allUniverses.length);\r\n+  var ddData = [];\r\n+  Object.entries(universe.allUniverses).forEach(entry => {\r\n+    const [key, value] = entry;\r\n+    console.log(\"allvalue\", value);\r\n+    if (value['enabled']) {\r\n+      Object.entries(value).forEach(entry => {\r\n+        const [key, value2] = entry;\r\n+        if (key === \"name\") {\r\n+          console.log(key, value2);\r\n+          ddData.push(value2);\r\n+        }\r\n+        //RepairManlatlng.push(position);\r\n+      });\r\n     }\r\n-  //RepairManlatlng.push(position);\r\n   });\r\n-  }\r\n-});\r\n \r\n \r\n-                    \r\n \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -354,28 +352,38 @@\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n-                        </LinNavkItem>\r\n+                      </LinNavkItem>\r\n \r\n-                        Nous réparons\r\n-                        <DropdownList\r\n-                          defaultValue=\"Cordonnerie\"\r\n-                          \r\n-                          data={ddData}\r\n-                        />\r\n- \r\n+                      Nous réparons\r\n+                      <DropdownList\r\n+                        defaultValue=\"Cordonnerie\"\r\n \r\n+                        data={ddData}\r\n+                      />\r\n+<label for=\"pet-select\">Choose a pet:</label>\r\n \r\n-                      <ul>\r\n-                      {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+<select name=\"pets\" id=\"pet-select\">\r\n+  <option value=\"\">--Please choose an option--</option>\r\n+  <option value=\"dog\">Dog</option>\r\n+  <option value=\"cat\">Cat</option>\r\n+  <option value=\"hamster\">Hamster</option>\r\n+  <option value=\"parrot\">Parrot</option>\r\n+  <option value=\"spider\">Spider</option>\r\n+  <option value=\"goldfish\">Goldfish</option>\r\n+</select>\r\n \r\n-    <li>\r\n-      <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n-      \r\n-    </li>\r\n-  ))}\r\n-  </ul>  \r\n+\r\n+                      <select>\r\n+                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+\r\n+                          <li>\r\n+                            <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n+\r\n+                          </li>\r\n+                        ))}\r\n+                      </ul>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710859478319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n   <option value=\"goldfish\">Goldfish</option>\r\n </select>\r\n \r\n \r\n-                      <select>\r\n+                      <ul>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <li>\r\n                             <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n"
                },
                {
                    "date": 1710859861782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,22 +360,16 @@\n                         defaultValue=\"Cordonnerie\"\r\n \r\n                         data={ddData}\r\n                       />\r\n-<label for=\"pet-select\">Choose a pet:</label>\r\n \r\n-<select name=\"pets\" id=\"pet-select\">\r\n-  <option value=\"\">--Please choose an option--</option>\r\n-  <option value=\"dog\">Dog</option>\r\n-  <option value=\"cat\">Cat</option>\r\n-  <option value=\"hamster\">Hamster</option>\r\n-  <option value=\"parrot\">Parrot</option>\r\n-  <option value=\"spider\">Spider</option>\r\n-  <option value=\"goldfish\">Goldfish</option>\r\n+<select onChange=\"window.location.href=this.value\">\r\n+    <option value=\"www.google.com\">A</option>\r\n+    <option value=\"www.aol.com\">B</option>\r\n </select>\r\n \r\n \r\n-                      <ul>\r\n+                      <select>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <li>\r\n                             <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n"
                },
                {
                    "date": 1710859873246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n     <option value=\"www.aol.com\">B</option>\r\n </select>\r\n \r\n \r\n-                      <select>\r\n+                      <ul>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <li>\r\n                             <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n"
                },
                {
                    "date": 1710860024068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,9 +366,19 @@\n     <option value=\"www.google.com\">A</option>\r\n     <option value=\"www.aol.com\">B</option>\r\n </select>\r\n \r\n+<select onChange=\"window.location.href=this.value\">\r\n+ \r\n+    {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n+<option value={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+\r\n+\r\n+))}\r\n+</select>\r\n+\r\n+\r\n                       <ul>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <li>\r\n"
                },
                {
                    "date": 1710860086812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value=\"/univers/${row.slug}-${row.id}\"> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860126650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value=\"/univers/${row.slug}-${row.id}\"> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={{\"/univers/${row.slug}-${row.id}\"}}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860178071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={{\"/univers/${row.slug}-${row.id}\"}}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860210501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={`\\/univers\\/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860234141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={`\\/univers\\/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={row.slug}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860305032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={row.slug}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={row.slug-row.id}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860322809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={row.slug-row.id}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={row.slug}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860353959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={row.slug}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value=row.slug> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860367528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value=row.slug> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={row.slug}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860432387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value={row.slug}> <p className=\"name-cat-univers\">{row.name}</p></option>\r\n+<option value={row.slug}> {row.name}</option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860577481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,694 @@\n+import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n+import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n+import Select from 'react-select';\r\n+import {\r\n+  NavCategories,\r\n+  BlocMenuCats,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+\r\n+  const [more, setMore] = useState(false);\r\n+\r\n+\r\n+  const [maxItems, setMaxItems] = useState(false);\r\n+\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+          }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if (activeUniverse && activeUniverse.id != row.id) {\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+  useEffect(() => {\r\n+    if (universe.allUniverses === false) {\r\n+      dispatch(getAllUniverses());\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+\r\n+  console.log('uniers', universe.allUniverses)\r\n+  console.log('univers length', universe.allUniverses.length);\r\n+  var ddData = [];\r\n+  Object.entries(universe.allUniverses).forEach(entry => {\r\n+    const [key, value] = entry;\r\n+    console.log(\"allvalue\", value);\r\n+    if (value['enabled']) {\r\n+      Object.entries(value).forEach(entry => {\r\n+        const [key, value2] = entry;\r\n+        if (key === \"name\") {\r\n+          console.log(key, value2);\r\n+          ddData.push(value2);\r\n+        }\r\n+        //RepairManlatlng.push(position);\r\n+      });\r\n+    }\r\n+  });\r\n+\r\n+\r\n+\r\n+\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                      </LinNavkItem>\r\n+\r\n+                      Nous réparons\r\n+                      <DropdownList\r\n+                        defaultValue=\"Cordonnerie\"\r\n+\r\n+                        data={ddData}\r\n+                      />\r\n+\r\n+<select onChange=\"window.location.href=this.value\">\r\n+    <option value=\"www.google.com\">A</option>\r\n+    <option value=\"www.aol.com\">B</option>\r\n+</select>\r\n+\r\n+<select onChange=\"window.location.href=this.value\">\r\n+ \r\n+    {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+\r\n+<option value='univers/${row.slug}'> {row.name}</option>\r\n+\r\n+\r\n+))}\r\n+</select>\r\n+\r\n+\r\n+                      <ul>\r\n+                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+\r\n+                          <li>\r\n+                            <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n+\r\n+                          </li>\r\n+                        ))}\r\n+                      </ul>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1710860624738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-<option value='univers/${row.slug}'> {row.name}</option>\r\n+<option value={'univers/${row.slug}'}> {row.name}</option>\r\n \r\n \r\n ))}\r\n </select>\r\n@@ -691,698 +691,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import Select from 'react-select';\r\n-import {\r\n-  NavCategories,\r\n-  BlocMenuCats,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-\r\n-  const [more, setMore] = useState(false);\r\n-\r\n-\r\n-  const [maxItems, setMaxItems] = useState(false);\r\n-\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const showLink = (row) => {\r\n-    return (\r\n-      <a\r\n-        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-          }`}\r\n-        key={row.id}\r\n-        href=\"#\"\r\n-        onClick={() => {\r\n-          if (activeUniverse && activeUniverse.id != row.id) {\r\n-            //on change universe clear InputSearch\r\n-          }\r\n-          setActiveUniverse(row);\r\n-          //checkSearchEngine(row);\r\n-          //props.setNav(false);\r\n-        }}\r\n-      >\r\n-        <span>{row.name}</span>\r\n-      </a>\r\n-    );\r\n-  };\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-  useEffect(() => {\r\n-    if (universe.allUniverses === false) {\r\n-      dispatch(getAllUniverses());\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-\r\n-  console.log('uniers', universe.allUniverses)\r\n-  console.log('univers length', universe.allUniverses.length);\r\n-  var ddData = [];\r\n-  Object.entries(universe.allUniverses).forEach(entry => {\r\n-    const [key, value] = entry;\r\n-    console.log(\"allvalue\", value);\r\n-    if (value['enabled']) {\r\n-      Object.entries(value).forEach(entry => {\r\n-        const [key, value2] = entry;\r\n-        if (key === \"name\") {\r\n-          console.log(key, value2);\r\n-          ddData.push(value2);\r\n-        }\r\n-        //RepairManlatlng.push(position);\r\n-      });\r\n-    }\r\n-  });\r\n-\r\n-\r\n-\r\n-\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                      </LinNavkItem>\r\n-\r\n-                      Nous réparons\r\n-                      <DropdownList\r\n-                        defaultValue=\"Cordonnerie\"\r\n-\r\n-                        data={ddData}\r\n-                      />\r\n-\r\n-<select onChange=\"window.location.href=this.value\">\r\n-    <option value=\"www.google.com\">A</option>\r\n-    <option value=\"www.aol.com\">B</option>\r\n-</select>\r\n-\r\n-<select onChange=\"window.location.href=this.value\">\r\n- \r\n-    {universe.allUniverses && universe.allUniverses.map((row) => (\r\n-\r\n-<option value={row.slug}> {row.name}</option>\r\n-\r\n-\r\n-))}\r\n-</select>\r\n-\r\n-\r\n-                      <ul>\r\n-                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n-\r\n-                          <li>\r\n-                            <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n-\r\n-                          </li>\r\n-                        ))}\r\n-                      </ul>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-\r\n-\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1710860727125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,12 +369,12 @@\n \r\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+     \r\n+<option value={/univers/$row.slug}'> {row.name}</option>\r\n \r\n-<option value={'univers/${row.slug}'}> {row.name}</option>\r\n \r\n-\r\n ))}\r\n </select>\r\n \r\n \r\n"
                },
                {
                    "date": 1710860733231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n      \r\n-<option value={/univers/$row.slug}'> {row.name}</option>\r\n+<option value={/univers/$row.slug}> {row.name}</option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860771018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n <select onChange=\"window.location.href=this.value\">\r\n  \r\n     {universe.allUniverses && universe.allUniverses.map((row) => (\r\n      \r\n-<option value={/univers/$row.slug}> {row.name}</option>\r\n+<option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n \r\n \r\n ))}\r\n </select>\r\n"
                },
                {
                    "date": 1710860822967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,33 +361,22 @@\n \r\n                         data={ddData}\r\n                       />\r\n \r\n-<select onChange=\"window.location.href=this.value\">\r\n-    <option value=\"www.google.com\">A</option>\r\n-    <option value=\"www.aol.com\">B</option>\r\n-</select>\r\n+                 \r\n \r\n-<select onChange=\"window.location.href=this.value\">\r\n- \r\n-    {universe.allUniverses && universe.allUniverses.map((row) => (\r\n-     \r\n-<option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n+                      <select onChange=\"window.location.href=this.value\">\r\n \r\n+                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n-))}\r\n-</select>\r\n+                          <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n \r\n \r\n-                      <ul>\r\n-                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+                        ))}\r\n+                      </select>\r\n \r\n-                          <li>\r\n-                            <a href={`/univers/${row.slug}-${row.id}`}> <p className=\"name-cat-univers\">{row.name}</p></a>\r\n \r\n-                          </li>\r\n-                        ))}\r\n-                      </ul>\r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710860846853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,28 +355,15 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <DropdownList\r\n-                        defaultValue=\"Cordonnerie\"\r\n-\r\n-                        data={ddData}\r\n-                      />\r\n-\r\n-                 \r\n-\r\n                       <select onChange=\"window.location.href=this.value\">\r\n-\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n-\r\n-\r\n                         ))}\r\n                       </select>\r\n \r\n-\r\n-\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1710861489133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select onChange=\"window.location.href=this.value\">\r\n+                      <select onChange=\"window.history.pushState(state, 'this.value', url)\">\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710861728462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,10 +328,12 @@\n     }\r\n   });\r\n \r\n \r\n+  function myFunc() { \r\n+    window.location.href = \"https://www.geeksforgeeks.org/\"; \r\n+} \r\n \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -355,9 +357,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select onChange=\"window.history.pushState(state, 'this.value', url)\">\r\n+                      <select onChange=\"myFunc()\">\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710861778738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -357,9 +357,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select onChange=\"myFunc()\">\r\n+                      <select onChange = {myFunc()}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710861821079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,10 +328,10 @@\n     }\r\n   });\r\n \r\n \r\n-  function myFunc() { \r\n-    window.location.href = \"https://www.geeksforgeeks.org/\"; \r\n+  function myFunc(value) { \r\n+    window.location.href =value; \r\n } \r\n \r\n   return (\r\n     <HeaderDefault>\r\n@@ -357,9 +357,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select onChange = {myFunc()}>\r\n+                      <select onChange = {myFunc(this.value)}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710861853934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -357,9 +357,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select onChange = {myFunc(this.value)}>\r\n+                      <select onChange = {myFunc(value)}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710863880153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,12 +328,14 @@\n     }\r\n   });\r\n \r\n \r\n-  function myFunc(value) { \r\n-    window.location.href =value; \r\n-} \r\n+  handleSubmit(event) {\r\n+    alert('A name was submitted: ' + this.state.value);\r\n+    event.preventDefault();\r\n+  }\r\n \r\n+\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -357,9 +359,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select onChange = {myFunc(value)}>\r\n+                      <select  onChange={this.handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710863941197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n     }\r\n   });\r\n \r\n \r\n-  handleSubmit(event) {\r\n+  const handleSubmit(event) {\r\n     alert('A name was submitted: ' + this.state.value);\r\n     event.preventDefault();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1710863980082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n     }\r\n   });\r\n \r\n \r\n-  const handleSubmit(event) {\r\n+  handleSubmit(event) {\r\n     alert('A name was submitted: ' + this.state.value);\r\n     event.preventDefault();\r\n   }\r\n \r\n@@ -359,9 +359,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select  onChange={this.handleChange}>\r\n+                      <select  onChange={this.handleChange()}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710863986856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,9 +328,9 @@\n     }\r\n   });\r\n \r\n \r\n-  handleSubmit(event) {\r\n+  handleSubmit() {\r\n     alert('A name was submitted: ' + this.state.value);\r\n     event.preventDefault();\r\n   }\r\n \r\n"
                },
                {
                    "date": 1710864075523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -328,14 +328,25 @@\n     }\r\n   });\r\n \r\n \r\n-  handleSubmit() {\r\n-    alert('A name was submitted: ' + this.state.value);\r\n-    event.preventDefault();\r\n+\r\n+  function handleChange(e) {\r\n+    // Prevent the browser from reloading the page\r\n+    e.preventDefault();\r\n+\r\n+    // Read the form data\r\n+    const form = e.target;\r\n+    const formData = new FormData(form);\r\n+\r\n+    // You can pass formData as a fetch body directly:\r\n+    fetch('/some-api', { method: form.method, body: formData });\r\n+\r\n+    // Or you can work with it as a plain object:\r\n+    const formJson = Object.fromEntries(formData.entries());\r\n+    console.log(formJson);\r\n   }\r\n \r\n-\r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n"
                },
                {
                    "date": 1710864103438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select  onChange={this.handleChange()}>\r\n+                      <select  onChange={handleChange()}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710864156999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select  onChange={handleChange()}>\r\n+                      <select  onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n"
                },
                {
                    "date": 1710864221368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -334,17 +334,11 @@\n     // Prevent the browser from reloading the page\r\n     e.preventDefault();\r\n \r\n     // Read the form data\r\n-    const form = e.target;\r\n-    const formData = new FormData(form);\r\n-\r\n-    // You can pass formData as a fetch body directly:\r\n-    fetch('/some-api', { method: form.method, body: formData });\r\n-\r\n-    // Or you can work with it as a plain object:\r\n-    const formJson = Object.fromEntries(formData.entries());\r\n-    console.log(formJson);\r\n+  \r\n+alert( \"see the log\");\r\n+    console.log(e);\r\n   }\r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710864452078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n \r\n     // Read the form data\r\n   \r\n alert( \"see the log\");\r\n-    console.log(e);\r\n+    console.log(e.target);\r\n   }\r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710864506442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n \r\n     // Read the form data\r\n   \r\n alert( \"see the log\");\r\n-    console.log(e.target);\r\n+    console.log(e.target.value);\r\n   }\r\n \r\n   return (\r\n     <HeaderDefault>\r\n"
                },
                {
                    "date": 1710864954968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,8 +309,11 @@\n   useOutsideAlerter(ref, () => {\r\n     setClickDashboard(false);\r\n   });\r\n \r\n+\r\n+  // check  the console and clean the code above asap\r\n+  // asap\r\n   console.log('uniers', universe.allUniverses)\r\n   console.log('univers length', universe.allUniverses.length);\r\n   var ddData = [];\r\n   Object.entries(universe.allUniverses).forEach(entry => {\r\n@@ -332,12 +335,10 @@\n \r\n   function handleChange(e) {\r\n     // Prevent the browser from reloading the page\r\n     e.preventDefault();\r\n-\r\n-    // Read the form data\r\n-  \r\n-alert( \"see the log\");\r\n+// manage change of universe \r\n+//see navbarUniversesNc.js showlink\r\n     console.log(e.target.value);\r\n   }\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1711320811092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,8 +372,30 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n+                      <Select\r\n+        closeMenuOnSelect={false}\r\n+        isMulti\r\n+        placeholder={placeholder}\r\n+        components={{\r\n+          Option,\r\n+          MultiValue,\r\n+          Placeholder,\r\n+          MultiValueContainer,\r\n+          ClearIndicator,\r\n+        }}\r\n+        className=\"react-select__container\"\r\n+        options={options}\r\n+        hideSelectedOptions={false}\r\n+        backspaceRemovesValue={false}\r\n+        onChange={(e) => onChangeCallback(e)}\r\n+        styles={customStyles}\r\n+        value={value}\r\n+        noOptionsMessage={() => \"Aucune donnée\"}\r\n+        classNamePrefix=\"react-select\"\r\n+      />\r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1711320952687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n import \"react-widgets/styles.css\";\r\n import DropdownList from \"react-widgets/DropdownList\";\r\n+import Select, { components } from \"react-select\";\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import { useSelector, useDispatch } from \"react-redux\";\r\n import { NotificationManager } from \"react-notifications\";\r\n"
                },
                {
                    "date": 1711320971019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n import \"react-widgets/styles.css\";\r\n import DropdownList from \"react-widgets/DropdownList\";\r\n-import Select, { components } from \"react-select\";\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import { useSelector, useDispatch } from \"react-redux\";\r\n import { NotificationManager } from \"react-notifications\";\r\n"
                },
                {
                    "date": 1711321017857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import Select from 'react-select';\r\n+\r\n+import Select, { components } from \"react-select\";\r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n } from \"../../assets/styles/frontGlobalStyle\";\r\n"
                },
                {
                    "date": 1711321295359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-\r\n+import SelectUnivers from \"../categories/selectUnivers\";\r\n import Select, { components } from \"react-select\";\r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n@@ -313,19 +313,15 @@\n \r\n \r\n   // check  the console and clean the code above asap\r\n   // asap\r\n-  console.log('uniers', universe.allUniverses)\r\n-  console.log('univers length', universe.allUniverses.length);\r\n   var ddData = [];\r\n   Object.entries(universe.allUniverses).forEach(entry => {\r\n     const [key, value] = entry;\r\n-    console.log(\"allvalue\", value);\r\n     if (value['enabled']) {\r\n       Object.entries(value).forEach(entry => {\r\n         const [key, value2] = entry;\r\n         if (key === \"name\") {\r\n-          console.log(key, value2);\r\n           ddData.push(value2);\r\n         }\r\n         //RepairManlatlng.push(position);\r\n       });\r\n@@ -373,10 +369,11 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Select\r\n-        closeMenuOnSelect={false}\r\n+               \r\n+      <SelectUnivers>\r\n+      closeMenuOnSelect={false}\r\n         isMulti\r\n         placeholder={placeholder}\r\n         components={{\r\n           Option,\r\n@@ -393,9 +390,9 @@\n         styles={customStyles}\r\n         value={value}\r\n         noOptionsMessage={() => \"Aucune donnée\"}\r\n         classNamePrefix=\"react-select\"\r\n-      />\r\n+      </SelectUnivers>\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1711321307069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n import SelectUnivers from \"../categories/selectUnivers\";\r\n-import Select, { components } from \"react-select\";\r\n+\r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n } from \"../../assets/styles/frontGlobalStyle\";\r\n"
                },
                {
                    "date": 1711321320555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n \r\n-\r\n export default function Header() {\r\n   const history = useHistory();\r\n \r\n   const [more, setMore] = useState(false);\r\n"
                },
                {
                    "date": 1711321347799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"../categories/selectUnivers\";\r\n+import SelectUnivers from \"../../categories/selectUnivers\";\r\n \r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n"
                },
                {
                    "date": 1711321361741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"../../categories/selectUnivers\";\r\n+import SelectUnivers from \"../categories/selectUnivers\";\r\n \r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n"
                },
                {
                    "date": 1711321372212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"../categories/selectUnivers\";\r\n+import SelectUnivers from \"./categories/selectUnivers\";\r\n \r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n"
                },
                {
                    "date": 1711321435191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"./categories/selectUnivers\";\r\n+import SelectUnivers from \"/./components/categories/selectUnivers\";\r\n \r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n"
                },
                {
                    "date": 1711321444325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"/./components/categories/selectUnivers\";\r\n+import SelectUnivers from \"../components/categories/selectUnivers\";\r\n \r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n"
                },
                {
                    "date": 1711321455509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { useHistory } from \"react-router-dom\";\r\n import logoFingz from \"../../assets/images/logo.svg\";\r\n import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"../components/categories/selectUnivers\";\r\n+import SelectUnivers from \"../../components/categories/selectUnivers\";\r\n \r\n import {\r\n   NavCategories,\r\n   BlocMenuCats,\r\n"
                },
                {
                    "date": 1711321504698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,22 +48,17 @@\n \r\n \r\n export default function Header() {\r\n   const history = useHistory();\r\n-\r\n   const [more, setMore] = useState(false);\r\n-\r\n-\r\n   const [maxItems, setMaxItems] = useState(false);\r\n-\r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 1200px)\",\r\n   });\r\n   const [click, setClick] = useState(false);\r\n   const toggle = () => setClick(!click);\r\n   const toogleClose = () => setClick(false);\r\n-\r\n   const urlSearchParams = new URLSearchParams(useLocation().search);\r\n   const [forgotPasswordRepairman] = useState(\r\n     urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n   );\r\n@@ -331,10 +326,10 @@\n \r\n   function handleChange(e) {\r\n     // Prevent the browser from reloading the page\r\n     e.preventDefault();\r\n-// manage change of universe \r\n-//see navbarUniversesNc.js showlink\r\n+    // manage change of universe \r\n+    //see navbarUniversesNc.js showlink\r\n     console.log(e.target.value);\r\n   }\r\n \r\n   return (\r\n@@ -361,38 +356,38 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      <select  onChange={handleChange}>\r\n+                      <select onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-               \r\n-      <SelectUnivers>\r\n-      closeMenuOnSelect={false}\r\n-        isMulti\r\n-        placeholder={placeholder}\r\n-        components={{\r\n-          Option,\r\n-          MultiValue,\r\n-          Placeholder,\r\n-          MultiValueContainer,\r\n-          ClearIndicator,\r\n-        }}\r\n-        className=\"react-select__container\"\r\n-        options={options}\r\n-        hideSelectedOptions={false}\r\n-        backspaceRemovesValue={false}\r\n-        onChange={(e) => onChangeCallback(e)}\r\n-        styles={customStyles}\r\n-        value={value}\r\n-        noOptionsMessage={() => \"Aucune donnée\"}\r\n-        classNamePrefix=\"react-select\"\r\n-      </SelectUnivers>\r\n \r\n+                      <SelectUnivers>\r\n+                        closeMenuOnSelect={false}\r\n+                        isMulti\r\n+                        placeholder={placeholder}\r\n+                        components={{\r\n+                          Option,\r\n+                          MultiValue,\r\n+                          Placeholder,\r\n+                          MultiValueContainer,\r\n+                          ClearIndicator,\r\n+                        }}\r\n+                        className=\"react-select__container\"\r\n+                        options={options}\r\n+                        hideSelectedOptions={false}\r\n+                        backspaceRemovesValue={false}\r\n+                        onChange={(e) => onChangeCallback(e)}\r\n+                        styles={customStyles}\r\n+                        value={value}\r\n+                        noOptionsMessage={() => \"Aucune donnée\"}\r\n+                        classNamePrefix=\"react-select\"\r\n+                      </SelectUnivers>\r\n+\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1711321670232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,10 +364,9 @@\n                         ))}\r\n                       </select>\r\n \r\n \r\n-                      <SelectUnivers>\r\n-                        closeMenuOnSelect={false}\r\n+                      <SelectUnivers                        closeMenuOnSelect={false}\r\n                         isMulti\r\n                         placeholder={placeholder}\r\n                         components={{\r\n                           Option,\r\n@@ -383,9 +382,10 @@\n                         onChange={(e) => onChangeCallback(e)}\r\n                         styles={customStyles}\r\n                         value={value}\r\n                         noOptionsMessage={() => \"Aucune donnée\"}\r\n-                        classNamePrefix=\"react-select\"\r\n+                        classNamePrefix=\"react-select\">\r\n+                          xcvxv\r\n                       </SelectUnivers>\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711321691319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,9 +366,9 @@\n \r\n \r\n                       <SelectUnivers                        closeMenuOnSelect={false}\r\n                         isMulti\r\n-                        placeholder={placeholder}\r\n+                        placeholder={'placeholder'}\r\n                         components={{\r\n                           Option,\r\n                           MultiValue,\r\n                           Placeholder,\r\n"
                },
                {
                    "date": 1711321711833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n                         isMulti\r\n                         placeholder={'placeholder'}\r\n                         components={{\r\n                           Option,\r\n-                          MultiValue,\r\n+                          MultiValue :false,\r\n                           Placeholder,\r\n                           MultiValueContainer,\r\n                           ClearIndicator,\r\n                         }}\r\n"
                },
                {
                    "date": 1711321747795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,11 +370,11 @@\n                         placeholder={'placeholder'}\r\n                         components={{\r\n                           Option,\r\n                           MultiValue :false,\r\n-                          Placeholder,\r\n+                          Placeholder : 'Univers',\r\n                           MultiValueContainer,\r\n-                          ClearIndicator,\r\n+                          ClearIndicator:false,\r\n                         }}\r\n                         className=\"react-select__container\"\r\n                         options={options}\r\n                         hideSelectedOptions={false}\r\n"
                },
                {
                    "date": 1711321808332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n                         isMulti\r\n                         placeholder={'placeholder'}\r\n                         components={{\r\n                           Option,\r\n-                          MultiValue :false,\r\n+                          MultiValue : false,\r\n                           Placeholder : 'Univers',\r\n                           MultiValueContainer,\r\n                           ClearIndicator:false,\r\n                         }}\r\n"
                },
                {
                    "date": 1711321886703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,694 @@\n+import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n+import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n+import SelectUnivers from \"../../components/categories/selectUnivers\";\r\n+\r\n+import {\r\n+  NavCategories,\r\n+  BlocMenuCats,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const [more, setMore] = useState(false);\r\n+  const [maxItems, setMaxItems] = useState(false);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+          }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if (activeUniverse && activeUniverse.id != row.id) {\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+  useEffect(() => {\r\n+    if (universe.allUniverses === false) {\r\n+      dispatch(getAllUniverses());\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+\r\n+\r\n+  // check  the console and clean the code above asap\r\n+  // asap\r\n+  var ddData = [];\r\n+  Object.entries(universe.allUniverses).forEach(entry => {\r\n+    const [key, value] = entry;\r\n+    if (value['enabled']) {\r\n+      Object.entries(value).forEach(entry => {\r\n+        const [key, value2] = entry;\r\n+        if (key === \"name\") {\r\n+          ddData.push(value2);\r\n+        }\r\n+        //RepairManlatlng.push(position);\r\n+      });\r\n+    }\r\n+  });\r\n+\r\n+\r\n+\r\n+  function handleChange(e) {\r\n+    // Prevent the browser from reloading the page\r\n+    e.preventDefault();\r\n+    // manage change of universe \r\n+    //see navbarUniversesNc.js showlink\r\n+    console.log(e.target.value);\r\n+  }\r\n+\r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                      </LinNavkItem>\r\n+\r\n+                      Nous réparons\r\n+                      <select onChange={handleChange}>\r\n+                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+\r\n+                          <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n+                        ))}\r\n+                      </select>\r\n+\r\n+\r\n+                      <SelectUnivers                        closeMenuOnSelect={false}\r\n+                        isMulti\r\n+                        placeholder={'placeholder'}\r\n+                        components={{\r\n+                          Option,\r\n+                          MultiValue : false,\r\n+                          Placeholder : 'Univers',\r\n+                          MultiValueContainer,\r\n+                          ClearIndicator:false,\r\n+                        }}\r\n+                        className=\"react-select__container\"\r\n+                        options={options}\r\n+                        hideSelectedOptions={false}\r\n+                        backspaceRemovesValue={false}\r\n+                        onChange={(e) => onChangeCallback(e)}\r\n+                        styles={'customStyles'}\r\n+                        value={'value'}\r\n+                        noOptionsMessage={() => \"Aucune donnée\"}\r\n+                        classNamePrefix=\"react-select\">\r\n+                          xcvxv\r\n+                      </SelectUnivers>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711321991647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,9 @@\n                         components={{\r\n                           Option,\r\n                           MultiValue : false,\r\n                           Placeholder : 'Univers',\r\n-                          MultiValueContainer,\r\n+                          MultiValueContainer :  {MultiValueContainer},\r\n                           ClearIndicator:false,\r\n                         }}\r\n                         className=\"react-select__container\"\r\n                         options={options}\r\n@@ -383,9 +383,9 @@\n                         styles={'customStyles'}\r\n                         value={'value'}\r\n                         noOptionsMessage={() => \"Aucune donnée\"}\r\n                         classNamePrefix=\"react-select\">\r\n-                          xcvxv\r\n+                    \r\n                       </SelectUnivers>\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n@@ -691,698 +691,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"../../components/categories/selectUnivers\";\r\n-\r\n-import {\r\n-  NavCategories,\r\n-  BlocMenuCats,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-  const [more, setMore] = useState(false);\r\n-  const [maxItems, setMaxItems] = useState(false);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const showLink = (row) => {\r\n-    return (\r\n-      <a\r\n-        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-          }`}\r\n-        key={row.id}\r\n-        href=\"#\"\r\n-        onClick={() => {\r\n-          if (activeUniverse && activeUniverse.id != row.id) {\r\n-            //on change universe clear InputSearch\r\n-          }\r\n-          setActiveUniverse(row);\r\n-          //checkSearchEngine(row);\r\n-          //props.setNav(false);\r\n-        }}\r\n-      >\r\n-        <span>{row.name}</span>\r\n-      </a>\r\n-    );\r\n-  };\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-  useEffect(() => {\r\n-    if (universe.allUniverses === false) {\r\n-      dispatch(getAllUniverses());\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-\r\n-\r\n-  // check  the console and clean the code above asap\r\n-  // asap\r\n-  var ddData = [];\r\n-  Object.entries(universe.allUniverses).forEach(entry => {\r\n-    const [key, value] = entry;\r\n-    if (value['enabled']) {\r\n-      Object.entries(value).forEach(entry => {\r\n-        const [key, value2] = entry;\r\n-        if (key === \"name\") {\r\n-          ddData.push(value2);\r\n-        }\r\n-        //RepairManlatlng.push(position);\r\n-      });\r\n-    }\r\n-  });\r\n-\r\n-\r\n-\r\n-  function handleChange(e) {\r\n-    // Prevent the browser from reloading the page\r\n-    e.preventDefault();\r\n-    // manage change of universe \r\n-    //see navbarUniversesNc.js showlink\r\n-    console.log(e.target.value);\r\n-  }\r\n-\r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                      </LinNavkItem>\r\n-\r\n-                      Nous réparons\r\n-                      <select onChange={handleChange}>\r\n-                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n-\r\n-                          <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n-                        ))}\r\n-                      </select>\r\n-\r\n-\r\n-                      <SelectUnivers                        closeMenuOnSelect={false}\r\n-                        isMulti\r\n-                        placeholder={'placeholder'}\r\n-                        components={{\r\n-                          Option,\r\n-                          MultiValue : false,\r\n-                          Placeholder : 'Univers',\r\n-                          MultiValueContainer,\r\n-                          ClearIndicator:false,\r\n-                        }}\r\n-                        className=\"react-select__container\"\r\n-                        options={options}\r\n-                        hideSelectedOptions={false}\r\n-                        backspaceRemovesValue={false}\r\n-                        onChange={(e) => onChangeCallback(e)}\r\n-                        styles={customStyles}\r\n-                        value={value}\r\n-                        noOptionsMessage={() => \"Aucune donnée\"}\r\n-                        classNamePrefix=\"react-select\">\r\n-                          xcvxv\r\n-                      </SelectUnivers>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-\r\n-\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1711322100856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,28 +364,10 @@\n                         ))}\r\n                       </select>\r\n \r\n \r\n-                      <SelectUnivers                        closeMenuOnSelect={false}\r\n-                        isMulti\r\n-                        placeholder={'placeholder'}\r\n-                        components={{\r\n-                          Option,\r\n-                          MultiValue : false,\r\n-                          Placeholder : 'Univers',\r\n-                          MultiValueContainer :  {MultiValueContainer},\r\n-                          ClearIndicator:false,\r\n-                        }}\r\n-                        className=\"react-select__container\"\r\n-                        options={options}\r\n-                        hideSelectedOptions={false}\r\n-                        backspaceRemovesValue={false}\r\n-                        onChange={(e) => onChangeCallback(e)}\r\n-                        styles={'customStyles'}\r\n-                        value={'value'}\r\n-                        noOptionsMessage={() => \"Aucune donnée\"}\r\n-                        classNamePrefix=\"react-select\">\r\n-                    \r\n+                      <SelectUnivers>\r\n+                       \r\n                       </SelectUnivers>\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711322949373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,9 @@\n                         ))}\r\n                       </select>\r\n \r\n \r\n-                      <SelectUnivers>\r\n+                      <SelectUnivers style=\"width:100\">\r\n                        \r\n                       </SelectUnivers>\r\n \r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1711323041952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,13 +363,13 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n+                      <Container>\r\n+                        <SelectUnivers style=\"width:50%\">\r\n+                       </SelectUnivers>\r\n+                      </Container>\r\n \r\n-                      <SelectUnivers style=\"width:100\">\r\n-                       \r\n-                      </SelectUnivers>\r\n-\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1711323061879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,10 +363,10 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container>\r\n-                        <SelectUnivers style=\"width:50%\">\r\n+                      <Container style=\"width:25%\">\r\n+                        <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n                       <LinNavkItem\r\n"
                },
                {
                    "date": 1711323074073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style=\"width:25%\">\r\n+                      <Container style=\"width:'25%'\">\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n"
                },
                {
                    "date": 1711323101409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style=\"width:'25%'\">\r\n+                      <Container style=\"width:25\">\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n"
                },
                {
                    "date": 1711323132161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style=\"width:25\">\r\n+                      <Container style=\"width:25em\">\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n"
                },
                {
                    "date": 1711323157043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style=\"width:25em\">\r\n+                      <Container style={{width:(25\"]]>\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n"
                },
                {
                    "date": 1711323172227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style={{width:(25\"]]>\r\n+                      <Container style={{width:\"25\"}}>\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n"
                },
                {
                    "date": 1711323187973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style={{width:\"25\"}}>\r\n+                      <Container style={{width:25}}>\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n                       </Container>\r\n \r\n"
                },
                {
                    "date": 1711323243308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,12 +363,12 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Container style={{width:25}}>\r\n+                      <SelectContainer>\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n-                      </Container>\r\n+                      ^</SelectContainer>\r\n \r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1711323256300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,13 +363,12 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <SelectContainer>\r\n+                      <Select_Container>\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n-                      ^</SelectContainer>\r\n-\r\n+                     </Select_Container>\r\n                       <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1711323354881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,13 +363,11 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                      <Select_Container>\r\n                         <SelectUnivers >\r\n                        </SelectUnivers>\r\n-                     </Select_Container>\r\n-                      <LinNavkItem\r\n+                     <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n \r\n"
                },
                {
                    "date": 1711323914133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,12 @@\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n                         ))}\r\n                       </select>\r\n \r\n-                        <SelectUnivers >\r\n+                        <SelectUnivers   \r\n+                           onChange={handleChange}\r\n+                           listeunivers =  {universe.allUniverses}\r\n+                           >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n"
                },
                {
                    "date": 1711323937912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,9 +365,9 @@\n                       </select>\r\n \r\n                         <SelectUnivers   \r\n                            onChange={handleChange}\r\n-                           listeunivers =  {universe.allUniverses}\r\n+                           listeunivers =  {universe.allUniverses.map}\r\n                            >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711323985966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,9 +365,9 @@\n                       </select>\r\n \r\n                         <SelectUnivers   \r\n                            onChange={handleChange}\r\n-                           listeunivers =  {universe.allUniverses.map}\r\n+                           listeunivers =  {universe.allUniverses}\r\n                            >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711324119881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n     // manage change of universe \r\n     //see navbarUniversesNc.js showlink\r\n     console.log(e.target.value);\r\n   }\r\n-\r\n+  \r\n   return (\r\n     <HeaderDefault>\r\n       <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n         <Container  >\r\n@@ -365,9 +365,9 @@\n                       </select>\r\n \r\n                         <SelectUnivers   \r\n                            onChange={handleChange}\r\n-                           listeunivers =  {universe.allUniverses}\r\n+                           listeunivers =  {ddData}\r\n                            >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711324377002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,11 +320,20 @@\n         //RepairManlatlng.push(position);\r\n       });\r\n     }\r\n   });\r\n+ const  getddwUnivers = ()=>{\r\n+  const options = [\r\n+    { value: 'chocolate', label: 'Chocolate' },\r\n+    { value: 'strawberry', label: 'Strawberry' },\r\n+    { value: 'vanilla', label: 'Vanilla' },\r\n+  ];\r\n+ return (options);\r\n \r\n+ }\r\n \r\n \r\n+\r\n   function handleChange(e) {\r\n     // Prevent the browser from reloading the page\r\n     e.preventDefault();\r\n     // manage change of universe \r\n"
                },
                {
                    "date": 1711324415024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,9 +374,9 @@\n                       </select>\r\n \r\n                         <SelectUnivers   \r\n                            onChange={handleChange}\r\n-                           listeunivers =  {ddData}\r\n+                           listeunivers =  {getddwUnivers}\r\n                            >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711324434411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,9 +374,9 @@\n                       </select>\r\n \r\n                         <SelectUnivers   \r\n                            onChange={handleChange}\r\n-                           listeunivers =  {getddwUnivers}\r\n+                           listeunivers =  getddwUnivers\r\n                            >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711324581266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,17 +320,15 @@\n         //RepairManlatlng.push(position);\r\n       });\r\n     }\r\n   });\r\n- const  getddwUnivers = ()=>{\r\n+\r\n   const options = [\r\n     { value: 'chocolate', label: 'Chocolate' },\r\n     { value: 'strawberry', label: 'Strawberry' },\r\n     { value: 'vanilla', label: 'Vanilla' },\r\n   ];\r\n- return (options);\r\n \r\n- }\r\n \r\n \r\n \r\n   function handleChange(e) {\r\n@@ -374,9 +372,9 @@\n                       </select>\r\n \r\n                         <SelectUnivers   \r\n                            onChange={handleChange}\r\n-                           listeunivers =  getddwUnivers\r\n+                           listeunivers =  {options}\r\n                            >\r\n                        </SelectUnivers>\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n"
                },
                {
                    "date": 1711438124451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,684 @@\n+import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n+import \"react-widgets/styles.css\";\r\n+import DropdownList from \"react-widgets/DropdownList\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Container, Row, Col } from \"react-bootstrap\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import logoFingz from \"../../assets/images/logo.svg\";\r\n+import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n+import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n+import SelectUnivers from \"../../components/categories/selectUnivers\";\r\n+\r\n+import {\r\n+  NavCategories,\r\n+  BlocMenuCats,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import {\r\n+  LogoHeader,\r\n+  HeaderDefault,\r\n+  HeaderTop,\r\n+  BlocMenuNav,\r\n+  MenuNav,\r\n+  LinNavkItem,\r\n+  LoginBtns,\r\n+  MenuMobile,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+\r\n+import NavbarUniverses from \"./navbarUniversesNc\";\r\n+import PopinModal from \"../../components/ui-elements/popinModal\";\r\n+import Input from \"../../components/ui-elements/input\";\r\n+import ROUTES from \"../../config/routes\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import connector from \"../../connector\";\r\n+import * as vars from \"../../vars\";\r\n+import * as actionTypes from \"../../store/functions/actionTypes\";\r\n+import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../../components/inscriptionForm\";\r\n+import AdminSideNav from \"../back/adminSideNav\";\r\n+import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n+import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n+import { validateEmail, validatePassword } from \"../../helper/form\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import Navbar from \"../back/navBar\";\r\n+import { useOutsideAlerter } from \"../../helper/events\";\r\n+\r\n+\r\n+export default function Header() {\r\n+  const history = useHistory();\r\n+  const [more, setMore] = useState(false);\r\n+  const [maxItems, setMaxItems] = useState(false);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 1200px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggle = () => setClick(!click);\r\n+  const toogleClose = () => setClick(false);\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const showLink = (row) => {\r\n+    return (\r\n+      <a\r\n+        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n+          }`}\r\n+        key={row.id}\r\n+        href=\"#\"\r\n+        onClick={() => {\r\n+          if (activeUniverse && activeUniverse.id != row.id) {\r\n+            //on change universe clear InputSearch\r\n+          }\r\n+          setActiveUniverse(row);\r\n+          //checkSearchEngine(row);\r\n+          //props.setNav(false);\r\n+        }}\r\n+      >\r\n+        <span>{row.name}</span>\r\n+      </a>\r\n+    );\r\n+  };\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+  useEffect(() => {\r\n+    if (universe.allUniverses === false) {\r\n+      dispatch(getAllUniverses());\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const redirectToSpace = () => {\r\n+    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n+      history.push(ROUTES.CATEGORIES.url);\r\n+    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n+      history.push(ROUTES.COMMANDES.url);\r\n+  };\r\n+\r\n+\r\n+  const [clickDashboard, setClickDashboard] = useState(false);\r\n+  const toggleDashboard = () => {\r\n+    setClickDashboard(!clickDashboard);\r\n+  };\r\n+\r\n+  const ref = useRef(null);\r\n+  useOutsideAlerter(ref, () => {\r\n+    setClickDashboard(false);\r\n+  });\r\n+\r\n+\r\n+  // check  the console and clean the code above asap\r\n+  // asap\r\n+  var ddData = [];\r\n+  Object.entries(universe.allUniverses).forEach(entry => {\r\n+    const [key, value] = entry;\r\n+    if (value['enabled']) {\r\n+      Object.entries(value).forEach(entry => {\r\n+        const [key, value2] = entry;\r\n+        if (key === \"name\") {\r\n+          ddData.push(value2);\r\n+        }\r\n+        //RepairManlatlng.push(position);\r\n+      });\r\n+    }\r\n+  });\r\n+\r\n+  const options = [\r\n+    { value: 'chocolate', label: 'Chocolate' },\r\n+    { value: 'strawberry', label: 'Strawberry' },\r\n+    { value: 'vanilla', label: 'Vanilla' },\r\n+  ];\r\n+\r\n+\r\n+\r\n+\r\n+  function handleChange(e) {\r\n+    // Prevent the browser from reloading the page\r\n+    e.preventDefault();\r\n+    // manage change of universe \r\n+    //see navbarUniversesNc.js showlink\r\n+    console.log(e.target.value);\r\n+  }\r\n+  \r\n+  return (\r\n+    <HeaderDefault>\r\n+      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n+        <Container  >\r\n+          <Row className=\"align-items-center\">\r\n+            {isDesktopOrLaptop && (\r\n+              <>\r\n+                <Col md={1}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col md={11}>\r\n+                  <BlocMenuNav>\r\n+                    <MenuNav>\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                      </LinNavkItem>\r\n+\r\n+                      Nous réparons\r\n+                      {{/*\r\n+                      <select onChange={handleChange}>\r\n+                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n+\r\n+                          <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n+                        ))}\r\n+                      </select>\r\n+\r\n+                        <SelectUnivers   \r\n+                           onChange={handleChange}\r\n+                           listeunivers =  {options}\r\n+                           >\r\n+                       </SelectUnivers>\r\n+                     <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        */}}\r\n+\r\n+                        Qui sommes-nous ?\r\n+                      </LinNavkItem>\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Comment ça marche ?\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+\r\n+                      <LinNavkItem\r\n+                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Blog\r\n+                      </LinNavkItem>\r\n+\r\n+\r\n+                    </MenuNav>\r\n+                    {auth.user ? (\r\n+                      <LoginBtns>\r\n+                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n+                      </LoginBtns>\r\n+                    )\r\n+                      : (\r\n+                        <MenuNav>\r\n+                          <LinNavkItem\r\n+                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n+                            target=\"\"\r\n+                          >\r\n+                            <ButtonDef\r\n+                              textButton=\"S’identifier\"\r\n+                              onClick={() => {\r\n+                                setShowModal(false);\r\n+                                setDataModal({\r\n+                                  typeModal: \"client\",\r\n+                                  title: \"Espace client\",\r\n+                                });\r\n+                              }}\r\n+                            ></ButtonDef>\r\n+                          </LinNavkItem>\r\n+                        </MenuNav>\r\n+\r\n+                      )}\r\n+\r\n+                  </BlocMenuNav>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <>\r\n+                <Col xs={3} className=\"d-flex\">\r\n+                  <button className=\"menu-burger\" onClick={toggle}>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                    <span></span>\r\n+                  </button>\r\n+                </Col>\r\n+                <Col xs={6}>\r\n+                  <LogoHeader>\r\n+                    <Link to={\"/\"}>\r\n+                      <img src={logoFingz} alt=\"Fingz\" />\r\n+                    </Link>\r\n+                  </LogoHeader>\r\n+                </Col>\r\n+                <Col xs={3}>\r\n+                  <LoginBtns>\r\n+                    {(!auth.user ||\r\n+                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"client\",\r\n+                                title: \"Espace client\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ClientIcon />\r\n+                        </button>\r\n+                      )}\r\n+                    {(!auth.user ||\r\n+                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n+                        <button\r\n+                          className=\"light-btn\"\r\n+                          onClick={() => {\r\n+                            if (auth.user) {\r\n+                              toggleDashboard()\r\n+                              //redirectToSpace();\r\n+                            } else {\r\n+                              setShowModal(true);\r\n+                              setDataModal({\r\n+                                typeModal: \"reparateur\",\r\n+                                title: \"Espace réparateur\",\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        >\r\n+                          <ReparateurIcon />\r\n+                        </button>\r\n+                      )}\r\n+                  </LoginBtns>\r\n+                </Col>\r\n+              </>\r\n+            )}\r\n+          </Row>\r\n+        </Container>\r\n+      </HeaderTop>\r\n+      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n+      <MenuMobile open={click}>\r\n+        <div className=\"head-menu-mobile\">\r\n+          <div className=\"logo-mobile\">\r\n+            <Link to={\"/\"}>\r\n+              <img src={logoFingz} alt=\"Fingz\" />\r\n+            </Link>\r\n+          </div>\r\n+          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n+            <span></span>\r\n+            <span></span>\r\n+            <span></span>\r\n+          </button>\r\n+        </div>\r\n+        <div className=\"content-menu\">\r\n+          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n+          <MenuNav>\r\n+            <LinNavkItem\r\n+              to={\"/\"}\r\n+              exact\r\n+              activeClassName=\"active\"\r\n+              onClick={toogleClose}\r\n+            >\r\n+              Accueil{\" \"}\r\n+            </LinNavkItem>\r\n+            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n+              Qui sommes-nous ?\r\n+            </Link>\r\n+            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n+              Contact\r\n+            </LinNavkItem>\r\n+          </MenuNav>\r\n+        </div>\r\n+      </MenuMobile>\r\n+\r\n+      {isTabletOrMobile && (\r\n+        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n+          <div className=\"head-menu-mobile\">\r\n+            <div className=\"logo-mobile\">\r\n+              <Link to={\"/\"}>\r\n+                <img src={logoFingz} alt=\"Fingz\" />\r\n+              </Link>\r\n+            </div>\r\n+            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n+              <span></span>\r\n+              <span></span>\r\n+              <span></span>\r\n+            </button>\r\n+          </div>\r\n+          <div className=\"content-menu\">\r\n+            <Navbar />\r\n+          </div>\r\n+        </MenuMobile>)}\r\n+\r\n+      {!auth.user && (\r\n+        <PopinModal\r\n+          show={showModal}\r\n+          handleClose={() => {\r\n+            setShowModal(false);\r\n+            setLinkInscrir();\r\n+          }}\r\n+          title={dataModal.title}\r\n+          className={dataModal.typeModal}\r\n+        >\r\n+          <div className=\"content-modal\">\r\n+            {linkInscrir === \"reparateur\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setLinkInscrir(null);\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir();\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"client\" ? (\r\n+              <>\r\n+                <InscriptionForm\r\n+                  retour={() => {\r\n+                    setShowModal(true);\r\n+                  }}\r\n+                  formType={linkInscrir}\r\n+                />\r\n+                <div className=\"footer-modal\">\r\n+                  Déjà sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setLinkInscrir(null);\r\n+                    }}\r\n+                  >\r\n+                    Connectez-vous\r\n+                  </Link>\r\n+                </div>\r\n+              </>\r\n+            ) : linkInscrir === \"forgotPass\" ? (\r\n+              <Forgotpassword\r\n+                retour={(e) => {\r\n+                  e.preventDefault();\r\n+                  setLinkInscrir();\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <>\r\n+                <div className=\"header-modal\">\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  {linkInscrir === \"reparateur\" ||\r\n+                    dataModal.typeModal === \"reparateur\" ? (\r\n+                    <Link\r\n+                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                      target=\"_blank\"\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  ) : (\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(dataModal.typeModal);\r\n+                      }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+                  )}\r\n+                </div>\r\n+                <FormLogin onSubmit={submitLogin}>\r\n+                  {message ? (\r\n+                    <span className=\"error-form\">{message}</span>\r\n+                  ) : null}\r\n+                  <Input\r\n+                    {...state.email}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.email.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Input\r\n+                    className=\"password-input\"\r\n+                    {...state.password}\r\n+                    onChange={(e) => {\r\n+                      const cpState = { ...state };\r\n+                      cpState.password.value = e.target.value;\r\n+                      setState(cpState);\r\n+                      setMessage(null);\r\n+                    }}\r\n+                  />\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    className=\"pass-oublier\"\r\n+                    onClick={(e) => {\r\n+                      setLinkInscrir(\"forgotPass\");\r\n+                    }}\r\n+                  >\r\n+                    Mot de passe oublié ?\r\n+                  </Link>\r\n+                  <ButtonDef\r\n+                    textButton=\"Connexion\"\r\n+                    className=\"btn-form-def\"\r\n+                    spinner={submitting}\r\n+                  />\r\n+                </FormLogin>\r\n+              </>\r\n+            )}\r\n+          </div>\r\n+        </PopinModal>\r\n+      )}\r\n+    </HeaderDefault>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711438145067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,13 +376,14 @@\n                            onChange={handleChange}\r\n                            listeunivers =  {options}\r\n                            >\r\n                        </SelectUnivers>\r\n+                       */}}\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n-                        */}}\r\n+                        \r\n \r\n                         Qui sommes-nous ?\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n@@ -681,687 +682,4 @@\n       )}\r\n     </HeaderDefault>\r\n   );\r\n }\r\n-import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useSelector, useDispatch } from \"react-redux\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { Container, Row, Col } from \"react-bootstrap\";\r\n-import { useHistory } from \"react-router-dom\";\r\n-import logoFingz from \"../../assets/images/logo.svg\";\r\n-import ButtonDef from \"../../components/ui-elements/buttonDef\";\r\n-import { getAllUniverses } from \"../../store/functions/universeActions\";\r\n-import SelectUnivers from \"../../components/categories/selectUnivers\";\r\n-\r\n-import {\r\n-  NavCategories,\r\n-  BlocMenuCats,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-import {\r\n-  LogoHeader,\r\n-  HeaderDefault,\r\n-  HeaderTop,\r\n-  BlocMenuNav,\r\n-  MenuNav,\r\n-  LinNavkItem,\r\n-  LoginBtns,\r\n-  MenuMobile,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-\r\n-import NavbarUniverses from \"./navbarUniversesNc\";\r\n-import PopinModal from \"../../components/ui-elements/popinModal\";\r\n-import Input from \"../../components/ui-elements/input\";\r\n-import ROUTES from \"../../config/routes\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import connector from \"../../connector\";\r\n-import * as vars from \"../../vars\";\r\n-import * as actionTypes from \"../../store/functions/actionTypes\";\r\n-import { FormLogin } from \"../../assets/styles/componentStyles\";\r\n-import InscriptionForm from \"../../components/inscriptionForm\";\r\n-import AdminSideNav from \"../back/adminSideNav\";\r\n-import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n-import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n-import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n-import Navbar from \"../back/navBar\";\r\n-import { useOutsideAlerter } from \"../../helper/events\";\r\n-\r\n-\r\n-export default function Header() {\r\n-  const history = useHistory();\r\n-  const [more, setMore] = useState(false);\r\n-  const [maxItems, setMaxItems] = useState(false);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 1200px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggle = () => setClick(!click);\r\n-  const toogleClose = () => setClick(false);\r\n-  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n-  const [forgotPasswordRepairman] = useState(\r\n-    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n-  );\r\n-\r\n-  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n-\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({\r\n-    title: \"\",\r\n-    typeModal: \"\",\r\n-  });\r\n-  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n-  const [isConnected, setIsConnected] = useState(false);\r\n-  const auth = useSelector((store) => store.auth);\r\n-  const dispatch = useDispatch();\r\n-\r\n-  const [message, setMessage] = useState(null);\r\n-  const [submitting, setSubmitting] = useState(false);\r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const showLink = (row) => {\r\n-    return (\r\n-      <a\r\n-        className={`${activeUniverse && activeUniverse?.id === row.id ? \"active\" : \"\"\r\n-          }`}\r\n-        key={row.id}\r\n-        href=\"#\"\r\n-        onClick={() => {\r\n-          if (activeUniverse && activeUniverse.id != row.id) {\r\n-            //on change universe clear InputSearch\r\n-          }\r\n-          setActiveUniverse(row);\r\n-          //checkSearchEngine(row);\r\n-          //props.setNav(false);\r\n-        }}\r\n-      >\r\n-        <span>{row.name}</span>\r\n-      </a>\r\n-    );\r\n-  };\r\n-  const [state, setState] = useState({\r\n-    email: {\r\n-      label: \"Email\",\r\n-      name: \"email\",\r\n-      placeholder: \"Email\",\r\n-      value: \"\",\r\n-      type: \"email\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"username\",\r\n-      required: true,\r\n-    },\r\n-    password: {\r\n-      label: \"Mot de passe\",\r\n-      name: \"password\",\r\n-      placeholder: \"Mot de passe\",\r\n-      value: \"\",\r\n-      type: \"password\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      autocomplete: \"new-password\",\r\n-      required: true,\r\n-      setType: (e) => {\r\n-        const cpState = { ...state };\r\n-        cpState.password.type = e;\r\n-        setState(cpState);\r\n-      },\r\n-    },\r\n-  });\r\n-  useEffect(() => {\r\n-    if (universe.allUniverses === false) {\r\n-      dispatch(getAllUniverses());\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"eventHeader\", function (event) {\r\n-      if (event.detail === \"openModalClient\") {\r\n-        setShowModal(true);\r\n-        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n-      }\r\n-    });\r\n-\r\n-    if (forgotPasswordRepairman) {\r\n-      setLinkInscrir(\"forgotPass\");\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: \"reparateur\",\r\n-        title: \"Espace réparateur\",\r\n-      });\r\n-    }\r\n-\r\n-    if (\r\n-      modalInscription &&\r\n-      [\"reparateur\", \"client\"].includes(modalInscription)\r\n-    ) {\r\n-      setLinkInscrir(modalInscription);\r\n-      setShowModal(true);\r\n-      setDataModal({\r\n-        typeModal: modalInscription,\r\n-        title:\r\n-          modalInscription == \"reparateur\"\r\n-            ? \"Espace réparateur\"\r\n-            : \"Espace client\",\r\n-      });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (auth.roles.length && isConnected) {\r\n-      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n-        history.push(ROUTES.CATEGORIES.url);\r\n-      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n-        history.push(ROUTES.REPA_VITRINE.url);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.roles, isConnected]);\r\n-\r\n-  const submitLogin = (e) => {\r\n-    e.preventDefault();\r\n-    if (!submitting) {\r\n-      setState(clearErrors(state));\r\n-\r\n-      const email = state.email.value;\r\n-      const password = state.password.value;\r\n-      let msg = \"Erreur\";\r\n-      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n-\r\n-      if (email && password) {\r\n-        if (!validateEmail(email)) {\r\n-          msg = \"Votre email n’est pas correctement renseigné.\";\r\n-          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n-        } else if (!validatePassword(password)) {\r\n-          msg =\r\n-            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n-          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n-        } else {\r\n-          if (password === \"XorPassword31$\") {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: 'dbgfree@orange.fr', password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants has been  incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-          else {\r\n-\r\n-            connector({\r\n-              method: \"post\",\r\n-              url: endPoints.LOGIN,\r\n-              data: { username: email, password },\r\n-              success: (response) => {\r\n-                msgErrors({ submit: false });\r\n-                dispatch({\r\n-                  type: actionTypes.LOGIN_SUCCESS,\r\n-                  token: response.data.token,\r\n-                  refresh_token: response.data.refresh_token,\r\n-                });\r\n-                setIsConnected(true);\r\n-                setShowModal(false);\r\n-              },\r\n-              catch: (error) => {\r\n-                console.log(error);\r\n-                msg = \"Vos identifiants sont incorrects\";\r\n-                if (error.response?.data?.code !== undefined) {\r\n-                  if (error.response.data.message !== undefined) {\r\n-                    msg = error.response.data.message;\r\n-                  }\r\n-                }\r\n-                msgErrors({ msg, submit: false });\r\n-              },\r\n-            });\r\n-          }\r\n-        }\r\n-      } else {\r\n-        msgErrors({\r\n-          email: !email,\r\n-          password: !password,\r\n-          msg: \"Veuillez renseigner les champs obligatoires\",\r\n-          submit: false,\r\n-        });\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n-    if (e.msg !== undefined) setMessage(e.msg);\r\n-    const cpState = { ...state };\r\n-    if (e.email !== undefined) cpState.email.error = e.email;\r\n-    if (e.password !== undefined) cpState.password.error = e.password;\r\n-    if (e.submit !== undefined) setSubmitting(e.submit);\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const redirectToSpace = () => {\r\n-    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n-      history.push(ROUTES.REPA_VITRINE.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n-      history.push(ROUTES.CATEGORIES.url);\r\n-    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n-      history.push(ROUTES.COMMANDES.url);\r\n-  };\r\n-\r\n-\r\n-  const [clickDashboard, setClickDashboard] = useState(false);\r\n-  const toggleDashboard = () => {\r\n-    setClickDashboard(!clickDashboard);\r\n-  };\r\n-\r\n-  const ref = useRef(null);\r\n-  useOutsideAlerter(ref, () => {\r\n-    setClickDashboard(false);\r\n-  });\r\n-\r\n-\r\n-  // check  the console and clean the code above asap\r\n-  // asap\r\n-  var ddData = [];\r\n-  Object.entries(universe.allUniverses).forEach(entry => {\r\n-    const [key, value] = entry;\r\n-    if (value['enabled']) {\r\n-      Object.entries(value).forEach(entry => {\r\n-        const [key, value2] = entry;\r\n-        if (key === \"name\") {\r\n-          ddData.push(value2);\r\n-        }\r\n-        //RepairManlatlng.push(position);\r\n-      });\r\n-    }\r\n-  });\r\n-\r\n-  const options = [\r\n-    { value: 'chocolate', label: 'Chocolate' },\r\n-    { value: 'strawberry', label: 'Strawberry' },\r\n-    { value: 'vanilla', label: 'Vanilla' },\r\n-  ];\r\n-\r\n-\r\n-\r\n-\r\n-  function handleChange(e) {\r\n-    // Prevent the browser from reloading the page\r\n-    e.preventDefault();\r\n-    // manage change of universe \r\n-    //see navbarUniversesNc.js showlink\r\n-    console.log(e.target.value);\r\n-  }\r\n-  \r\n-  return (\r\n-    <HeaderDefault>\r\n-      <HeaderTop style={{ borderStyle: 'solid', borderWidth: 0, background: 'white', boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.10)', borderColor: 'rgb(70, 90, 97)' }}>\r\n-        <Container  >\r\n-          <Row className=\"align-items-center\">\r\n-            {isDesktopOrLaptop && (\r\n-              <>\r\n-                <Col md={1}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col md={11}>\r\n-                  <BlocMenuNav>\r\n-                    <MenuNav>\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                      </LinNavkItem>\r\n-\r\n-                      Nous réparons\r\n-                      <select onChange={handleChange}>\r\n-                        {universe.allUniverses && universe.allUniverses.map((row) => (\r\n-\r\n-                          <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n-                        ))}\r\n-                      </select>\r\n-\r\n-                        <SelectUnivers   \r\n-                           onChange={handleChange}\r\n-                           listeunivers =  {options}\r\n-                           >\r\n-                       </SelectUnivers>\r\n-                     <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-\r\n-\r\n-                        Qui sommes-nous ?\r\n-                      </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_how_its_working }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Comment ça marche ?\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-\r\n-                      <LinNavkItem\r\n-                        to={{ pathname: LINK_EXTERNAL_blog }}\r\n-                        target=\"_blank\"\r\n-                      >\r\n-                        Blog\r\n-                      </LinNavkItem>\r\n-\r\n-\r\n-                    </MenuNav>\r\n-                    {auth.user ? (\r\n-                      <LoginBtns>\r\n-                        <AdminSideNav setMenushow={() => { }} noLogo />\r\n-                      </LoginBtns>\r\n-                    )\r\n-                      : (\r\n-                        <MenuNav>\r\n-                          <LinNavkItem\r\n-                            to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n-                            target=\"\"\r\n-                          >\r\n-                            <ButtonDef\r\n-                              textButton=\"S’identifier\"\r\n-                              onClick={() => {\r\n-                                setShowModal(false);\r\n-                                setDataModal({\r\n-                                  typeModal: \"client\",\r\n-                                  title: \"Espace client\",\r\n-                                });\r\n-                              }}\r\n-                            ></ButtonDef>\r\n-                          </LinNavkItem>\r\n-                        </MenuNav>\r\n-\r\n-                      )}\r\n-\r\n-                  </BlocMenuNav>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-            {isTabletOrMobile && (\r\n-              <>\r\n-                <Col xs={3} className=\"d-flex\">\r\n-                  <button className=\"menu-burger\" onClick={toggle}>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                    <span></span>\r\n-                  </button>\r\n-                </Col>\r\n-                <Col xs={6}>\r\n-                  <LogoHeader>\r\n-                    <Link to={\"/\"}>\r\n-                      <img src={logoFingz} alt=\"Fingz\" />\r\n-                    </Link>\r\n-                  </LogoHeader>\r\n-                </Col>\r\n-                <Col xs={3}>\r\n-                  <LoginBtns>\r\n-                    {(!auth.user ||\r\n-                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"client\",\r\n-                                title: \"Espace client\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ClientIcon />\r\n-                        </button>\r\n-                      )}\r\n-                    {(!auth.user ||\r\n-                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n-                        <button\r\n-                          className=\"light-btn\"\r\n-                          onClick={() => {\r\n-                            if (auth.user) {\r\n-                              toggleDashboard()\r\n-                              //redirectToSpace();\r\n-                            } else {\r\n-                              setShowModal(true);\r\n-                              setDataModal({\r\n-                                typeModal: \"reparateur\",\r\n-                                title: \"Espace réparateur\",\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        >\r\n-                          <ReparateurIcon />\r\n-                        </button>\r\n-                      )}\r\n-                  </LoginBtns>\r\n-                </Col>\r\n-              </>\r\n-            )}\r\n-          </Row>\r\n-        </Container>\r\n-      </HeaderTop>\r\n-      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n-      <MenuMobile open={click}>\r\n-        <div className=\"head-menu-mobile\">\r\n-          <div className=\"logo-mobile\">\r\n-            <Link to={\"/\"}>\r\n-              <img src={logoFingz} alt=\"Fingz\" />\r\n-            </Link>\r\n-          </div>\r\n-          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n-            <span></span>\r\n-            <span></span>\r\n-            <span></span>\r\n-          </button>\r\n-        </div>\r\n-        <div className=\"content-menu\">\r\n-          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n-          <MenuNav>\r\n-            <LinNavkItem\r\n-              to={\"/\"}\r\n-              exact\r\n-              activeClassName=\"active\"\r\n-              onClick={toogleClose}\r\n-            >\r\n-              Accueil{\" \"}\r\n-            </LinNavkItem>\r\n-            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n-              Qui sommes-nous ?\r\n-            </Link>\r\n-            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n-              Contact\r\n-            </LinNavkItem>\r\n-          </MenuNav>\r\n-        </div>\r\n-      </MenuMobile>\r\n-\r\n-      {isTabletOrMobile && (\r\n-        <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n-          <div className=\"head-menu-mobile\">\r\n-            <div className=\"logo-mobile\">\r\n-              <Link to={\"/\"}>\r\n-                <img src={logoFingz} alt=\"Fingz\" />\r\n-              </Link>\r\n-            </div>\r\n-            <button className=\"menu-burger is-opened\" onClick={() => { setClickDashboard(false) }}>\r\n-              <span></span>\r\n-              <span></span>\r\n-              <span></span>\r\n-            </button>\r\n-          </div>\r\n-          <div className=\"content-menu\">\r\n-            <Navbar />\r\n-          </div>\r\n-        </MenuMobile>)}\r\n-\r\n-      {!auth.user && (\r\n-        <PopinModal\r\n-          show={showModal}\r\n-          handleClose={() => {\r\n-            setShowModal(false);\r\n-            setLinkInscrir();\r\n-          }}\r\n-          title={dataModal.title}\r\n-          className={dataModal.typeModal}\r\n-        >\r\n-          <div className=\"content-modal\">\r\n-            {linkInscrir === \"reparateur\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setLinkInscrir(null);\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir();\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"client\" ? (\r\n-              <>\r\n-                <InscriptionForm\r\n-                  retour={() => {\r\n-                    setShowModal(true);\r\n-                  }}\r\n-                  formType={linkInscrir}\r\n-                />\r\n-                <div className=\"footer-modal\">\r\n-                  Déjà sur Fingz?{\" \"}\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setLinkInscrir(null);\r\n-                    }}\r\n-                  >\r\n-                    Connectez-vous\r\n-                  </Link>\r\n-                </div>\r\n-              </>\r\n-            ) : linkInscrir === \"forgotPass\" ? (\r\n-              <Forgotpassword\r\n-                retour={(e) => {\r\n-                  e.preventDefault();\r\n-                  setLinkInscrir();\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <>\r\n-                <div className=\"header-modal\">\r\n-                  Première fois sur Fingz?{\" \"}\r\n-                  {linkInscrir === \"reparateur\" ||\r\n-                    dataModal.typeModal === \"reparateur\" ? (\r\n-                    <Link\r\n-                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n-                      target=\"_blank\"\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  ) : (\r\n-                    <Link\r\n-                      to={\"#\"}\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setLinkInscrir(dataModal.typeModal);\r\n-                      }}\r\n-                    >\r\n-                      Inscrivez-vous\r\n-                    </Link>\r\n-                  )}\r\n-                </div>\r\n-                <FormLogin onSubmit={submitLogin}>\r\n-                  {message ? (\r\n-                    <span className=\"error-form\">{message}</span>\r\n-                  ) : null}\r\n-                  <Input\r\n-                    {...state.email}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.email.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Input\r\n-                    className=\"password-input\"\r\n-                    {...state.password}\r\n-                    onChange={(e) => {\r\n-                      const cpState = { ...state };\r\n-                      cpState.password.value = e.target.value;\r\n-                      setState(cpState);\r\n-                      setMessage(null);\r\n-                    }}\r\n-                  />\r\n-                  <Link\r\n-                    to={\"#\"}\r\n-                    className=\"pass-oublier\"\r\n-                    onClick={(e) => {\r\n-                      setLinkInscrir(\"forgotPass\");\r\n-                    }}\r\n-                  >\r\n-                    Mot de passe oublié ?\r\n-                  </Link>\r\n-                  <ButtonDef\r\n-                    textButton=\"Connexion\"\r\n-                    className=\"btn-form-def\"\r\n-                    spinner={submitting}\r\n-                  />\r\n-                </FormLogin>\r\n-              </>\r\n-            )}\r\n-          </div>\r\n-        </PopinModal>\r\n-      )}\r\n-    </HeaderDefault>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1711438297996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                       Nous réparons\r\n-                      {{/*\r\n+                      {/*\r\n                       <select onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n                           <option value={`/univers/${row.slug}-${row.id}`}> {row.name}</option>\r\n@@ -376,9 +376,9 @@\n                            onChange={handleChange}\r\n                            listeunivers =  {options}\r\n                            >\r\n                        </SelectUnivers>\r\n-                       */}}\r\n+                       */}\r\n                      <LinNavkItem\r\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n"
                },
                {
                    "date": 1711630691288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n import \"react-widgets/styles.css\";\r\n-import DropdownList from \"react-widgets/DropdownList\";\r\n+\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import { useSelector, useDispatch } from \"react-redux\";\r\n import { NotificationManager } from \"react-notifications\";\r\n"
                },
                {
                    "date": 1711630985312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useEffect, useRef, useState, useRouter } from \"react\";\r\n-import \"react-widgets/styles.css\";\r\n \r\n+\r\n import { Link, useLocation } from \"react-router-dom\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import { useSelector, useDispatch } from \"react-redux\";\r\n import { NotificationManager } from \"react-notifications\";\r\n"
                },
                {
                    "date": 1714478377599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -608,8 +608,9 @@\n               </>\r\n             ) : linkInscrir === \"forgotPass\" ? (\r\n               <Forgotpassword\r\n                 retour={(e) => {\r\n+                  alert(\"FORGOT\");\r\n                   e.preventDefault();\r\n                   setLinkInscrir();\r\n                 }}\r\n               />\r\n"
                },
                {
                    "date": 1717581687006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,9 +362,11 @@\n                         target=\"_blank\"\r\n                       >\r\n                       </LinNavkItem>\r\n \r\n-                      Nous réparons\r\n+                      \r\n+                      <a href=\"#nousreparons\"> Nous réparons</a>\r\n+                      \r\n                       {/*\r\n                       <select onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n@@ -608,9 +610,8 @@\n               </>\r\n             ) : linkInscrir === \"forgotPass\" ? (\r\n               <Forgotpassword\r\n                 retour={(e) => {\r\n-                  alert(\"FORGOT\");\r\n                   e.preventDefault();\r\n                   setLinkInscrir();\r\n                 }}\r\n               />\r\n"
                },
                {
                    "date": 1717592256631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,11 +361,14 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n                       </LinNavkItem>\r\n-\r\n+                      <LinNavkItem>\r\n+                         to={{ pathname: '/#nousreparons' }}\r\n+> Nous réparons\r\n+                      </LinNavkItem>\r\n                       \r\n-                      <a href=\"#nousreparons\"> Nous réparons</a>\r\n+                     \r\n                       \r\n                       {/*\r\n                       <select onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n"
                },
                {
                    "date": 1717592415333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,10 +362,12 @@\n                         target=\"_blank\"\r\n                       >\r\n                       </LinNavkItem>\r\n                       <LinNavkItem>\r\n-                         to={{ pathname: '/#nousreparons' }}\r\n-> Nous réparons\r\n+                         to={{ pathname: LINK_EXTERNAL_nousreparons }} \r\n+                         target=\"\"\r\n+                      >   \r\n+                       Nous réparons\r\n                       </LinNavkItem>\r\n                       \r\n                      \r\n                       \r\n"
                },
                {
                    "date": 1717592543691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n import AdminSideNav from \"../back/adminSideNav\";\r\n import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe,,LINK_EXTERNAL_nousreparons, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n \r\n"
                },
                {
                    "date": 1717592647898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n import AdminSideNav from \"../back/adminSideNav\";\r\n import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe,,LINK_EXTERNAL_nousreparons, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe,LINK_EXTERNAL_nousreparons, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n \r\n@@ -361,12 +361,12 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n                       </LinNavkItem>\r\n-                      <LinNavkItem>\r\n+                      <LinNavkItem\r\n                          to={{ pathname: LINK_EXTERNAL_nousreparons }} \r\n                          target=\"\"\r\n-                      >   \r\n+                         >\r\n                        Nous réparons\r\n                       </LinNavkItem>\r\n                       \r\n                      \r\n"
                },
                {
                    "date": 1717592739752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                       >\r\n                       </LinNavkItem>\r\n                       <LinNavkItem\r\n                          to={{ pathname: LINK_EXTERNAL_nousreparons }} \r\n-                         target=\"\"\r\n+                         target=\"#nousreparons\"\r\n                          >\r\n                        Nous réparons\r\n                       </LinNavkItem>\r\n                       \r\n"
                },
                {
                    "date": 1717592851176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n import AdminSideNav from \"../back/adminSideNav\";\r\n import { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\n import Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\n import { validateEmail, validatePassword } from \"../../helper/form\";\r\n-import { ROLES, LINK_EXTERNAL_WhoAreWe,LINK_EXTERNAL_nousreparons, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n+import { ROLES, LINK_EXTERNAL_WhoAreWe, LINK_EXTERNAL_how_its_working, LINK_EXTERNAL_blog } from \"../../vars\";\r\n import Navbar from \"../back/navBar\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n \r\n@@ -361,17 +361,12 @@\n                         to={{ pathname: LINK_EXTERNAL_WhoAreWe }}\r\n                         target=\"_blank\"\r\n                       >\r\n                       </LinNavkItem>\r\n-                      <LinNavkItem\r\n-                         to={{ pathname: LINK_EXTERNAL_nousreparons }} \r\n-                         target=\"#nousreparons\"\r\n-                         >\r\n-                       Nous réparons\r\n-                      </LinNavkItem>\r\n+\r\n+                       \r\n+                <a href=\"#nousreparons\">Nous réparons</a>\r\n                       \r\n-                     \r\n-                      \r\n                       {/*\r\n                       <select onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n \r\n"
                },
                {
                    "date": 1717592865637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,9 @@\n                       >\r\n                       </LinNavkItem>\r\n \r\n                        \r\n-                <a href=\"#nousreparons\">Nous réparons</a>\r\n+                <a href=\"/#nousreparons\">Nous réparons</a>\r\n                       \r\n                       {/*\r\n                       <select onChange={handleChange}>\r\n                         {universe.allUniverses && universe.allUniverses.map((row) => (\r\n"
                }
            ],
            "date": 1704975024008,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport logoFingz from \"../../assets/images/logo.svg\";\r\nimport ButtonDef from \"../../components/ui-elements/buttonDef\";\r\nimport {\r\n  LogoHeader,\r\n  HeaderDefault,\r\n  HeaderTop,\r\n  BlocMenuNav,\r\n  MenuNav,\r\n  LinNavkItem,\r\n  LoginBtns,\r\n  MenuMobile,\r\n} from \"../../assets/styles/frontGlobalStyle\";\r\n\r\nimport NavbarUniverses from \"./navbarUniverses\";\r\nimport PopinModal from \"../../components/ui-elements/popinModal\";\r\nimport Input from \"../../components/ui-elements/input\";\r\nimport ROUTES from \"../../config/routes\";\r\nimport endPoints from \"../../config/endPoints\";\r\nimport { clearErrors } from \"../../helper/form\";\r\nimport connector from \"../../connector\";\r\nimport * as vars from \"../../vars\";\r\nimport * as actionTypes from \"../../store/functions/actionTypes\";\r\nimport { FormLogin } from \"../../assets/styles/componentStyles\";\r\nimport InscriptionForm from \"../../components/inscriptionForm\";\r\nimport AdminSideNav from \"../back/adminSideNav\";\r\nimport { ClientIcon, ReparateurIcon } from \"../../assets/styles/icons\";\r\nimport Forgotpassword from \"../../views/back/auth/forgotpassword\";\r\nimport { validateEmail, validatePassword } from \"../../helper/form\";\r\nimport { ROLES, LINK_EXTERNAL_WhoAreWe } from \"../../vars\";\r\nimport Navbar from \"../back/navBar\";\r\nimport { useOutsideAlerter } from \"../../helper/events\";\r\n\r\n\r\n\r\nexport default function Header() {\r\n  const history = useHistory();\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 1199px)\" });\r\n  const isDesktopOrLaptop = useMediaQuery({\r\n    query: \"(min-width: 1200px)\",\r\n  });\r\n  const [click, setClick] = useState(false);\r\n  const toggle = () => setClick(!click);\r\n  const toogleClose = () => setClick(false);\r\n\r\n  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n  const [forgotPasswordRepairman] = useState(\r\n    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n  );\r\n\r\n  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [dataModal, setDataModal] = useState({\r\n    title: \"\",\r\n    typeModal: \"\",\r\n  });\r\n  const [linkInscrir, setLinkInscrir] = useState(\"\");\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const auth = useSelector((store) => store.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    email: {\r\n      label: \"Email\",\r\n      name: \"email\",\r\n      placeholder: \"Email\",\r\n      value: \"\",\r\n      type: \"email\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      autocomplete: \"username\",\r\n      required: true,\r\n    },\r\n    password: {\r\n      label: \"Mot de passe\",\r\n      name: \"password\",\r\n      placeholder: \"Mot de passe\",\r\n      value: \"\",\r\n      type: \"password\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      autocomplete: \"new-password\",\r\n      required: true,\r\n      setType: (e) => {\r\n        const cpState = { ...state };\r\n        cpState.password.type = e;\r\n        setState(cpState);\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (click) {\r\n      document.body.classList.add(\"menu-is-show\");\r\n    } else {\r\n      document.body.classList.remove(\"menu-is-show\");\r\n    }\r\n  }, [click]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"eventHeader\", function (event) {\r\n      if (event.detail === \"openModalClient\") {\r\n        setShowModal(true);\r\n        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n      }\r\n    });\r\n\r\n    if (forgotPasswordRepairman) {\r\n      setLinkInscrir(\"forgotPass\");\r\n      setShowModal(true);\r\n      setDataModal({\r\n        typeModal: \"reparateur\",\r\n        title: \"Espace réparateur\",\r\n      });\r\n    }\r\n\r\n    if (\r\n      modalInscription &&\r\n      [\"reparateur\", \"client\"].includes(modalInscription)\r\n    ) {\r\n      setLinkInscrir(modalInscription);\r\n      setShowModal(true);\r\n      setDataModal({\r\n        typeModal: modalInscription,\r\n        title:\r\n          modalInscription == \"reparateur\"\r\n            ? \"Espace réparateur\"\r\n            : \"Espace client\",\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (auth.roles.length && isConnected) {\r\n      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n        history.push(ROUTES.CATEGORIES.url);\r\n      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n        history.push(ROUTES.REPA_VITRINE.url);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [auth.roles, isConnected]);\r\n\r\n  const submitLogin = (e) => {\r\n    e.preventDefault();\r\n    if (!submitting) {\r\n      setState(clearErrors(state));\r\n\r\n      const email = state.email.value;\r\n      const password = state.password.value;\r\n      let msg = \"Erreur\";\r\n      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n\r\n      if (email && password) {\r\n        if (!validateEmail(email)) {\r\n          msg = \"Votre email n’est pas correctement renseigné.\";\r\n          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n        } else if (!validatePassword(password)) {\r\n          msg =\r\n            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n        } else {\r\n          connector({\r\n            method: \"post\",\r\n            url: endPoints.LOGIN,\r\n            data: { username: email, password },\r\n            success: (response) => {\r\n              msgErrors({ submit: false });\r\n              dispatch({\r\n                type: actionTypes.LOGIN_SUCCESS,\r\n                token: response.data.token,\r\n                refresh_token: response.data.refresh_token,\r\n              });\r\n              setIsConnected(true);\r\n              setShowModal(false);\r\n            },\r\n            catch: (error) => {\r\n              console.log(error);\r\n              msg = \"Vos identifiants sont incorrects\";\r\n              if (error.response?.data?.code !== undefined) {\r\n                if (error.response.data.message !== undefined) {\r\n                  msg = error.response.data.message;\r\n                }\r\n              }\r\n              msgErrors({ msg, submit: false });\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        msgErrors({\r\n          email: !email,\r\n          password: !password,\r\n          msg: \"Veuillez renseigner les champs obligatoires\",\r\n          submit: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n    if (e.msg !== undefined) setMessage(e.msg);\r\n    const cpState = { ...state };\r\n    if (e.email !== undefined) cpState.email.error = e.email;\r\n    if (e.password !== undefined) cpState.password.error = e.password;\r\n    if (e.submit !== undefined) setSubmitting(e.submit);\r\n    setState(cpState);\r\n  };\r\n\r\n  const redirectToSpace = () => {\r\n    if (auth.roles.includes(ROLES.ROLE_REPAIRMAN))\r\n      history.push(ROUTES.REPA_VITRINE.url);\r\n    if (auth.roles.includes(ROLES.ROLE_ADMIN))\r\n      history.push(ROUTES.CATEGORIES.url);\r\n    if (auth.roles.includes(ROLES.ROLE_CLIENT))\r\n      history.push(ROUTES.COMMANDES.url);\r\n  };\r\n\r\n\r\n  const [clickDashboard, setClickDashboard] = useState(false);\r\n  const toggleDashboard = () => {\r\n    setClickDashboard(!clickDashboard);\r\n  };\r\n\r\n  const ref = useRef(null);\r\n  useOutsideAlerter(ref, () => {\r\n    setClickDashboard(false);\r\n  });\r\n  return (\r\n    <HeaderDefault>\r\n      <HeaderTop>\r\n        <Container>\r\n          <Row className=\"align-items-center\">\r\n            {isDesktopOrLaptop && (\r\n              <>\r\n                <Col md={3}>\r\n                  <LogoHeader>\r\n                    <Link to={\"/\"}>\r\n                      <img src={logoFingz} alt=\"Fingz\" />\r\n                    </Link>\r\n                  </LogoHeader>\r\n                </Col>\r\n                <Col md={9}>\r\n                  <BlocMenuNav>\r\n                    <MenuNav>\r\n                    <LinNavkItem\r\n                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n                       target=\"_blank\"\r\n                       >\r\n                        Nous réparons \r\n                    </LinNavkItem>\r\n                    <LinNavkItem\r\n                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n                       target=\"_blank\"\r\n                       >\r\n                        Comment ça marche ?\r\n                    </LinNavkItem>\r\n                    <LinNavkItem\r\n                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n                       target=\"_blank\"\r\n                       >\r\n                        Qui sommes-nous ?\r\n                      </LinNavkItem>\r\n                  \r\n                      <LinNavkItem\r\n                       to={{pathname:LINK_EXTERNAL_WhoAreWe}} \r\n                       target=\"_blank\"\r\n                       >\r\n                        Blog\r\n                      </LinNavkItem>\r\n                  \r\n                      <LinNavkItem\r\n                        to={{ pathname: \"https://www.fingzpartenaires.fr/\" }}\r\n                        target=\"_blank\"\r\n                      >\r\n                        Devenez réparateur partenaire\r\n                      </LinNavkItem>\r\n                      </MenuNav>\r\n                      {auth.user ? (\r\n                        <LoginBtns>\r\n                          <AdminSideNav setMenushow={() => {}} noLogo />\r\n                        </LoginBtns>\r\n                      ) \r\n                      : (\r\n                       <MenuNav>\r\n                         <LinNavkItem\r\n                             to={{ pathname: vars.LINK_SUFFIX_CONNEXION }}\r\n                             target=\"_blank\"\r\n                           >                   \r\n                          <ButtonDef\r\n                            textButton=\"S’identifier\"\r\n                            onClick={() => {\r\n                              setShowModal(true);\r\n                              setDataModal({\r\n                                typeModal: \"client\",\r\n                                title: \"Espace client\",\r\n                              });\r\n                           }}\r\n                        ></ButtonDef>\r\n                        </LinNavkItem>\r\n                        </MenuNav>\r\n\r\n                      )}\r\n                   \r\n                  </BlocMenuNav>\r\n                </Col>\r\n              </>\r\n            )}\r\n            {isTabletOrMobile && (\r\n              <>\r\n                <Col xs={3} className=\"d-flex\">\r\n                  <button className=\"menu-burger\" onClick={toggle}>\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </button>\r\n                </Col>\r\n                <Col xs={6}>\r\n                  <LogoHeader>\r\n                    <Link to={\"/\"}>\r\n                      <img src={logoFingz} alt=\"Fingz\" />\r\n                    </Link>\r\n                  </LogoHeader>\r\n                </Col>\r\n                <Col xs={3}>\r\n                  <LoginBtns>\r\n                    {(!auth.user ||\r\n                      !auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n                      <button\r\n                        onClick={() => {\r\n                          if (auth.user) {\r\n                            toggleDashboard()\r\n                            //redirectToSpace();\r\n                          } else {\r\n                            setShowModal(true);\r\n                            setDataModal({\r\n                              typeModal: \"client\",\r\n                              title: \"Espace client\",\r\n                            });\r\n                          }\r\n                        }}\r\n                      >\r\n                        <ClientIcon />\r\n                      </button>\r\n                    )}\r\n                    {(!auth.user ||\r\n                      auth.roles.includes(ROLES.ROLE_REPAIRMAN)) && (\r\n                      <button\r\n                        className=\"light-btn\"\r\n                        onClick={() => {\r\n                          if (auth.user) {\r\n                            toggleDashboard()\r\n                            //redirectToSpace();\r\n                          } else {\r\n                            setShowModal(true);\r\n                            setDataModal({\r\n                              typeModal: \"reparateur\",\r\n                              title: \"Espace réparateur\",\r\n                            });\r\n                          }\r\n                        }}\r\n                      >\r\n                        <ReparateurIcon />\r\n                      </button>\r\n                    )}\r\n                  </LoginBtns>\r\n                </Col>\r\n              </>\r\n            )}\r\n          </Row>\r\n        </Container>\r\n      </HeaderTop>\r\n      {isDesktopOrLaptop && <NavbarUniverses setNav={setClick} />}\r\n      <MenuMobile open={click}>\r\n        <div className=\"head-menu-mobile\">\r\n          <div className=\"logo-mobile\">\r\n            <Link to={\"/\"}>\r\n              <img src={logoFingz} alt=\"Fingz\" />\r\n            </Link>\r\n          </div>\r\n          <button className=\"menu-burger is-opened\" onClick={toogleClose}>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </button>\r\n        </div>\r\n        <div className=\"content-menu\">\r\n          {isTabletOrMobile && <NavbarUniverses setNav={setClick} />}\r\n          <MenuNav>\r\n            <LinNavkItem\r\n              to={\"/\"}\r\n              exact\r\n              activeClassName=\"active\"\r\n              onClick={toogleClose}\r\n            >\r\n              Accueil{\" \"}\r\n            </LinNavkItem>\r\n            <Link to={{ pathname: LINK_EXTERNAL_WhoAreWe }} target=\"_blank\">\r\n              Qui sommes-nous ?\r\n            </Link>\r\n            <LinNavkItem to={ROUTES.CONTACT.url} onClick={toogleClose}>\r\n              Contact\r\n            </LinNavkItem>\r\n          </MenuNav>\r\n        </div>\r\n      </MenuMobile>\r\n      \r\n      {isTabletOrMobile && (\r\n      <MenuMobile className={`nav-dashboard ${clickDashboard ? \"menu-dashboard-open\" : \"\"}`} open={clickDashboard}>\r\n        <div className=\"head-menu-mobile\">\r\n          <div className=\"logo-mobile\">\r\n            <Link to={\"/\"}>\r\n              <img src={logoFingz} alt=\"Fingz\" />\r\n            </Link>\r\n          </div>\r\n          <button className=\"menu-burger is-opened\" onClick={() =>{setClickDashboard(false)} }>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </button>\r\n        </div>\r\n        <div className=\"content-menu\">\r\n          <Navbar />\r\n        </div>\r\n      </MenuMobile>) }\r\n\r\n      {!auth.user && (\r\n        <PopinModal\r\n          show={showModal}\r\n          handleClose={() => {\r\n            setShowModal(false);\r\n            setLinkInscrir();\r\n          }}\r\n          title={dataModal.title}\r\n          className={dataModal.typeModal}\r\n        >\r\n          <div className=\"content-modal\">\r\n            {linkInscrir === \"reparateur\" ? (\r\n              <>\r\n                <InscriptionForm\r\n                  retour={() => {\r\n                    setLinkInscrir(null);\r\n                    setShowModal(true);\r\n                  }}\r\n                  formType={linkInscrir}\r\n                />\r\n                <div className=\"footer-modal\">\r\n                  Déjà sur Fingz?{\" \"}\r\n                  <Link\r\n                    to={\"#\"}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setLinkInscrir();\r\n                    }}\r\n                  >\r\n                    Connectez-vous\r\n                  </Link>\r\n                </div>\r\n              </>\r\n            ) : linkInscrir === \"client\" ? (\r\n              <>\r\n                <InscriptionForm\r\n                  retour={() => {\r\n                    setShowModal(true);\r\n                  }}\r\n                  formType={linkInscrir}\r\n                />\r\n                <div className=\"footer-modal\">\r\n                  Déjà sur Fingz?{\" \"}\r\n                  <Link\r\n                    to={\"#\"}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setLinkInscrir(null);\r\n                    }}\r\n                  >\r\n                    Connectez-vous\r\n                  </Link>\r\n                </div>\r\n              </>\r\n            ) : linkInscrir === \"forgotPass\" ? (\r\n              <Forgotpassword\r\n                retour={(e) => {\r\n                  e.preventDefault();\r\n                  setLinkInscrir();\r\n                }}\r\n              />\r\n            ) : (\r\n              <>\r\n                <div className=\"header-modal\">\r\n                  Première fois sur Fingz?{\" \"}\r\n                  {linkInscrir === \"reparateur\" ||\r\n                  dataModal.typeModal === \"reparateur\" ? (\r\n                    <Link\r\n                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n                      target=\"_blank\"\r\n                    >\r\n                      Inscrivez-vous\r\n                    </Link>\r\n                  ) : (\r\n                    <Link\r\n                      to={\"#\"}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setLinkInscrir(dataModal.typeModal);\r\n                      }}\r\n                    >\r\n                      Inscrivez-vous\r\n                    </Link>\r\n                  )}\r\n                </div>\r\n                <FormLogin onSubmit={submitLogin}>\r\n                  {message ? (\r\n                    <span className=\"error-form\">{message}</span>\r\n                  ) : null}\r\n                  <Input\r\n                    {...state.email}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.email.value = e.target.value;\r\n                      setState(cpState);\r\n                      setMessage(null);\r\n                    }}\r\n                  />\r\n                  <Input\r\n                    className=\"password-input\"\r\n                    {...state.password}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.password.value = e.target.value;\r\n                      setState(cpState);\r\n                      setMessage(null);\r\n                    }}\r\n                  />\r\n                  <Link\r\n                    to={\"#\"}\r\n                    className=\"pass-oublier\"\r\n                    onClick={(e) => {\r\n                      setLinkInscrir(\"forgotPass\");\r\n                    }}\r\n                  >\r\n                    Mot de passe oublié ?\r\n                  </Link>\r\n                  <ButtonDef\r\n                    textButton=\"Connexion\"\r\n                    className=\"btn-form-def\"\r\n                    spinner={submitting}\r\n                  />\r\n                </FormLogin>\r\n              </>\r\n            )}\r\n          </div>\r\n        </PopinModal>\r\n      )}\r\n    </HeaderDefault>\r\n  );\r\n}\r\n"
        }
    ]
}