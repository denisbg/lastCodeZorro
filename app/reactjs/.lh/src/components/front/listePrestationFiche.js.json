{
    "sourceFile": "src/components/front/listePrestationFiche.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 158,
            "patches": [
                {
                    "date": 1706549944637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706549953833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,13 @@\n   const _onChildClick = (key, childProps) => {\r\n     let i = null;\r\n     const benefit = benefits.length\r\n       ? benefits.find((val, index) => {\r\n-        if (val.id === childProps.id) {\r\n-          i = index;\r\n-          return true;\r\n-        }\r\n-      })\r\n+          if (val.id === childProps.id) {\r\n+            i = index;\r\n+            return true;\r\n+          }\r\n+        })\r\n       : { id: null };\r\n     if (benefit.id) {\r\n       setActiveBenefit(benefit);\r\n       if (isTabletOrMobile) {\r\n@@ -108,28 +108,29 @@\n     }\r\n   };\r\n \r\n   const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n-      }`;\r\n+    return `${service.name} : ${benefits.length} réparateur${\r\n+      benefits.length > 1 ? \"(s)\" : \"\"\r\n+    }`;\r\n   };\r\n \r\n   const places = benefits.length\r\n     ? benefits.map((row) => {\r\n-      return (\r\n-        <PrestationFicheMap\r\n-          key={row.id}\r\n-          lat={row.user.latitude}\r\n-          lng={row.user.longitude}\r\n-          text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-          }\r\n-          id={row.id}\r\n-          // use your hover state (from store, react-controllables etc...)\r\n-          activeBenefit={activeBenefit}\r\n-        />\r\n-      );\r\n-    })\r\n+        return (\r\n+          <PrestationFicheMap\r\n+            key={row.id}\r\n+            lat={row.user.latitude}\r\n+            lng={row.user.longitude}\r\n+            text={\r\n+              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+            }\r\n+            id={row.id}\r\n+            // use your hover state (from store, react-controllables etc...)\r\n+            activeBenefit={activeBenefit}\r\n+          />\r\n+        );\r\n+      })\r\n     : \"\";\r\n \r\n   const settings = {\r\n     className: \"slider variable-width\",\r\n"
                },
                {
                    "date": 1706692264594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import Select from \"../ui-elements/select\";\r\n+import PrestationFiche from \"./prestationFiche\";\r\n+import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n+import GoogleMap from \"google-map-react\";\r\n+import PrestationFicheMap from \"./prestationFicheMap\";\r\n+import { K_SIZE } from \"./markerStyle\";\r\n+import * as vars from \"../../vars\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import Slider from \"react-slick\";\r\n+\r\n+export default function ListePrestationFiche({\r\n+  service = {},\r\n+  benefits = [],\r\n+  filter,\r\n+  setFilter,\r\n+  greatPlaces,\r\n+  isPending,\r\n+  ...props\r\n+}) {\r\n+  let refSlider = useRef(null);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [state, setState] = useState({\r\n+    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  });\r\n+  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+\r\n+  useEffect(() => {\r\n+    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        filter.codePostal.latitude,\r\n+        filter.codePostal.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        activeBenefit.user.latitude,\r\n+        activeBenefit.user.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [activeBenefit]);\r\n+\r\n+  const rowRender = (row) => (\r\n+    <PrestationFiche\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n+      key={row.id}\r\n+      row={row}\r\n+    />\r\n+  );\r\n+\r\n+  const showData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée\r\n+        </h3>\r\n+      );\r\n+\r\n+    return benefits.map((row) => {\r\n+      return rowRender(row);\r\n+    });\r\n+  };\r\n+\r\n+  const _onChildClick = (key, childProps) => {\r\n+    let i = null;\r\n+    const benefit = benefits.length\r\n+      ? benefits.find((val, index) => {\r\n+          if (val.id === childProps.id) {\r\n+            i = index;\r\n+            return true;\r\n+          }\r\n+        })\r\n+      : { id: null };\r\n+    if (benefit.id) {\r\n+      setActiveBenefit(benefit);\r\n+      if (isTabletOrMobile) {\r\n+        refSlider.slickGoTo(i);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const getTitleService = () => {\r\n+    return `${service.name} : ${benefits.length} réparateur${\r\n+      benefits.length > 1 ? \"(s)\" : \"\"\r\n+    }`;\r\n+  };\r\n+\r\n+  const places = benefits.length\r\n+    ? benefits.map((row) => {\r\n+        return (\r\n+          <PrestationFicheMap\r\n+            key={row.id}\r\n+            lat={row.user.latitude}\r\n+            lng={row.user.longitude}\r\n+            text={\r\n+              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+            }\r\n+            id={row.id}\r\n+            // use your hover state (from store, react-controllables etc...)\r\n+            activeBenefit={activeBenefit}\r\n+          />\r\n+        );\r\n+      })\r\n+    : \"\";\r\n+\r\n+  const settings = {\r\n+    className: \"slider variable-width\",\r\n+    infinite: false,\r\n+    centerMode: true,\r\n+    slidesToShow: 2,\r\n+    slidesToScroll: 1,\r\n+    variableWidth: true,\r\n+    arrows: false,\r\n+    focusOnSelect: true,\r\n+    initialSlide: 1,\r\n+    responsive: [\r\n+      {\r\n+        breakpoint: 575,\r\n+        settings: {\r\n+          slidesToShow: 1,\r\n+          slidesToScroll: 1,\r\n+          initialSlide: 0,\r\n+        },\r\n+      },\r\n+    ],\r\n+  };\r\n+  return (\r\n+    <ListFichePrestation>\r\n+      <div className=\"head-list-content\">\r\n+        <h1 className=\"title-bloc-products\">\r\n+          {service ? getTitleService() : \"\"}\r\n+        </h1>\r\n+        <Select\r\n+          {...filter.sortBy}\r\n+          onChange={(e) => {\r\n+            const cpFilter = { ...filter };\r\n+            cpFilter.codePostal.error = false;\r\n+            cpFilter.sortBy.value = e.value;\r\n+            setFilter(cpFilter);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <Row className=\"bloc-lists-prstation-items\">\r\n+        <Col lg={5} className=\"content-lists-prstation-items\">\r\n+          {isDesktopOrLaptop && (\r\n+            <div className=\"lists-prstation-items\">{showData()}</div>\r\n+          )}\r\n+          {isTabletOrMobile && (\r\n+            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+              {showData()}\r\n+            </Slider>\r\n+          )}\r\n+        </Col>\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n+       \r\n+        </Col>\r\n+      </Row>\r\n+    </ListFichePrestation>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1706692377648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,204 +186,4 @@\n       </Row>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../ui-elements/select\";\r\n-import PrestationFiche from \"./prestationFiche\";\r\n-import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"./prestationFicheMap\";\r\n-import { K_SIZE } from \"./markerStyle\";\r\n-import * as vars from \"../../vars\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n-\r\n-export default function ListePrestationFiche({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-  let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n-  });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-\r\n-  useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n-\r\n-  useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n-\r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée\r\n-        </h3>\r\n-      );\r\n-\r\n-    return benefits.map((row) => {\r\n-      return rowRender(row);\r\n-    });\r\n-  };\r\n-\r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-          if (val.id === childProps.id) {\r\n-            i = index;\r\n-            return true;\r\n-          }\r\n-        })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n-      if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${\r\n-      benefits.length > 1 ? \"(s)\" : \"\"\r\n-    }`;\r\n-  };\r\n-\r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-        return (\r\n-          <PrestationFicheMap\r\n-            key={row.id}\r\n-            lat={row.user.latitude}\r\n-            lng={row.user.longitude}\r\n-            text={\r\n-              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-            }\r\n-            id={row.id}\r\n-            // use your hover state (from store, react-controllables etc...)\r\n-            activeBenefit={activeBenefit}\r\n-          />\r\n-        );\r\n-      })\r\n-    : \"\";\r\n-\r\n-  const settings = {\r\n-    className: \"slider variable-width\",\r\n-    infinite: false,\r\n-    centerMode: true,\r\n-    slidesToShow: 2,\r\n-    slidesToScroll: 1,\r\n-    variableWidth: true,\r\n-    arrows: false,\r\n-    focusOnSelect: true,\r\n-    initialSlide: 1,\r\n-    responsive: [\r\n-      {\r\n-        breakpoint: 575,\r\n-        settings: {\r\n-          slidesToShow: 1,\r\n-          slidesToScroll: 1,\r\n-          initialSlide: 0,\r\n-        },\r\n-      },\r\n-    ],\r\n-  };\r\n-  return (\r\n-    <ListFichePrestation>\r\n-      <div className=\"head-list-content\">\r\n-        <h1 className=\"title-bloc-products\">\r\n-          {service ? getTitleService() : \"\"}\r\n-        </h1>\r\n-        <Select\r\n-          {...filter.sortBy}\r\n-          onChange={(e) => {\r\n-            const cpFilter = { ...filter };\r\n-            cpFilter.codePostal.error = false;\r\n-            cpFilter.sortBy.value = e.value;\r\n-            setFilter(cpFilter);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <Row className=\"bloc-lists-prstation-items\">\r\n-        <Col lg={5} className=\"content-lists-prstation-items\">\r\n-          {isDesktopOrLaptop && (\r\n-            <div className=\"lists-prstation-items\">{showData()}</div>\r\n-          )}\r\n-          {isTabletOrMobile && (\r\n-            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-              {showData()}\r\n-            </Slider>\r\n-          )}\r\n-        </Col>\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-          <GoogleMap\r\n-            apiKey={vars.mapsApiKey}\r\n-            center={state.map.center}\r\n-            zoom={state.map.zoom}\r\n-            hoverDistance={K_SIZE / 2}\r\n-            onChildClick={_onChildClick}\r\n-            onGoogleApiLoaded={({ map, maps }) => {\r\n-              //console.log(\"map is loaded.\");\r\n-            }}\r\n-          >\r\n-            {places}\r\n-          </GoogleMap>\r\n-        </Col>\r\n-      </Row>\r\n-    </ListFichePrestation>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1706692499325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,20 @@\n             </Slider>\r\n           )}\r\n         </Col>\r\n         <Col lg={7} className=\"bloc-map-list\">\r\n-       \r\n+          <GoogleMap\r\n+            apiKey={vars.mapsApiKey}\r\n+            center={state.map.center}\r\n+            zoom={state.map.zoom}\r\n+            hoverDistance={K_SIZE / 2}\r\n+            onChildClick={_onChildClick}\r\n+            onGoogleApiLoaded={({ map, maps }) => {\r\n+              //console.log(\"map is loaded.\");\r\n+            }}\r\n+          >\r\n+            {places}\r\n+          </GoogleMap>\r\n         </Col>\r\n       </Row>\r\n     </ListFichePrestation>\r\n   );\r\n"
                },
                {
                    "date": 1706880053535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect, useRef } from \"react\";\r\n import Select from \"../ui-elements/select\";\r\n import PrestationFiche from \"./prestationFiche\";\r\n-import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { ListeFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n import { Col, Row } from \"react-bootstrap\";\r\n import GoogleMap from \"google-map-react\";\r\n import PrestationFicheMap from \"./prestationFicheMap\";\r\n import { K_SIZE } from \"./markerStyle\";\r\n"
                },
                {
                    "date": 1706880065515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React, { useState, useEffect, useRef } from \"react\";\r\n import Select from \"../ui-elements/select\";\r\n import PrestationFiche from \"./prestationFiche\";\r\n-import { ListeFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n import { Col, Row } from \"react-bootstrap\";\r\n import GoogleMap from \"google-map-react\";\r\n import PrestationFicheMap from \"./prestationFicheMap\";\r\n import { K_SIZE } from \"./markerStyle\";\r\n"
                },
                {
                    "date": 1711313429519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n             fontSize: \"22px\",\r\n             fontWeight: \"600\",\r\n           }}\r\n         >\r\n-          Aucune donnée\r\n+          Aucune donnée 6\r\n         </h3>\r\n       );\r\n \r\n     return benefits.map((row) => {\r\n"
                },
                {
                    "date": 1711313518166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-\r\n+    console.log(benefits);\r\n     return benefits.map((row) => {\r\n       return rowRender(row);\r\n     });\r\n   };\r\n"
                },
                {
                    "date": 1711313818961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-    console.log(benefits);\r\n+   \r\n     return benefits.map((row) => {\r\n       return rowRender(row);\r\n     });\r\n   };\r\n@@ -168,8 +168,9 @@\n             setFilter(cpFilter);\r\n           }}\r\n         />\r\n       </div>\r\n+      console.log('ListFichePrestation');\r\n       <Row className=\"bloc-lists-prstation-items\">\r\n         <Col lg={5} className=\"content-lists-prstation-items\">\r\n           {isDesktopOrLaptop && (\r\n             <div className=\"lists-prstation-items\">{showData()}</div>\r\n"
                },
                {
                    "date": 1711313934857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,8 @@\n             setFilter(cpFilter);\r\n           }}\r\n         />\r\n       </div>\r\n-      console.log('ListFichePrestation');\r\n       <Row className=\"bloc-lists-prstation-items\">\r\n         <Col lg={5} className=\"content-lists-prstation-items\">\r\n           {isDesktopOrLaptop && (\r\n             <div className=\"lists-prstation-items\">{showData()}</div>\r\n"
                },
                {
                    "date": 1711318170647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n   greatPlaces,\r\n   isPending,\r\n   ...props\r\n }) {\r\n+  console.log(\"Step1 listprestationfiche\");\r\n   let refSlider = useRef(null);\r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n"
                },
                {
                    "date": 1711318249862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   greatPlaces,\r\n   isPending,\r\n   ...props\r\n }) {\r\n-  console.log(\"Step1 listprestationfiche\");\r\n+\r\n   let refSlider = useRef(null);\r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n@@ -28,9 +28,9 @@\n   const [state, setState] = useState({\r\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-\r\n+  console.log(\"Step1 listprestationfiche2\");\r\n   useEffect(() => {\r\n     if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n       const cpState = { ...state };\r\n       cpState.map.center = [\r\n"
                },
                {
                    "date": 1711318343988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,17 +28,18 @@\n   const [state, setState] = useState({\r\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-  console.log(\"Step1 listprestationfiche2\");\r\n+ \r\n   useEffect(() => {\r\n     if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n       const cpState = { ...state };\r\n       cpState.map.center = [\r\n         filter.codePostal.latitude,\r\n         filter.codePostal.longitude,\r\n       ];\r\n       setState(cpState);\r\n+      console.log(\"Step1 filter.codePostal\");\r\n     }\r\n \r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n@@ -50,8 +51,9 @@\n         activeBenefit.user.latitude,\r\n         activeBenefit.user.longitude,\r\n       ];\r\n       setState(cpState);\r\n+      console.log(\"Step2 activeBenefit\");\r\n     }\r\n \r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [activeBenefit]);\r\n"
                },
                {
                    "date": 1711318433648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-   \r\n+      console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       return rowRender(row);\r\n     });\r\n   };\r\n"
                },
                {
                    "date": 1711318498049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n         </h3>\r\n       );\r\n       console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n+      return(<></>);\r\n       return rowRender(row);\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1711318790777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n         </h3>\r\n       );\r\n       console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n-      return(<></>);\r\n+     // return(<></>);\r\n       return rowRender(row);\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1711318860208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n+      activeBenefit=1\r\n       setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n"
                },
                {
                    "date": 1711318882486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-      activeBenefit=1\r\n+      activeBenefit={1}\r\n       setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n"
                },
                {
                    "date": 1711318916680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-      activeBenefit={1}\r\n-      setActiveBenefit={setActiveBenefit}\r\n+   //   activeBenefit={activeBenefit}\r\n+    //  setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n   );\r\n"
                },
                {
                    "date": 1711318938717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-   //   activeBenefit={activeBenefit}\r\n+      activeBenefit={activeBenefit}\r\n     //  setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n"
                },
                {
                    "date": 1711318954260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n+      activeBenefit={}\r\n     //  setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n"
                },
                {
                    "date": 1711318960213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-      activeBenefit={}\r\n+      activeBenefit={100}\r\n     //  setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n"
                },
                {
                    "date": 1711319979476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n   }, [activeBenefit]);\r\n \r\n   const rowRender = (row) => (\r\n     <PrestationFiche\r\n-      activeBenefit={100}\r\n-    //  setActiveBenefit={setActiveBenefit}\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n       key={row.id}\r\n       row={row}\r\n     />\r\n   );\r\n"
                },
                {
                    "date": 1711320058896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         filter.codePostal.latitude,\r\n         filter.codePostal.longitude,\r\n       ];\r\n       setState(cpState);\r\n-      console.log(\"Step1 filter.codePostal\");\r\n+      // // console.log(\"Step1 filter.codePostal\");\r\n     }\r\n \r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n@@ -51,9 +51,9 @@\n         activeBenefit.user.latitude,\r\n         activeBenefit.user.longitude,\r\n       ];\r\n       setState(cpState);\r\n-      console.log(\"Step2 activeBenefit\");\r\n+      // // console.log(\"Step2 activeBenefit\");\r\n     }\r\n \r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [activeBenefit]);\r\n@@ -86,9 +86,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-      console.log(\"Step3  benefits.map\");\r\n+      // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n      // return(<></>);\r\n       return rowRender(row);\r\n     });\r\n@@ -191,9 +191,9 @@\n             zoom={state.map.zoom}\r\n             hoverDistance={K_SIZE / 2}\r\n             onChildClick={_onChildClick}\r\n             onGoogleApiLoaded={({ map, maps }) => {\r\n-              //console.log(\"map is loaded.\");\r\n+              //// // console.log(\"map is loaded.\");\r\n             }}\r\n           >\r\n             {places}\r\n           </GoogleMap>\r\n"
                },
                {
                    "date": 1712144695117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { K_SIZE } from \"./markerStyle\";\r\n import * as vars from \"../../vars\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import Slider from \"react-slick\";\r\n-\r\n+import NewMap from \"../../components/front/newMap.js\";\r\n export default function ListePrestationFiche({\r\n   service = {},\r\n   benefits = [],\r\n   filter,\r\n"
                },
                {
                    "date": 1712144731394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,8 +197,12 @@\n           >\r\n             {places}\r\n           </GoogleMap>\r\n         </Col>\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n+          <NewMap position={tabArray} displayUniverseUsersIsReady={displayUniverseUsersIsReady}>\r\n+          </NewMap>\r\n+        </Col>\r\n       </Row>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1712144761780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n             {places}\r\n           </GoogleMap>\r\n         </Col>\r\n         <Col lg={7} className=\"bloc-map-list\">\r\n-          <NewMap position={tabArray} displayUniverseUsersIsReady={displayUniverseUsersIsReady}>\r\n+          <NewMap position= {places} displayUniverseUsersIsReady={displayUniverseUsersIsReady}>\r\n           </NewMap>\r\n         </Col>\r\n       </Row>\r\n     </ListFichePrestation>\r\n"
                },
                {
                    "date": 1712144780141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n             {places}\r\n           </GoogleMap>\r\n         </Col>\r\n         <Col lg={7} className=\"bloc-map-list\">\r\n-          <NewMap position= {places} displayUniverseUsersIsReady={displayUniverseUsersIsReady}>\r\n+          <NewMap position= {places} >\r\n           </NewMap>\r\n         </Col>\r\n       </Row>\r\n     </ListFichePrestation>\r\n"
                },
                {
                    "date": 1712146098524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n   const [state, setState] = useState({\r\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n- \r\n+  const [positions, setPositions] = useState([]);\r\n+  \r\n   useEffect(() => {\r\n     if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n       const cpState = { ...state };\r\n       cpState.map.center = [\r\n@@ -86,24 +87,24 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-      // // console.log(\"Step3  benefits.map\");\r\n+    // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n-     // return(<></>);\r\n+      // return(<></>);\r\n       return rowRender(row);\r\n     });\r\n   };\r\n \r\n   const _onChildClick = (key, childProps) => {\r\n     let i = null;\r\n     const benefit = benefits.length\r\n       ? benefits.find((val, index) => {\r\n-          if (val.id === childProps.id) {\r\n-            i = index;\r\n-            return true;\r\n-          }\r\n-        })\r\n+        if (val.id === childProps.id) {\r\n+          i = index;\r\n+          return true;\r\n+        }\r\n+      })\r\n       : { id: null };\r\n     if (benefit.id) {\r\n       setActiveBenefit(benefit);\r\n       if (isTabletOrMobile) {\r\n@@ -112,97 +113,114 @@\n     }\r\n   };\r\n \r\n   const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${\r\n-      benefits.length > 1 ? \"(s)\" : \"\"\r\n-    }`;\r\n+    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n+      }`;\r\n   };\r\n \r\n   const places = benefits.length\r\n     ? benefits.map((row) => {\r\n-        return (\r\n-          <PrestationFicheMap\r\n-            key={row.id}\r\n-            lat={row.user.latitude}\r\n-            lng={row.user.longitude}\r\n-            text={\r\n-              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-            }\r\n-            id={row.id}\r\n-            // use your hover state (from store, react-controllables etc...)\r\n-            activeBenefit={activeBenefit}\r\n-          />\r\n-        );\r\n-      })\r\n+      return (\r\n+        <PrestationFicheMap\r\n+          key={row.id}\r\n+          lat={row.user.latitude}\r\n+          lng={row.user.longitude}\r\n+          text={\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+          }\r\n+          id={row.id}\r\n+          // use your hover state (from store, react-controllables etc...)\r\n+          activeBenefit={activeBenefit}\r\n+        />\r\n+      );\r\n+    })\r\n     : \"\";\r\n \r\n-  const settings = {\r\n-    className: \"slider variable-width\",\r\n-    infinite: false,\r\n-    centerMode: true,\r\n-    slidesToShow: 2,\r\n-    slidesToScroll: 1,\r\n-    variableWidth: true,\r\n-    arrows: false,\r\n-    focusOnSelect: true,\r\n-    initialSlide: 1,\r\n-    responsive: [\r\n-      {\r\n-        breakpoint: 575,\r\n-        settings: {\r\n-          slidesToShow: 1,\r\n-          slidesToScroll: 1,\r\n-          initialSlide: 0,\r\n-        },\r\n+\r\n+\r\n+  const clustererPlaces = (benefits) => {\r\n+    let positions = [];\r\n+    let position=[];\r\n+    for (xi = 0; xi < benefits.length; xi++) {\r\n+      let row = benefits[xi]\r\n+      position['lat'] = row.user.latitude;\r\n+      position['lng'] = row.user.longitude;\r\n+      position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      position['id'] = row.id;\r\n+      positions.push(position);\r\n+    }\r\n+   setPositions (positions);\r\n+   \r\n+  }\r\n+\r\n+};\r\n+const settings = {\r\n+  className: \"slider variable-width\",\r\n+  infinite: false,\r\n+  centerMode: true,\r\n+  slidesToShow: 2,\r\n+  slidesToScroll: 1,\r\n+  variableWidth: true,\r\n+  arrows: false,\r\n+  focusOnSelect: true,\r\n+  initialSlide: 1,\r\n+  responsive: [\r\n+    {\r\n+      breakpoint: 575,\r\n+      settings: {\r\n+        slidesToShow: 1,\r\n+        slidesToScroll: 1,\r\n+        initialSlide: 0,\r\n       },\r\n-    ],\r\n-  };\r\n-  return (\r\n-    <ListFichePrestation>\r\n-      <div className=\"head-list-content\">\r\n-        <h1 className=\"title-bloc-products\">\r\n-          {service ? getTitleService() : \"\"}\r\n-        </h1>\r\n-        <Select\r\n-          {...filter.sortBy}\r\n-          onChange={(e) => {\r\n-            const cpFilter = { ...filter };\r\n-            cpFilter.codePostal.error = false;\r\n-            cpFilter.sortBy.value = e.value;\r\n-            setFilter(cpFilter);\r\n+    },\r\n+  ],\r\n+};\r\n+return (\r\n+  <ListFichePrestation>\r\n+    <div className=\"head-list-content\">\r\n+      <h1 className=\"title-bloc-products\">\r\n+        {service ? getTitleService() : \"\"}\r\n+      </h1>\r\n+      <Select\r\n+        {...filter.sortBy}\r\n+        onChange={(e) => {\r\n+          const cpFilter = { ...filter };\r\n+          cpFilter.codePostal.error = false;\r\n+          cpFilter.sortBy.value = e.value;\r\n+          setFilter(cpFilter);\r\n+        }}\r\n+      />\r\n+    </div>\r\n+    <Row className=\"bloc-lists-prstation-items\">\r\n+      <Col lg={5} className=\"content-lists-prstation-items\">\r\n+        {isDesktopOrLaptop && (\r\n+          <div className=\"lists-prstation-items\">{showData()}</div>\r\n+        )}\r\n+        {isTabletOrMobile && (\r\n+          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+            {showData()}\r\n+          </Slider>\r\n+        )}\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <GoogleMap\r\n+          apiKey={vars.mapsApiKey}\r\n+          center={state.map.center}\r\n+          zoom={state.map.zoom}\r\n+          hoverDistance={K_SIZE / 2}\r\n+          onChildClick={_onChildClick}\r\n+          onGoogleApiLoaded={({ map, maps }) => {\r\n+            //// // console.log(\"map is loaded.\");\r\n           }}\r\n-        />\r\n-      </div>\r\n-      <Row className=\"bloc-lists-prstation-items\">\r\n-        <Col lg={5} className=\"content-lists-prstation-items\">\r\n-          {isDesktopOrLaptop && (\r\n-            <div className=\"lists-prstation-items\">{showData()}</div>\r\n-          )}\r\n-          {isTabletOrMobile && (\r\n-            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-              {showData()}\r\n-            </Slider>\r\n-          )}\r\n-        </Col>\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-          <GoogleMap\r\n-            apiKey={vars.mapsApiKey}\r\n-            center={state.map.center}\r\n-            zoom={state.map.zoom}\r\n-            hoverDistance={K_SIZE / 2}\r\n-            onChildClick={_onChildClick}\r\n-            onGoogleApiLoaded={({ map, maps }) => {\r\n-              //// // console.log(\"map is loaded.\");\r\n-            }}\r\n-          >\r\n-            {places}\r\n-          </GoogleMap>\r\n-        </Col>\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-          <NewMap position= {places} >\r\n-          </NewMap>\r\n-        </Col>\r\n-      </Row>\r\n-    </ListFichePrestation>\r\n-  );\r\n+        >\r\n+          {places}\r\n+        </GoogleMap>\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <NewMap position={clustererPlaces} >\r\n+        </NewMap>\r\n+      </Col>\r\n+    </Row>\r\n+  </ListFichePrestation>\r\n+);\r\n }\r\n"
                },
                {
                    "date": 1712146131481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n    setPositions (positions);\r\n    \r\n   }\r\n \r\n-};\r\n+\r\n const settings = {\r\n   className: \"slider variable-width\",\r\n   infinite: false,\r\n   centerMode: true,\r\n"
                },
                {
                    "date": 1712146141731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n \r\n \r\n   const clustererPlaces = (benefits) => {\r\n     let positions = [];\r\n-    let position=[];\r\n+    let position=[]; let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n       let row = benefits[xi]\r\n       position['lat'] = row.user.latitude;\r\n       position['lng'] = row.user.longitude;\r\n"
                },
                {
                    "date": 1712146345516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n+    clustererPlaces(benefits);\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n@@ -139,9 +140,10 @@\n \r\n \r\n   const clustererPlaces = (benefits) => {\r\n     let positions = [];\r\n-    let position=[]; let xi = 0;\r\n+    let position=[];\r\n+    let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n       let row = benefits[xi]\r\n       position['lat'] = row.user.latitude;\r\n       position['lng'] = row.user.longitude;\r\n"
                },
                {
                    "date": 1712146402261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-    clustererPlaces(benefits);\r\n+    setPositions=clustererPlaces(benefits);\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n@@ -150,9 +150,9 @@\n       position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       position['id'] = row.id;\r\n       positions.push(position);\r\n     }\r\n-   setPositions (positions);\r\n+   return (positions);\r\n    \r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1712146408677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-    setPositions=clustererPlaces(benefits);\r\n+    setPositions(clustererPlaces(benefits));\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n"
                },
                {
                    "date": 1712146446902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-    setPositions(clustererPlaces(benefits));\r\n+    if (positions.length === 0) setPositions(clustererPlaces(benefits));\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n"
                },
                {
                    "date": 1712146583562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,13 @@\n         >\r\n           Aucune donnée 6\r\n         </h3>\r\n       );\r\n-    if (positions.length === 0) setPositions(clustererPlaces(benefits));\r\n+    if (positions.length === 0) {\r\n+      \r\n+      setPositions(clustererPlaces(benefits));\r\n+      console.log(\"LPF TU 1.01 positions is loaded\",positions)\r\n+    }\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n"
                },
                {
                    "date": 1712146685968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,10 @@\n       );\r\n     if (positions.length === 0) {\r\n       \r\n       setPositions(clustererPlaces(benefits));\r\n-      console.log(\"LPF TU 1.01 positions is loaded\",positions)\r\n+      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n+      console.log(\"LPF TU 1.01 benefits just loaded\",benefits)\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n"
                },
                {
                    "date": 1712146708990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     if (positions.length === 0) {\r\n       \r\n       setPositions(clustererPlaces(benefits));\r\n       console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n-      console.log(\"LPF TU 1.01 benefits just loaded\",benefits)\r\n+      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n"
                },
                {
                    "date": 1712146800420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n       <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap position={clustererPlaces} >\r\n+        <NewMap positions={positions} >\r\n         </NewMap>\r\n       </Col>\r\n     </Row>\r\n   </ListFichePrestation>\r\n"
                },
                {
                    "date": 1712146866709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,9 @@\n     let positions = [];\r\n     let position=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n+      console.log(\"LPF TU 1.03 one row \", row)\r\n       let row = benefits[xi]\r\n       position['lat'] = row.user.latitude;\r\n       position['lng'] = row.user.longitude;\r\n       position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n"
                },
                {
                    "date": 1712146897500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,10 +148,11 @@\n     let positions = [];\r\n     let position=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n-      console.log(\"LPF TU 1.03 one row \", row)\r\n-      let row = benefits[xi]\r\n+ \r\n+      let row = benefits[xi];\r\n+      console.log(\"LPF TU 1.03 one row \", row);\r\n       position['lat'] = row.user.latitude;\r\n       position['lng'] = row.user.longitude;\r\n       position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       position['id'] = row.id;\r\n"
                },
                {
                    "date": 1712146944613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,15 +150,16 @@\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n-      console.log(\"LPF TU 1.03 one row \", row);\r\n+   \r\n       position['lat'] = row.user.latitude;\r\n       position['lng'] = row.user.longitude;\r\n       position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       position['id'] = row.id;\r\n       positions.push(position);\r\n     }\r\n+    console.log(\"LPF TU 1.03 positions \", positions);\r\n    return (positions);\r\n    \r\n   }\r\n \r\n"
                },
                {
                    "date": 1712147121857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         </h3>\r\n       );\r\n     if (positions.length === 0) {\r\n       \r\n-      setPositions(clustererPlaces(benefits));\r\n+      positions=clustererPlaces(benefits);\r\n       console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n"
                },
                {
                    "date": 1712147183578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n     : \"\";\r\n \r\n \r\n \r\n-  const clustererPlaces = (benefits) => {\r\n+  function clustererPlaces (benefits) {\r\n     let positions = [];\r\n     let position=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n"
                },
                {
                    "date": 1712147249109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         </h3>\r\n       );\r\n     if (positions.length === 0) {\r\n       \r\n-      positions=clustererPlaces(benefits);\r\n+      setPositions(clustererPlaces(benefits));\r\n       console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n"
                },
                {
                    "date": 1712147376728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import Select from \"../ui-elements/select\";\r\n+import PrestationFiche from \"./prestationFiche\";\r\n+import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n+import GoogleMap from \"google-map-react\";\r\n+import PrestationFicheMap from \"./prestationFicheMap\";\r\n+import { K_SIZE } from \"./markerStyle\";\r\n+import * as vars from \"../../vars\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import Slider from \"react-slick\";\r\n+import NewMap from \"../../components/front/newMap.js\";\r\n+export default function ListePrestationFiche({\r\n+  service = {},\r\n+  benefits = [],\r\n+  filter,\r\n+  setFilter,\r\n+  greatPlaces,\r\n+  isPending,\r\n+  ...props\r\n+}) {\r\n+\r\n+  let refSlider = useRef(null);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [state, setState] = useState({\r\n+    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  });\r\n+  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+  const [positions, setPositions] = useState([]);\r\n+  \r\n+  useEffect(() => {\r\n+    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        filter.codePostal.latitude,\r\n+        filter.codePostal.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step1 filter.codePostal\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        activeBenefit.user.latitude,\r\n+        activeBenefit.user.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step2 activeBenefit\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [activeBenefit]);\r\n+\r\n+  const rowRender = (row) => (\r\n+    <PrestationFiche\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n+      key={row.id}\r\n+      row={row}\r\n+    />\r\n+  );\r\n+\r\n+  const showData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée 6\r\n+        </h3>\r\n+      );\r\n+    if (positions.length === 0) {\r\n+      \r\n+     \r\n+      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n+      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n+    }\r\n+    // // console.log(\"Step3  benefits.map\");\r\n+    return benefits.map((row) => {\r\n+      // return(<></>);\r\n+      return rowRender(row);\r\n+    });\r\n+  };\r\n+\r\n+  const _onChildClick = (key, childProps) => {\r\n+    let i = null;\r\n+    const benefit = benefits.length\r\n+      ? benefits.find((val, index) => {\r\n+        if (val.id === childProps.id) {\r\n+          i = index;\r\n+          return true;\r\n+        }\r\n+      })\r\n+      : { id: null };\r\n+    if (benefit.id) {\r\n+      setActiveBenefit(benefit);\r\n+      if (isTabletOrMobile) {\r\n+        refSlider.slickGoTo(i);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const getTitleService = () => {\r\n+    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n+      }`;\r\n+  };\r\n+\r\n+  const places = benefits.length\r\n+    ? benefits.map((row) => {\r\n+      return (\r\n+        <PrestationFicheMap\r\n+          key={row.id}\r\n+          lat={row.user.latitude}\r\n+          lng={row.user.longitude}\r\n+          text={\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+          }\r\n+          id={row.id}\r\n+          // use your hover state (from store, react-controllables etc...)\r\n+          activeBenefit={activeBenefit}\r\n+        />\r\n+      );\r\n+    })\r\n+    : \"\";\r\n+\r\n+\r\n+\r\n+  function clustererPlaces (benefits) {\r\n+    let positions = [];\r\n+    let position=[];\r\n+    let xi = 0;\r\n+    for (xi = 0; xi < benefits.length; xi++) {\r\n+ \r\n+      let row = benefits[xi];\r\n+   \r\n+      position['lat'] = row.user.latitude;\r\n+      position['lng'] = row.user.longitude;\r\n+      position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      position['id'] = row.id;\r\n+      positions.push(position);\r\n+    }\r\n+    console.log(\"LPF TU 1.03 positions \", positions);\r\n+    setPositions(positions);\r\n+   return (true);\r\n+   \r\n+  }\r\n+\r\n+\r\n+const settings = {\r\n+  className: \"slider variable-width\",\r\n+  infinite: false,\r\n+  centerMode: true,\r\n+  slidesToShow: 2,\r\n+  slidesToScroll: 1,\r\n+  variableWidth: true,\r\n+  arrows: false,\r\n+  focusOnSelect: true,\r\n+  initialSlide: 1,\r\n+  responsive: [\r\n+    {\r\n+      breakpoint: 575,\r\n+      settings: {\r\n+        slidesToShow: 1,\r\n+        slidesToScroll: 1,\r\n+        initialSlide: 0,\r\n+      },\r\n+    },\r\n+  ],\r\n+};\r\n+return (\r\n+  <ListFichePrestation>\r\n+    <div className=\"head-list-content\">\r\n+      <h1 className=\"title-bloc-products\">\r\n+        {service ? getTitleService() : \"\"}\r\n+      </h1>\r\n+      <Select\r\n+        {...filter.sortBy}\r\n+        onChange={(e) => {\r\n+          const cpFilter = { ...filter };\r\n+          cpFilter.codePostal.error = false;\r\n+          cpFilter.sortBy.value = e.value;\r\n+          setFilter(cpFilter);\r\n+        }}\r\n+      />\r\n+    </div>\r\n+    <Row className=\"bloc-lists-prstation-items\">\r\n+      <Col lg={5} className=\"content-lists-prstation-items\">\r\n+        {isDesktopOrLaptop && (\r\n+          <div className=\"lists-prstation-items\">{showData()}</div>\r\n+        )}\r\n+        {isTabletOrMobile && (\r\n+          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+            {showData()}\r\n+          </Slider>\r\n+        )}\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <GoogleMap\r\n+          apiKey={vars.mapsApiKey}\r\n+          center={state.map.center}\r\n+          zoom={state.map.zoom}\r\n+          hoverDistance={K_SIZE / 2}\r\n+          onChildClick={_onChildClick}\r\n+          onGoogleApiLoaded={({ map, maps }) => {\r\n+            //// // console.log(\"map is loaded.\");\r\n+          }}\r\n+        >\r\n+          {places}\r\n+        </GoogleMap>\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <NewMap positions={positions} >\r\n+        </NewMap>\r\n+      </Col>\r\n+    </Row>\r\n+  </ListFichePrestation>\r\n+);\r\n+}\r\n"
                },
                {
                    "date": 1712147416036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,237 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import Select from \"../ui-elements/select\";\r\n+import PrestationFiche from \"./prestationFiche\";\r\n+import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n+import GoogleMap from \"google-map-react\";\r\n+import PrestationFicheMap from \"./prestationFicheMap\";\r\n+import { K_SIZE } from \"./markerStyle\";\r\n+import * as vars from \"../../vars\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import Slider from \"react-slick\";\r\n+import NewMap from \"../../components/front/newMap.js\";\r\n+export default function ListePrestationFiche({\r\n+  service = {},\r\n+  benefits = [],\r\n+  filter,\r\n+  setFilter,\r\n+  greatPlaces,\r\n+  isPending,\r\n+  ...props\r\n+}) {\r\n+\r\n+  let refSlider = useRef(null);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [state, setState] = useState({\r\n+    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  });\r\n+  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+  const [positions, setPositions] = useState([]);\r\n+  \r\n+  useEffect(() => {\r\n+    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        filter.codePostal.latitude,\r\n+        filter.codePostal.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step1 filter.codePostal\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        activeBenefit.user.latitude,\r\n+        activeBenefit.user.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step2 activeBenefit\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [activeBenefit]);\r\n+\r\n+  const rowRender = (row) => (\r\n+    <PrestationFiche\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n+      key={row.id}\r\n+      row={row}\r\n+    />\r\n+  );\r\n+\r\n+  const showData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée 6\r\n+        </h3>\r\n+      );\r\n+    if (positions.length === 0) {\r\n+      \r\n+     \r\n+      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n+      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n+    }\r\n+    // // console.log(\"Step3  benefits.map\");\r\n+    return benefits.map((row) => {\r\n+      // return(<></>);\r\n+      return rowRender(row);\r\n+    });\r\n+  };\r\n+\r\n+  const _onChildClick = (key, childProps) => {\r\n+    let i = null;\r\n+    const benefit = benefits.length\r\n+      ? benefits.find((val, index) => {\r\n+        if (val.id === childProps.id) {\r\n+          i = index;\r\n+          return true;\r\n+        }\r\n+      })\r\n+      : { id: null };\r\n+    if (benefit.id) {\r\n+      setActiveBenefit(benefit);\r\n+      if (isTabletOrMobile) {\r\n+        refSlider.slickGoTo(i);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const getTitleService = () => {\r\n+    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n+      }`;\r\n+  };\r\n+\r\n+  const places = benefits.length\r\n+    ? benefits.map((row) => {\r\n+      return (\r\n+        <PrestationFicheMap\r\n+          key={row.id}\r\n+          lat={row.user.latitude}\r\n+          lng={row.user.longitude}\r\n+          text={\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+          }\r\n+          id={row.id}\r\n+          // use your hover state (from store, react-controllables etc...)\r\n+          activeBenefit={activeBenefit}\r\n+        />\r\n+      );\r\n+    })\r\n+    : \"\";\r\n+\r\n+\r\n+\r\n+  function clustererPlaces (benefits) {\r\n+    let xpositions = [];\r\n+    let xposition=[];\r\n+    let xi = 0;\r\n+    for (xi = 0; xi < benefits.length; xi++) {\r\n+ \r\n+      let row = benefits[xi];\r\n+   \r\n+      position['lat'] = row.user.latitude;\r\n+      position['lng'] = row.user.longitude;\r\n+      position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      position['id'] = row.id;\r\n+      positions.push(xposition);\r\n+    }\r\n+    console.log(\"LPF TU 1.03 positions \", xpositions);\r\n+    setPositions(xpositions);\r\n+   return (true);\r\n+   \r\n+  }\r\n+\r\n+\r\n+const settings = {\r\n+  className: \"slider variable-width\",\r\n+  infinite: false,\r\n+  centerMode: true,\r\n+  slidesToShow: 2,\r\n+  slidesToScroll: 1,\r\n+  variableWidth: true,\r\n+  arrows: false,\r\n+  focusOnSelect: true,\r\n+  initialSlide: 1,\r\n+  responsive: [\r\n+    {\r\n+      breakpoint: 575,\r\n+      settings: {\r\n+        slidesToShow: 1,\r\n+        slidesToScroll: 1,\r\n+        initialSlide: 0,\r\n+      },\r\n+    },\r\n+  ],\r\n+};\r\n+return (\r\n+  <ListFichePrestation>\r\n+    <div className=\"head-list-content\">\r\n+      <h1 className=\"title-bloc-products\">\r\n+        {service ? getTitleService() : \"\"}\r\n+      </h1>\r\n+      <Select\r\n+        {...filter.sortBy}\r\n+        onChange={(e) => {\r\n+          const cpFilter = { ...filter };\r\n+          cpFilter.codePostal.error = false;\r\n+          cpFilter.sortBy.value = e.value;\r\n+          setFilter(cpFilter);\r\n+        }}\r\n+      />\r\n+    </div>\r\n+    <Row className=\"bloc-lists-prstation-items\">\r\n+      <Col lg={5} className=\"content-lists-prstation-items\">\r\n+        {isDesktopOrLaptop && (\r\n+          <div className=\"lists-prstation-items\">{showData()}</div>\r\n+        )}\r\n+        {isTabletOrMobile && (\r\n+          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+            {showData()}\r\n+          </Slider>\r\n+        )}\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <GoogleMap\r\n+          apiKey={vars.mapsApiKey}\r\n+          center={state.map.center}\r\n+          zoom={state.map.zoom}\r\n+          hoverDistance={K_SIZE / 2}\r\n+          onChildClick={_onChildClick}\r\n+          onGoogleApiLoaded={({ map, maps }) => {\r\n+            //// // console.log(\"map is loaded.\");\r\n+          }}\r\n+        >\r\n+          {places}\r\n+        </GoogleMap>\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <NewMap positions={positions} >\r\n+        </NewMap>\r\n+      </Col>\r\n+    </Row>\r\n+  </ListFichePrestation>\r\n+);\r\n+}\r\n"
                },
                {
                    "date": 1712147433107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,12 +151,12 @@\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n    \r\n-      position['lat'] = row.user.latitude;\r\n-      position['lng'] = row.user.longitude;\r\n-      position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      position['id'] = row.id;\r\n+      xposition['lat'] = row.user.latitude;\r\n+      xposition['lng'] = row.user.longitude;\r\n+      xposition['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      xposition['id'] = row.id;\r\n       positions.push(xposition);\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xpositions);\r\n     setPositions(xpositions);\r\n@@ -234,477 +234,4 @@\n     </Row>\r\n   </ListFichePrestation>\r\n );\r\n }\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../ui-elements/select\";\r\n-import PrestationFiche from \"./prestationFiche\";\r\n-import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"./prestationFicheMap\";\r\n-import { K_SIZE } from \"./markerStyle\";\r\n-import * as vars from \"../../vars\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n-import NewMap from \"../../components/front/newMap.js\";\r\n-export default function ListePrestationFiche({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-\r\n-  let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n-  });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-  const [positions, setPositions] = useState([]);\r\n-  \r\n-  useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step1 filter.codePostal\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n-\r\n-  useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step2 activeBenefit\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n-\r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée 6\r\n-        </h3>\r\n-      );\r\n-    if (positions.length === 0) {\r\n-      \r\n-     \r\n-      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n-      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n-    }\r\n-    // // console.log(\"Step3  benefits.map\");\r\n-    return benefits.map((row) => {\r\n-      // return(<></>);\r\n-      return rowRender(row);\r\n-    });\r\n-  };\r\n-\r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-        if (val.id === childProps.id) {\r\n-          i = index;\r\n-          return true;\r\n-        }\r\n-      })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n-      if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n-      }`;\r\n-  };\r\n-\r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-      return (\r\n-        <PrestationFicheMap\r\n-          key={row.id}\r\n-          lat={row.user.latitude}\r\n-          lng={row.user.longitude}\r\n-          text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-          }\r\n-          id={row.id}\r\n-          // use your hover state (from store, react-controllables etc...)\r\n-          activeBenefit={activeBenefit}\r\n-        />\r\n-      );\r\n-    })\r\n-    : \"\";\r\n-\r\n-\r\n-\r\n-  function clustererPlaces (benefits) {\r\n-    let positions = [];\r\n-    let position=[];\r\n-    let xi = 0;\r\n-    for (xi = 0; xi < benefits.length; xi++) {\r\n- \r\n-      let row = benefits[xi];\r\n-   \r\n-      position['lat'] = row.user.latitude;\r\n-      position['lng'] = row.user.longitude;\r\n-      position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      position['id'] = row.id;\r\n-      positions.push(position);\r\n-    }\r\n-    console.log(\"LPF TU 1.03 positions \", positions);\r\n-    setPositions(positions);\r\n-   return (true);\r\n-   \r\n-  }\r\n-\r\n-\r\n-const settings = {\r\n-  className: \"slider variable-width\",\r\n-  infinite: false,\r\n-  centerMode: true,\r\n-  slidesToShow: 2,\r\n-  slidesToScroll: 1,\r\n-  variableWidth: true,\r\n-  arrows: false,\r\n-  focusOnSelect: true,\r\n-  initialSlide: 1,\r\n-  responsive: [\r\n-    {\r\n-      breakpoint: 575,\r\n-      settings: {\r\n-        slidesToShow: 1,\r\n-        slidesToScroll: 1,\r\n-        initialSlide: 0,\r\n-      },\r\n-    },\r\n-  ],\r\n-};\r\n-return (\r\n-  <ListFichePrestation>\r\n-    <div className=\"head-list-content\">\r\n-      <h1 className=\"title-bloc-products\">\r\n-        {service ? getTitleService() : \"\"}\r\n-      </h1>\r\n-      <Select\r\n-        {...filter.sortBy}\r\n-        onChange={(e) => {\r\n-          const cpFilter = { ...filter };\r\n-          cpFilter.codePostal.error = false;\r\n-          cpFilter.sortBy.value = e.value;\r\n-          setFilter(cpFilter);\r\n-        }}\r\n-      />\r\n-    </div>\r\n-    <Row className=\"bloc-lists-prstation-items\">\r\n-      <Col lg={5} className=\"content-lists-prstation-items\">\r\n-        {isDesktopOrLaptop && (\r\n-          <div className=\"lists-prstation-items\">{showData()}</div>\r\n-        )}\r\n-        {isTabletOrMobile && (\r\n-          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-            {showData()}\r\n-          </Slider>\r\n-        )}\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <GoogleMap\r\n-          apiKey={vars.mapsApiKey}\r\n-          center={state.map.center}\r\n-          zoom={state.map.zoom}\r\n-          hoverDistance={K_SIZE / 2}\r\n-          onChildClick={_onChildClick}\r\n-          onGoogleApiLoaded={({ map, maps }) => {\r\n-            //// // console.log(\"map is loaded.\");\r\n-          }}\r\n-        >\r\n-          {places}\r\n-        </GoogleMap>\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap positions={positions} >\r\n-        </NewMap>\r\n-      </Col>\r\n-    </Row>\r\n-  </ListFichePrestation>\r\n-);\r\n-}\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../ui-elements/select\";\r\n-import PrestationFiche from \"./prestationFiche\";\r\n-import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"./prestationFicheMap\";\r\n-import { K_SIZE } from \"./markerStyle\";\r\n-import * as vars from \"../../vars\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n-import NewMap from \"../../components/front/newMap.js\";\r\n-export default function ListePrestationFiche({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-\r\n-  let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n-  });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-  const [positions, setPositions] = useState([]);\r\n-  \r\n-  useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step1 filter.codePostal\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n-\r\n-  useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step2 activeBenefit\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n-\r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée 6\r\n-        </h3>\r\n-      );\r\n-    if (positions.length === 0) {\r\n-      \r\n-      setPositions(clustererPlaces(benefits));\r\n-      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n-      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n-    }\r\n-    // // console.log(\"Step3  benefits.map\");\r\n-    return benefits.map((row) => {\r\n-      // return(<></>);\r\n-      return rowRender(row);\r\n-    });\r\n-  };\r\n-\r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-        if (val.id === childProps.id) {\r\n-          i = index;\r\n-          return true;\r\n-        }\r\n-      })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n-      if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n-      }`;\r\n-  };\r\n-\r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-      return (\r\n-        <PrestationFicheMap\r\n-          key={row.id}\r\n-          lat={row.user.latitude}\r\n-          lng={row.user.longitude}\r\n-          text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-          }\r\n-          id={row.id}\r\n-          // use your hover state (from store, react-controllables etc...)\r\n-          activeBenefit={activeBenefit}\r\n-        />\r\n-      );\r\n-    })\r\n-    : \"\";\r\n-\r\n-\r\n-\r\n-  function clustererPlaces (benefits) {\r\n-    let positions = [];\r\n-    let position=[];\r\n-    let xi = 0;\r\n-    for (xi = 0; xi < benefits.length; xi++) {\r\n- \r\n-      let row = benefits[xi];\r\n-   \r\n-      position['lat'] = row.user.latitude;\r\n-      position['lng'] = row.user.longitude;\r\n-      position['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      position['id'] = row.id;\r\n-      positions.push(position);\r\n-    }\r\n-    console.log(\"LPF TU 1.03 positions \", positions);\r\n-   return (positions);\r\n-   \r\n-  }\r\n-\r\n-\r\n-const settings = {\r\n-  className: \"slider variable-width\",\r\n-  infinite: false,\r\n-  centerMode: true,\r\n-  slidesToShow: 2,\r\n-  slidesToScroll: 1,\r\n-  variableWidth: true,\r\n-  arrows: false,\r\n-  focusOnSelect: true,\r\n-  initialSlide: 1,\r\n-  responsive: [\r\n-    {\r\n-      breakpoint: 575,\r\n-      settings: {\r\n-        slidesToShow: 1,\r\n-        slidesToScroll: 1,\r\n-        initialSlide: 0,\r\n-      },\r\n-    },\r\n-  ],\r\n-};\r\n-return (\r\n-  <ListFichePrestation>\r\n-    <div className=\"head-list-content\">\r\n-      <h1 className=\"title-bloc-products\">\r\n-        {service ? getTitleService() : \"\"}\r\n-      </h1>\r\n-      <Select\r\n-        {...filter.sortBy}\r\n-        onChange={(e) => {\r\n-          const cpFilter = { ...filter };\r\n-          cpFilter.codePostal.error = false;\r\n-          cpFilter.sortBy.value = e.value;\r\n-          setFilter(cpFilter);\r\n-        }}\r\n-      />\r\n-    </div>\r\n-    <Row className=\"bloc-lists-prstation-items\">\r\n-      <Col lg={5} className=\"content-lists-prstation-items\">\r\n-        {isDesktopOrLaptop && (\r\n-          <div className=\"lists-prstation-items\">{showData()}</div>\r\n-        )}\r\n-        {isTabletOrMobile && (\r\n-          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-            {showData()}\r\n-          </Slider>\r\n-        )}\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <GoogleMap\r\n-          apiKey={vars.mapsApiKey}\r\n-          center={state.map.center}\r\n-          zoom={state.map.zoom}\r\n-          hoverDistance={K_SIZE / 2}\r\n-          onChildClick={_onChildClick}\r\n-          onGoogleApiLoaded={({ map, maps }) => {\r\n-            //// // console.log(\"map is loaded.\");\r\n-          }}\r\n-        >\r\n-          {places}\r\n-        </GoogleMap>\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap positions={positions} >\r\n-        </NewMap>\r\n-      </Col>\r\n-    </Row>\r\n-  </ListFichePrestation>\r\n-);\r\n-}\r\n"
                },
                {
                    "date": 1712147500116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n         </h3>\r\n       );\r\n     if (positions.length === 0) {\r\n       \r\n-     \r\n+      clustererPlaces(benefits);\r\n       console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n"
                },
                {
                    "date": 1712147604730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,11 @@\n \r\n \r\n \r\n   function clustererPlaces (benefits) {\r\n+    if (positions.length === 0) {\r\n+\r\n+    \r\n     let xpositions = [];\r\n     let xposition=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n@@ -159,11 +162,11 @@\n       positions.push(xposition);\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xpositions);\r\n     setPositions(xpositions);\r\n-   return (true);\r\n-   \r\n+\r\n   }\r\n+  }\r\n \r\n \r\n const settings = {\r\n   className: \"slider variable-width\",\r\n"
                },
                {
                    "date": 1712147785697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n   const [positions, setPositions] = useState([]);\r\n+  const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n   \r\n   useEffect(() => {\r\n     if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n       const cpState = { ...state };\r\n@@ -144,9 +145,9 @@\n \r\n \r\n \r\n   function clustererPlaces (benefits) {\r\n-    if (positions.length === 0) {\r\n+    if ( ! isPositionsSet ) {\r\n \r\n     \r\n     let xpositions = [];\r\n     let xposition=[];\r\n@@ -162,8 +163,9 @@\n       positions.push(xposition);\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xpositions);\r\n     setPositions(xpositions);\r\n+    setIsPositionsSet(true);\r\n \r\n   }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1712148163192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,12 +155,12 @@\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n    \r\n-      xposition['lat'] = row.user.latitude;\r\n-      xposition['lng'] = row.user.longitude;\r\n-      xposition['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      xposition['id'] = row.id;\r\n+      xposition['position']['lat'] = row.user.latitude;\r\n+      xposition['position']['lng'] = row.user.longitude;\r\n+      xposition['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      xposition['position']['id'] = row.id;\r\n       positions.push(xposition);\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xpositions);\r\n     setPositions(xpositions);\r\n"
                },
                {
                    "date": 1712148456433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n-   \r\n+      xposition['position']=[];\r\n       xposition['position']['lat'] = row.user.latitude;\r\n       xposition['position']['lng'] = row.user.longitude;\r\n       xposition['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       xposition['position']['id'] = row.id;\r\n"
                },
                {
                    "date": 1712148891571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n       xposition['position']['lat'] = row.user.latitude;\r\n       xposition['position']['lng'] = row.user.longitude;\r\n       xposition['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       xposition['position']['id'] = row.id;\r\n-      positions.push(xposition);\r\n+    \r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xpositions);\r\n     setPositions(xpositions);\r\n     setIsPositionsSet(true);\r\n"
                },
                {
                    "date": 1712149089544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,23 +148,23 @@\n   function clustererPlaces (benefits) {\r\n     if ( ! isPositionsSet ) {\r\n \r\n     \r\n-    let xpositions = [];\r\n-    let xposition=[];\r\n+    let oneXRow = [];\r\n+    let rows=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n-      xposition['position']=[];\r\n-      xposition['position']['lat'] = row.user.latitude;\r\n-      xposition['position']['lng'] = row.user.longitude;\r\n-      xposition['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      xposition['position']['id'] = row.id;\r\n-    \r\n+      oneXRow['position']=[];\r\n+      oneXRow['position']['lat'] = row.user.latitude;\r\n+      oneXRow['position']['lng'] = row.user.longitude;\r\n+      oneXRow['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      oneXRow['position']['id'] = row.id;\r\n+      rows.push(oneXRow)\r\n     }\r\n-    console.log(\"LPF TU 1.03 positions \", xpositions);\r\n-    setPositions(xpositions);\r\n+    console.log(\"LPF TU 1.03 positions \", rows);\r\n+    setPositions(rows);\r\n     setIsPositionsSet(true);\r\n \r\n   }\r\n   }\r\n"
                },
                {
                    "date": 1712149165442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n     if ( ! isPositionsSet ) {\r\n \r\n     \r\n     let oneXRow = [];\r\n-    let rows=[];\r\n+    let xrows=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n@@ -159,12 +159,12 @@\n       oneXRow['position']['lat'] = row.user.latitude;\r\n       oneXRow['position']['lng'] = row.user.longitude;\r\n       oneXRow['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       oneXRow['position']['id'] = row.id;\r\n-      rows.push(oneXRow)\r\n+      xrows.push(oneXRow)\r\n     }\r\n-    console.log(\"LPF TU 1.03 positions \", rows);\r\n-    setPositions(rows);\r\n+    console.log(\"LPF TU 1.03 positions \", xrows);\r\n+    setPositions(xrows);\r\n     setIsPositionsSet(true);\r\n \r\n   }\r\n   }\r\n"
                },
                {
                    "date": 1712149374768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n       <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap positions={positions} >\r\n+        <NewMap positions={positions.positions} >\r\n         </NewMap>\r\n       </Col>\r\n     </Row>\r\n   </ListFichePrestation>\r\n"
                },
                {
                    "date": 1712149478074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,13 +154,12 @@\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n-      oneXRow['position']=[];\r\n-      oneXRow['position']['lat'] = row.user.latitude;\r\n-      oneXRow['position']['lng'] = row.user.longitude;\r\n-      oneXRow['position']['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      oneXRow['position']['id'] = row.id;\r\n+      oneXRow ['lat'] = row.user.latitude;\r\n+      oneXRow ['lng'] = row.user.longitude;\r\n+      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xrows);\r\n     setPositions(xrows);\r\n@@ -232,9 +231,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n       <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap positions={positions.positions} >\r\n+        <NewMap positions={positions} >\r\n         </NewMap>\r\n       </Col>\r\n     </Row>\r\n   </ListFichePrestation>\r\n"
                },
                {
                    "date": 1712150093826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,9 @@\n     if ( ! isPositionsSet ) {\r\n \r\n     \r\n     let oneXRow = [];\r\n+    let xObj = Object;\r\n     let xrows=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n@@ -161,9 +162,10 @@\n       oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xrows);\r\n-    setPositions(xrows);\r\n+    xObj.position =xrows;\r\n+    setPositions(xObj);\r\n     setIsPositionsSet(true);\r\n \r\n   }\r\n   }\r\n"
                },
                {
                    "date": 1712150316561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n       <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap positions={positions} >\r\n+        <NewMap position={positions} >\r\n         </NewMap>\r\n       </Col>\r\n     </Row>\r\n   </ListFichePrestation>\r\n"
                },
                {
                    "date": 1712150509159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n       xrows.push(oneXRow)\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xrows);\r\n     xObj.position =xrows;\r\n-    setPositions(xObj);\r\n+    setPositions(xrows);\r\n     setIsPositionsSet(true);\r\n \r\n   }\r\n   }\r\n"
                },
                {
                    "date": 1712150719021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,22 +149,26 @@\n     if ( ! isPositionsSet ) {\r\n \r\n     \r\n     let oneXRow = [];\r\n-    let xObj = Object;\r\n+  \r\n     let xrows=[];\r\n     let xi = 0;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n+      console.log(\"LPF TU 1.03 positions \", row);\r\n+      oneXRow['label']= 'labek';\r\n+      oneXRow['postalcode']= 'labek';\r\n+      oneXRow['city_code']= 'labek';\r\n       oneXRow ['lat'] = row.user.latitude;\r\n       oneXRow ['lng'] = row.user.longitude;\r\n       oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n     console.log(\"LPF TU 1.03 positions \", xrows);\r\n-    xObj.position =xrows;\r\n+  \r\n     setPositions(xrows);\r\n     setIsPositionsSet(true);\r\n \r\n   }\r\n"
                },
                {
                    "date": 1712150849887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,11 +156,11 @@\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       let row = benefits[xi];\r\n       console.log(\"LPF TU 1.03 positions \", row);\r\n-      oneXRow['label']= 'labek';\r\n-      oneXRow['postalcode']= 'labek';\r\n-      oneXRow['city_code']= 'labek';\r\n+      oneXRow['label']=  row.user.enterprise;\r\n+      oneXRow['postalcode']=row.user.postalCode;\r\n+      oneXRow['city_code']= row.user.city;\r\n       oneXRow ['lat'] = row.user.latitude;\r\n       oneXRow ['lng'] = row.user.longitude;\r\n       oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       oneXRow ['id'] = row.id;\r\n"
                },
                {
                    "date": 1712151026245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import * as vars from \"../../vars\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import Slider from \"react-slick\";\r\n import NewMap from \"../../components/front/newMap.js\";\r\n+import { object } from \"prop-types\";\r\n export default function ListePrestationFiche({\r\n   service = {},\r\n   benefits = [],\r\n   filter,\r\n@@ -152,11 +153,12 @@\n     let oneXRow = [];\r\n   \r\n     let xrows=[];\r\n     let xi = 0;\r\n+    let row= object;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n-      let row = benefits[xi];\r\n+      row = benefits[xi];\r\n       console.log(\"LPF TU 1.03 positions \", row);\r\n       oneXRow['label']=  row.user.enterprise;\r\n       oneXRow['postalcode']=row.user.postalCode;\r\n       oneXRow['city_code']= row.user.city;\r\n"
                },
                {
                    "date": 1712151179302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,249 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import Select from \"../ui-elements/select\";\r\n+import PrestationFiche from \"./prestationFiche\";\r\n+import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n+import GoogleMap from \"google-map-react\";\r\n+import PrestationFicheMap from \"./prestationFicheMap\";\r\n+import { K_SIZE } from \"./markerStyle\";\r\n+import * as vars from \"../../vars\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import Slider from \"react-slick\";\r\n+import NewMap from \"../../components/front/newMap.js\";\r\n+import { object } from \"prop-types\";\r\n+export default function ListePrestationFiche({\r\n+  service = {},\r\n+  benefits = [],\r\n+  filter,\r\n+  setFilter,\r\n+  greatPlaces,\r\n+  isPending,\r\n+  ...props\r\n+}) {\r\n+\r\n+  let refSlider = useRef(null);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [state, setState] = useState({\r\n+    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  });\r\n+  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+  const [positions, setPositions] = useState([]);\r\n+  const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n+  \r\n+  useEffect(() => {\r\n+    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        filter.codePostal.latitude,\r\n+        filter.codePostal.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step1 filter.codePostal\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        activeBenefit.user.latitude,\r\n+        activeBenefit.user.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step2 activeBenefit\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [activeBenefit]);\r\n+\r\n+  const rowRender = (row) => (\r\n+    <PrestationFiche\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n+      key={row.id}\r\n+      row={row}\r\n+    />\r\n+  );\r\n+\r\n+  const showData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée 6\r\n+        </h3>\r\n+      );\r\n+    if (positions.length === 0) {\r\n+      \r\n+      clustererPlaces(benefits);\r\n+      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n+      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n+    }\r\n+    // // console.log(\"Step3  benefits.map\");\r\n+    return benefits.map((row) => {\r\n+      // return(<></>);\r\n+      return rowRender(row);\r\n+    });\r\n+  };\r\n+\r\n+  const _onChildClick = (key, childProps) => {\r\n+    let i = null;\r\n+    const benefit = benefits.length\r\n+      ? benefits.find((val, index) => {\r\n+        if (val.id === childProps.id) {\r\n+          i = index;\r\n+          return true;\r\n+        }\r\n+      })\r\n+      : { id: null };\r\n+    if (benefit.id) {\r\n+      setActiveBenefit(benefit);\r\n+      if (isTabletOrMobile) {\r\n+        refSlider.slickGoTo(i);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const getTitleService = () => {\r\n+    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n+      }`;\r\n+  };\r\n+\r\n+  const places = benefits.length\r\n+    ? benefits.map((row) => {\r\n+      return (\r\n+        <PrestationFicheMap\r\n+          key={row.id}\r\n+          lat={row.user.latitude}\r\n+          lng={row.user.longitude}\r\n+          text={\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+          }\r\n+          id={row.id}\r\n+          // use your hover state (from store, react-controllables etc...)\r\n+          activeBenefit={activeBenefit}\r\n+        />\r\n+      );\r\n+    })\r\n+    : \"\";\r\n+\r\n+\r\n+\r\n+  function clustererPlaces (benefits) {\r\n+    if ( ! isPositionsSet ) {\r\n+\r\n+    \r\n+    let oneXRow = [];\r\n+  \r\n+    let xrows=[];\r\n+    let xi = 0;\r\n+    let row= object;\r\n+    for (xi = 0; xi < benefits.length; xi++) {\r\n+ \r\n+      row = benefits[xi];\r\n+      console.log(\"LPF TU 1.023 positions \", row);\r\n+      oneXRow['label']=  row.user.enterprise;\r\n+      oneXRow['postalcode']=row.user.postalCode;\r\n+      oneXRow['city_code']= row.user.city;\r\n+      oneXRow ['lat'] = row.user.latitude;\r\n+      oneXRow ['lng'] = row.user.longitude;\r\n+      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      oneXRow ['id'] = row.id;\r\n+      xrows.push(oneXRow)\r\n+    }\r\n+    console.log(\"LPF TU 1.03 positions \", xrows);\r\n+  \r\n+    setPositions(xrows);\r\n+    setIsPositionsSet(true);\r\n+\r\n+  }\r\n+  }\r\n+\r\n+\r\n+const settings = {\r\n+  className: \"slider variable-width\",\r\n+  infinite: false,\r\n+  centerMode: true,\r\n+  slidesToShow: 2,\r\n+  slidesToScroll: 1,\r\n+  variableWidth: true,\r\n+  arrows: false,\r\n+  focusOnSelect: true,\r\n+  initialSlide: 1,\r\n+  responsive: [\r\n+    {\r\n+      breakpoint: 575,\r\n+      settings: {\r\n+        slidesToShow: 1,\r\n+        slidesToScroll: 1,\r\n+        initialSlide: 0,\r\n+      },\r\n+    },\r\n+  ],\r\n+};\r\n+return (\r\n+  <ListFichePrestation>\r\n+    <div className=\"head-list-content\">\r\n+      <h1 className=\"title-bloc-products\">\r\n+        {service ? getTitleService() : \"\"}\r\n+      </h1>\r\n+      <Select\r\n+        {...filter.sortBy}\r\n+        onChange={(e) => {\r\n+          const cpFilter = { ...filter };\r\n+          cpFilter.codePostal.error = false;\r\n+          cpFilter.sortBy.value = e.value;\r\n+          setFilter(cpFilter);\r\n+        }}\r\n+      />\r\n+    </div>\r\n+    <Row className=\"bloc-lists-prstation-items\">\r\n+      <Col lg={5} className=\"content-lists-prstation-items\">\r\n+        {isDesktopOrLaptop && (\r\n+          <div className=\"lists-prstation-items\">{showData()}</div>\r\n+        )}\r\n+        {isTabletOrMobile && (\r\n+          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+            {showData()}\r\n+          </Slider>\r\n+        )}\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <GoogleMap\r\n+          apiKey={vars.mapsApiKey}\r\n+          center={state.map.center}\r\n+          zoom={state.map.zoom}\r\n+          hoverDistance={K_SIZE / 2}\r\n+          onChildClick={_onChildClick}\r\n+          onGoogleApiLoaded={({ map, maps }) => {\r\n+            //// // console.log(\"map is loaded.\");\r\n+          }}\r\n+        >\r\n+          {places}\r\n+        </GoogleMap>\r\n+      </Col>\r\n+      <Col lg={7} className=\"bloc-map-list\">\r\n+        <NewMap position={positions} >\r\n+        </NewMap>\r\n+      </Col>\r\n+    </Row>\r\n+  </ListFichePrestation>\r\n+);\r\n+}\r\n"
                },
                {
                    "date": 1712151322334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n     let row= object;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n  \r\n       row = benefits[xi];\r\n-      console.log(\"LPF TU 1.023 positions \", row);\r\n+      console.log(\"LPF TU 1.031 positions \", row);\r\n       oneXRow['label']=  row.user.enterprise;\r\n       oneXRow['postalcode']=row.user.postalCode;\r\n       oneXRow['city_code']= row.user.city;\r\n       oneXRow ['lat'] = row.user.latitude;\r\n@@ -167,9 +167,9 @@\n       oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n-    console.log(\"LPF TU 1.03 positions \", xrows);\r\n+    console.log(\"LPF TU 1.032 positions \", xrows);\r\n   \r\n     setPositions(xrows);\r\n     setIsPositionsSet(true);\r\n \r\n@@ -246,253 +246,4 @@\n     </Row>\r\n   </ListFichePrestation>\r\n );\r\n }\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../ui-elements/select\";\r\n-import PrestationFiche from \"./prestationFiche\";\r\n-import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"./prestationFicheMap\";\r\n-import { K_SIZE } from \"./markerStyle\";\r\n-import * as vars from \"../../vars\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n-import NewMap from \"../../components/front/newMap.js\";\r\n-import { object } from \"prop-types\";\r\n-export default function ListePrestationFiche({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-\r\n-  let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n-  });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-  const [positions, setPositions] = useState([]);\r\n-  const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n-  \r\n-  useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step1 filter.codePostal\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n-\r\n-  useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step2 activeBenefit\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n-\r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée 6\r\n-        </h3>\r\n-      );\r\n-    if (positions.length === 0) {\r\n-      \r\n-      clustererPlaces(benefits);\r\n-      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n-      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n-    }\r\n-    // // console.log(\"Step3  benefits.map\");\r\n-    return benefits.map((row) => {\r\n-      // return(<></>);\r\n-      return rowRender(row);\r\n-    });\r\n-  };\r\n-\r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-        if (val.id === childProps.id) {\r\n-          i = index;\r\n-          return true;\r\n-        }\r\n-      })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n-      if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n-      }`;\r\n-  };\r\n-\r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-      return (\r\n-        <PrestationFicheMap\r\n-          key={row.id}\r\n-          lat={row.user.latitude}\r\n-          lng={row.user.longitude}\r\n-          text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-          }\r\n-          id={row.id}\r\n-          // use your hover state (from store, react-controllables etc...)\r\n-          activeBenefit={activeBenefit}\r\n-        />\r\n-      );\r\n-    })\r\n-    : \"\";\r\n-\r\n-\r\n-\r\n-  function clustererPlaces (benefits) {\r\n-    if ( ! isPositionsSet ) {\r\n-\r\n-    \r\n-    let oneXRow = [];\r\n-  \r\n-    let xrows=[];\r\n-    let xi = 0;\r\n-    let row= object;\r\n-    for (xi = 0; xi < benefits.length; xi++) {\r\n- \r\n-      row = benefits[xi];\r\n-      console.log(\"LPF TU 1.03 positions \", row);\r\n-      oneXRow['label']=  row.user.enterprise;\r\n-      oneXRow['postalcode']=row.user.postalCode;\r\n-      oneXRow['city_code']= row.user.city;\r\n-      oneXRow ['lat'] = row.user.latitude;\r\n-      oneXRow ['lng'] = row.user.longitude;\r\n-      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      oneXRow ['id'] = row.id;\r\n-      xrows.push(oneXRow)\r\n-    }\r\n-    console.log(\"LPF TU 1.03 positions \", xrows);\r\n-  \r\n-    setPositions(xrows);\r\n-    setIsPositionsSet(true);\r\n-\r\n-  }\r\n-  }\r\n-\r\n-\r\n-const settings = {\r\n-  className: \"slider variable-width\",\r\n-  infinite: false,\r\n-  centerMode: true,\r\n-  slidesToShow: 2,\r\n-  slidesToScroll: 1,\r\n-  variableWidth: true,\r\n-  arrows: false,\r\n-  focusOnSelect: true,\r\n-  initialSlide: 1,\r\n-  responsive: [\r\n-    {\r\n-      breakpoint: 575,\r\n-      settings: {\r\n-        slidesToShow: 1,\r\n-        slidesToScroll: 1,\r\n-        initialSlide: 0,\r\n-      },\r\n-    },\r\n-  ],\r\n-};\r\n-return (\r\n-  <ListFichePrestation>\r\n-    <div className=\"head-list-content\">\r\n-      <h1 className=\"title-bloc-products\">\r\n-        {service ? getTitleService() : \"\"}\r\n-      </h1>\r\n-      <Select\r\n-        {...filter.sortBy}\r\n-        onChange={(e) => {\r\n-          const cpFilter = { ...filter };\r\n-          cpFilter.codePostal.error = false;\r\n-          cpFilter.sortBy.value = e.value;\r\n-          setFilter(cpFilter);\r\n-        }}\r\n-      />\r\n-    </div>\r\n-    <Row className=\"bloc-lists-prstation-items\">\r\n-      <Col lg={5} className=\"content-lists-prstation-items\">\r\n-        {isDesktopOrLaptop && (\r\n-          <div className=\"lists-prstation-items\">{showData()}</div>\r\n-        )}\r\n-        {isTabletOrMobile && (\r\n-          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-            {showData()}\r\n-          </Slider>\r\n-        )}\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <GoogleMap\r\n-          apiKey={vars.mapsApiKey}\r\n-          center={state.map.center}\r\n-          zoom={state.map.zoom}\r\n-          hoverDistance={K_SIZE / 2}\r\n-          onChildClick={_onChildClick}\r\n-          onGoogleApiLoaded={({ map, maps }) => {\r\n-            //// // console.log(\"map is loaded.\");\r\n-          }}\r\n-        >\r\n-          {places}\r\n-        </GoogleMap>\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap position={positions} >\r\n-        </NewMap>\r\n-      </Col>\r\n-    </Row>\r\n-  </ListFichePrestation>\r\n-);\r\n-}\r\n"
                },
                {
                    "date": 1712151449512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,15 +149,15 @@\n   function clustererPlaces (benefits) {\r\n     if ( ! isPositionsSet ) {\r\n \r\n     \r\n-    let oneXRow = [];\r\n+    \r\n   \r\n     let xrows=[];\r\n     let xi = 0;\r\n     let row= object;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n- \r\n+      let oneXRow = [];\r\n       row = benefits[xi];\r\n       console.log(\"LPF TU 1.031 positions \", row);\r\n       oneXRow['label']=  row.user.enterprise;\r\n       oneXRow['postalcode']=row.user.postalCode;\r\n"
                },
                {
                    "date": 1712151827592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n     if ( ! isPositionsSet ) {\r\n \r\n     \r\n     \r\n-  \r\n+   \r\n     let xrows=[];\r\n     let xi = 0;\r\n     let row= object;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n"
                },
                {
                    "date": 1712152001272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,12 +238,14 @@\n         >\r\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n+     \r\n+        { false && ( <Col lg={7} className=\"bloc-map-list\">\r\n         <NewMap position={positions} >\r\n         </NewMap>\r\n-      </Col>\r\n+      </Col>)}\r\n+       \r\n     </Row>\r\n   </ListFichePrestation>\r\n );\r\n }\r\n"
                },
                {
                    "date": 1712152011379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n      \r\n-        { false && ( <Col lg={7} className=\"bloc-map-list\">\r\n+        { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n         <NewMap position={positions} >\r\n         </NewMap>\r\n       </Col>)}\r\n        \r\n"
                },
                {
                    "date": 1712152020460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n      \r\n-        { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n+        { false && ( <Col lg={7} className=\"bloc-map-list\">\r\n         <NewMap position={positions} >\r\n         </NewMap>\r\n       </Col>)}\r\n        \r\n"
                },
                {
                    "date": 1714784007224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n     let row= object;\r\n     for (xi = 0; xi < benefits.length; xi++) {\r\n       let oneXRow = [];\r\n       row = benefits[xi];\r\n-      console.log(\"LPF TU 1.031 positions \", row);\r\n+      //console.log(\"LPF TU 1.031 positions \", row);\r\n       oneXRow['label']=  row.user.enterprise;\r\n       oneXRow['postalcode']=row.user.postalCode;\r\n       oneXRow['city_code']= row.user.city;\r\n       oneXRow ['lat'] = row.user.latitude;\r\n"
                },
                {
                    "date": 1714784045627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,10 @@\n       );\r\n     if (positions.length === 0) {\r\n       \r\n       clustererPlaces(benefits);\r\n-      console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n-      console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n+      //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n+      //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n@@ -167,9 +167,9 @@\n       oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n-    console.log(\"LPF TU 1.032 positions \", xrows);\r\n+    //console.log(\"LPF TU 1.032 positions \", xrows);\r\n   \r\n     setPositions(xrows);\r\n     setIsPositionsSet(true);\r\n \r\n"
                },
                {
                    "date": 1714993676390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n           key={row.id}\r\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n           }\r\n           id={row.id}\r\n           // use your hover state (from store, react-controllables etc...)\r\n           activeBenefit={activeBenefit}\r\n@@ -163,9 +163,9 @@\n       oneXRow['postalcode']=row.user.postalCode;\r\n       oneXRow['city_code']= row.user.city;\r\n       oneXRow ['lat'] = row.user.latitude;\r\n       oneXRow ['lng'] = row.user.longitude;\r\n-      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisb\";\r\n       oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n     //console.log(\"LPF TU 1.032 positions \", xrows);\r\n"
                },
                {
                    "date": 1714993812418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n       oneXRow['postalcode']=row.user.postalCode;\r\n       oneXRow['city_code']= row.user.city;\r\n       oneXRow ['lat'] = row.user.latitude;\r\n       oneXRow ['lng'] = row.user.longitude;\r\n-      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisb\";\r\n+      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n       oneXRow ['id'] = row.id;\r\n       xrows.push(oneXRow)\r\n     }\r\n     //console.log(\"LPF TU 1.032 positions \", xrows);\r\n"
                },
                {
                    "date": 1714994100938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,9 @@\n     ? benefits.map((row) => {\r\n       return (\r\n         <PrestationFicheMap\r\n           key={row.id}\r\n+          postalCode={row.user.postalCode}\r\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n"
                },
                {
                    "date": 1714994258743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,9 @@\n       return (\r\n         <PrestationFicheMap\r\n           key={row.id}\r\n           postalCode={row.user.postalCode}\r\n+          city={row.user.city}\r\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n"
                },
                {
                    "date": 1714994443479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,9 @@\n       return (\r\n         <PrestationFicheMap\r\n           key={row.id}\r\n           postalCode={row.user.postalCode}\r\n+          enterprise={row.user.enterprise}\r\n           city={row.user.city}\r\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           text={\r\n"
                },
                {
                    "date": 1714994734979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n      \r\n-        { false && ( <Col lg={7} className=\"bloc-map-list\">\r\n+        { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n         <NewMap position={positions} >\r\n         </NewMap>\r\n       </Col>)}\r\n        \r\n"
                },
                {
                    "date": 1714994966933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n             fontSize: \"22px\",\r\n             fontWeight: \"600\",\r\n           }}\r\n         >\r\n-          Aucune donnée 6\r\n+          Aucune donnée \r\n         </h3>\r\n       );\r\n     if (positions.length === 0) {\r\n       \r\n@@ -242,9 +242,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n      \r\n-        { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n+        { false && ( <Col lg={7} className=\"bloc-map-list\">\r\n         <NewMap position={positions} >\r\n         </NewMap>\r\n       </Col>)}\r\n        \r\n"
                },
                {
                    "date": 1714995084775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n           {places}\r\n         </GoogleMap>\r\n       </Col>\r\n      \r\n-        { false && ( <Col lg={7} className=\"bloc-map-list\">\r\n+        { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n         <NewMap position={positions} >\r\n         </NewMap>\r\n       </Col>)}\r\n        \r\n"
                },
                {
                    "date": 1714995994309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,12 +243,13 @@\n         </GoogleMap>\r\n       </Col>\r\n      \r\n         { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n-        <NewMap position={positions} >\r\n-        </NewMap>\r\n+       \r\n       </Col>)}\r\n        \r\n     </Row>\r\n+    <NewMap position={positions} >\r\n+        </NewMap>\r\n   </ListFichePrestation>\r\n );\r\n }\r\n"
                },
                {
                    "date": 1714996294417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,10 @@\n        \r\n       </Col>)}\r\n        \r\n     </Row>\r\n-    <NewMap position={positions} >\r\n+    <NewMap position={positions}\r\n+           isDiscoverArtRoute ={false} >\r\n         </NewMap>\r\n   </ListFichePrestation>\r\n );\r\n }\r\n"
                },
                {
                    "date": 1714996538962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n   const [positions, setPositions] = useState([]);\r\n   const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n-  \r\n+\r\n   useEffect(() => {\r\n     if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n       const cpState = { ...state };\r\n       cpState.map.center = [\r\n@@ -86,13 +86,13 @@\n             fontSize: \"22px\",\r\n             fontWeight: \"600\",\r\n           }}\r\n         >\r\n-          Aucune donnée \r\n+          Aucune donnée\r\n         </h3>\r\n       );\r\n     if (positions.length === 0) {\r\n-      \r\n+\r\n       clustererPlaces(benefits);\r\n       //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n@@ -148,109 +148,110 @@\n     : \"\";\r\n \r\n \r\n \r\n-  function clustererPlaces (benefits) {\r\n-    if ( ! isPositionsSet ) {\r\n+  function clustererPlaces(benefits) {\r\n+    if (!isPositionsSet) {\r\n \r\n-    \r\n-    \r\n-   \r\n-    let xrows=[];\r\n-    let xi = 0;\r\n-    let row= object;\r\n-    for (xi = 0; xi < benefits.length; xi++) {\r\n-      let oneXRow = [];\r\n-      row = benefits[xi];\r\n-      //console.log(\"LPF TU 1.031 positions \", row);\r\n-      oneXRow['label']=  row.user.enterprise;\r\n-      oneXRow['postalcode']=row.user.postalCode;\r\n-      oneXRow['city_code']= row.user.city;\r\n-      oneXRow ['lat'] = row.user.latitude;\r\n-      oneXRow ['lng'] = row.user.longitude;\r\n-      oneXRow ['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-      oneXRow ['id'] = row.id;\r\n-      xrows.push(oneXRow)\r\n+\r\n+\r\n+\r\n+      let xrows = [];\r\n+      let xi = 0;\r\n+      let row = object;\r\n+      for (xi = 0; xi < benefits.length; xi++) {\r\n+        let oneXRow = [];\r\n+        row = benefits[xi];\r\n+        //console.log(\"LPF TU 1.031 positions \", row);\r\n+        oneXRow['label'] = row.user.enterprise;\r\n+        oneXRow['postalcode'] = row.user.postalCode;\r\n+        oneXRow['city_code'] = row.user.city;\r\n+        oneXRow['lat'] = row.user.latitude;\r\n+        oneXRow['lng'] = row.user.longitude;\r\n+        oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+        oneXRow['id'] = row.id;\r\n+        xrows.push(oneXRow)\r\n+      }\r\n+      //console.log(\"LPF TU 1.032 positions \", xrows);\r\n+\r\n+      setPositions(xrows);\r\n+      setIsPositionsSet(true);\r\n+\r\n     }\r\n-    //console.log(\"LPF TU 1.032 positions \", xrows);\r\n-  \r\n-    setPositions(xrows);\r\n-    setIsPositionsSet(true);\r\n-\r\n   }\r\n-  }\r\n \r\n \r\n-const settings = {\r\n-  className: \"slider variable-width\",\r\n-  infinite: false,\r\n-  centerMode: true,\r\n-  slidesToShow: 2,\r\n-  slidesToScroll: 1,\r\n-  variableWidth: true,\r\n-  arrows: false,\r\n-  focusOnSelect: true,\r\n-  initialSlide: 1,\r\n-  responsive: [\r\n-    {\r\n-      breakpoint: 575,\r\n-      settings: {\r\n-        slidesToShow: 1,\r\n-        slidesToScroll: 1,\r\n-        initialSlide: 0,\r\n+  const settings = {\r\n+    className: \"slider variable-width\",\r\n+    infinite: false,\r\n+    centerMode: true,\r\n+    slidesToShow: 2,\r\n+    slidesToScroll: 1,\r\n+    variableWidth: true,\r\n+    arrows: false,\r\n+    focusOnSelect: true,\r\n+    initialSlide: 1,\r\n+    responsive: [\r\n+      {\r\n+        breakpoint: 575,\r\n+        settings: {\r\n+          slidesToShow: 1,\r\n+          slidesToScroll: 1,\r\n+          initialSlide: 0,\r\n+        },\r\n       },\r\n-    },\r\n-  ],\r\n-};\r\n-return (\r\n-  <ListFichePrestation>\r\n-    <div className=\"head-list-content\">\r\n-      <h1 className=\"title-bloc-products\">\r\n-        {service ? getTitleService() : \"\"}\r\n-      </h1>\r\n-      <Select\r\n-        {...filter.sortBy}\r\n-        onChange={(e) => {\r\n-          const cpFilter = { ...filter };\r\n-          cpFilter.codePostal.error = false;\r\n-          cpFilter.sortBy.value = e.value;\r\n-          setFilter(cpFilter);\r\n-        }}\r\n-      />\r\n-    </div>\r\n-    <Row className=\"bloc-lists-prstation-items\">\r\n-      <Col lg={5} className=\"content-lists-prstation-items\">\r\n-        {isDesktopOrLaptop && (\r\n-          <div className=\"lists-prstation-items\">{showData()}</div>\r\n-        )}\r\n-        {isTabletOrMobile && (\r\n-          <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-            {showData()}\r\n-          </Slider>\r\n-        )}\r\n-      </Col>\r\n-      <Col lg={7} className=\"bloc-map-list\">\r\n-        <GoogleMap\r\n-          apiKey={vars.mapsApiKey}\r\n-          center={state.map.center}\r\n-          zoom={state.map.zoom}\r\n-          hoverDistance={K_SIZE / 2}\r\n-          onChildClick={_onChildClick}\r\n-          onGoogleApiLoaded={({ map, maps }) => {\r\n-            //// // console.log(\"map is loaded.\");\r\n+    ],\r\n+  };\r\n+  return (\r\n+    <ListFichePrestation>\r\n+      <div className=\"head-list-content\">\r\n+        <h1 className=\"title-bloc-products\">\r\n+          {service ? getTitleService() : \"\"}\r\n+        </h1>\r\n+        <Select\r\n+          {...filter.sortBy}\r\n+          onChange={(e) => {\r\n+            const cpFilter = { ...filter };\r\n+            cpFilter.codePostal.error = false;\r\n+            cpFilter.sortBy.value = e.value;\r\n+            setFilter(cpFilter);\r\n           }}\r\n-        >\r\n-          {places}\r\n-        </GoogleMap>\r\n-      </Col>\r\n-     \r\n-        { true && ( <Col lg={7} className=\"bloc-map-list\">\r\n-       \r\n-      </Col>)}\r\n-       \r\n-    </Row>\r\n-    <NewMap position={positions}\r\n-           isDiscoverArtRoute ={false} >\r\n-        </NewMap>\r\n-  </ListFichePrestation>\r\n-);\r\n+        />\r\n+      </div>\r\n+      <Row className=\"bloc-lists-prstation-items\">\r\n+        <Col lg={5} className=\"content-lists-prstation-items\">\r\n+          {isDesktopOrLaptop && (\r\n+            <div className=\"lists-prstation-items\">{showData()}</div>\r\n+          )}\r\n+          {isTabletOrMobile && (\r\n+            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+              {showData()}\r\n+            </Slider>\r\n+          )}\r\n+        </Col>\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n+          <GoogleMap\r\n+            apiKey={vars.mapsApiKey}\r\n+            center={state.map.center}\r\n+            zoom={state.map.zoom}\r\n+            hoverDistance={K_SIZE / 2}\r\n+            onChildClick={_onChildClick}\r\n+            onGoogleApiLoaded={({ map, maps }) => {\r\n+              //// // console.log(\"map is loaded.\");\r\n+            }}\r\n+          >\r\n+            {places}\r\n+          </GoogleMap>\r\n+        </Col>\r\n+\r\n+        {true && (<Col lg={7} className=\"bloc-map-list\">\r\n+\r\n+        </Col>)}\r\n+\r\n+      </Row>\r\n+      <NewMap\r\n+        position={positions}\r\n+        isDiscoverArtRoute={false} >\r\n+      </NewMap>\r\n+    </ListFichePrestation>\r\n+  );\r\n }\r\n"
                },
                {
                    "date": 1714996933066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n \r\n       </Row>\r\n       <NewMap\r\n         position={positions}\r\n-        isDiscoverArtRoute={false} >\r\n+        isDiscoverArtRoute={true} >\r\n       </NewMap>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1714997047804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,257 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import Select from \"../ui-elements/select\";\r\n+import PrestationFiche from \"./prestationFiche\";\r\n+import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n+import GoogleMap from \"google-map-react\";\r\n+import PrestationFicheMap from \"./prestationFicheMap\";\r\n+import { K_SIZE } from \"./markerStyle\";\r\n+import * as vars from \"../../vars\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import Slider from \"react-slick\";\r\n+import NewMap from \"../../components/front/newMap.js\";\r\n+import { object } from \"prop-types\";\r\n+export default function ListePrestationFiche({\r\n+  service = {},\r\n+  benefits = [],\r\n+  filter,\r\n+  setFilter,\r\n+  greatPlaces,\r\n+  isPending,\r\n+  ...props\r\n+}) {\r\n+\r\n+  let refSlider = useRef(null);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [state, setState] = useState({\r\n+    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  });\r\n+  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+  const [positions, setPositions] = useState([]);\r\n+  const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        filter.codePostal.latitude,\r\n+        filter.codePostal.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step1 filter.codePostal\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        activeBenefit.user.latitude,\r\n+        activeBenefit.user.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+      // // console.log(\"Step2 activeBenefit\");\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [activeBenefit]);\r\n+\r\n+  const rowRender = (row) => (\r\n+    <PrestationFiche\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n+      key={row.id}\r\n+      row={row}\r\n+    />\r\n+  );\r\n+\r\n+  const showData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée\r\n+        </h3>\r\n+      );\r\n+    if (positions.length === 0) {\r\n+\r\n+      clustererPlaces(benefits);\r\n+      //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n+      //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n+    }\r\n+    // // console.log(\"Step3  benefits.map\");\r\n+    return benefits.map((row) => {\r\n+      // return(<></>);\r\n+      return rowRender(row);\r\n+    });\r\n+  };\r\n+\r\n+  const _onChildClick = (key, childProps) => {\r\n+    let i = null;\r\n+    const benefit = benefits.length\r\n+      ? benefits.find((val, index) => {\r\n+        if (val.id === childProps.id) {\r\n+          i = index;\r\n+          return true;\r\n+        }\r\n+      })\r\n+      : { id: null };\r\n+    if (benefit.id) {\r\n+      setActiveBenefit(benefit);\r\n+      if (isTabletOrMobile) {\r\n+        refSlider.slickGoTo(i);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const getTitleService = () => {\r\n+    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n+      }`;\r\n+  };\r\n+\r\n+  const places = benefits.length\r\n+    ? benefits.map((row) => {\r\n+      return (\r\n+        <PrestationFicheMap\r\n+          key={row.id}\r\n+          postalCode={row.user.postalCode}\r\n+          enterprise={row.user.enterprise}\r\n+          city={row.user.city}\r\n+          lat={row.user.latitude}\r\n+          lng={row.user.longitude}\r\n+          text={\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n+          }\r\n+          id={row.id}\r\n+          // use your hover state (from store, react-controllables etc...)\r\n+          activeBenefit={activeBenefit}\r\n+        />\r\n+      );\r\n+    })\r\n+    : \"\";\r\n+\r\n+\r\n+\r\n+  function clustererPlaces(benefits) {\r\n+    if (!isPositionsSet) {\r\n+\r\n+\r\n+\r\n+\r\n+      let xrows = [];\r\n+      let xi = 0;\r\n+      let row = object;\r\n+      for (xi = 0; xi < benefits.length; xi++) {\r\n+        let oneXRow = [];\r\n+        row = benefits[xi];\r\n+        //console.log(\"LPF TU 1.031 positions \", row);\r\n+        oneXRow['label'] = row.user.enterprise;\r\n+        oneXRow['postalcode'] = row.user.postalCode;\r\n+        oneXRow['city_code'] = row.user.city;\r\n+        oneXRow['lat'] = row.user.latitude;\r\n+        oneXRow['lng'] = row.user.longitude;\r\n+        oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n+        oneXRow['id'] = row.id;\r\n+        xrows.push(oneXRow)\r\n+      }\r\n+      //console.log(\"LPF TU 1.032 positions \", xrows);\r\n+\r\n+      setPositions(xrows);\r\n+      setIsPositionsSet(true);\r\n+\r\n+    }\r\n+  }\r\n+\r\n+\r\n+  const settings = {\r\n+    className: \"slider variable-width\",\r\n+    infinite: false,\r\n+    centerMode: true,\r\n+    slidesToShow: 2,\r\n+    slidesToScroll: 1,\r\n+    variableWidth: true,\r\n+    arrows: false,\r\n+    focusOnSelect: true,\r\n+    initialSlide: 1,\r\n+    responsive: [\r\n+      {\r\n+        breakpoint: 575,\r\n+        settings: {\r\n+          slidesToShow: 1,\r\n+          slidesToScroll: 1,\r\n+          initialSlide: 0,\r\n+        },\r\n+      },\r\n+    ],\r\n+  };\r\n+  return (\r\n+    <ListFichePrestation>\r\n+      <div className=\"head-list-content\">\r\n+        <h1 className=\"title-bloc-products\">\r\n+          {service ? getTitleService() : \"\"}\r\n+        </h1>\r\n+        <Select\r\n+          {...filter.sortBy}\r\n+          onChange={(e) => {\r\n+            const cpFilter = { ...filter };\r\n+            cpFilter.codePostal.error = false;\r\n+            cpFilter.sortBy.value = e.value;\r\n+            setFilter(cpFilter);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <Row className=\"bloc-lists-prstation-items\">\r\n+        <Col lg={5} className=\"content-lists-prstation-items\">\r\n+          {isDesktopOrLaptop && (\r\n+            <div className=\"lists-prstation-items\">{showData()}</div>\r\n+          )}\r\n+          {isTabletOrMobile && (\r\n+            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+              {showData()}\r\n+            </Slider>\r\n+          )}\r\n+        </Col>\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n+          <GoogleMap\r\n+            apiKey={vars.mapsApiKey}\r\n+            center={state.map.center}\r\n+            zoom={state.map.zoom}\r\n+            hoverDistance={K_SIZE / 2}\r\n+            onChildClick={_onChildClick}\r\n+            onGoogleApiLoaded={({ map, maps }) => {\r\n+              //// // console.log(\"map is loaded.\");\r\n+            }}\r\n+          >\r\n+            {places}\r\n+          </GoogleMap>\r\n+        </Col>\r\n+\r\n+        {true && (<Col lg={7} className=\"bloc-map-list\">\r\n+\r\n+        </Col>)}\r\n+\r\n+      </Row>\r\n+      <NewMap\r\n+        position={positions}\r\n+        isDiscoverArtRoute={\"Y\"} >\r\n+      </NewMap>\r\n+    </ListFichePrestation>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1714997276271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,266 +249,9 @@\n \r\n       </Row>\r\n       <NewMap\r\n         position={positions}\r\n-        isDiscoverArtRoute={\"Y\"} >\r\n+        displayArt={\"Y\"} >\r\n       </NewMap>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../ui-elements/select\";\r\n-import PrestationFiche from \"./prestationFiche\";\r\n-import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"./prestationFicheMap\";\r\n-import { K_SIZE } from \"./markerStyle\";\r\n-import * as vars from \"../../vars\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n-import NewMap from \"../../components/front/newMap.js\";\r\n-import { object } from \"prop-types\";\r\n-export default function ListePrestationFiche({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-\r\n-  let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n-  });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-  const [positions, setPositions] = useState([]);\r\n-  const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step1 filter.codePostal\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n-\r\n-  useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-      // // console.log(\"Step2 activeBenefit\");\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n-\r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée\r\n-        </h3>\r\n-      );\r\n-    if (positions.length === 0) {\r\n-\r\n-      clustererPlaces(benefits);\r\n-      //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n-      //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n-    }\r\n-    // // console.log(\"Step3  benefits.map\");\r\n-    return benefits.map((row) => {\r\n-      // return(<></>);\r\n-      return rowRender(row);\r\n-    });\r\n-  };\r\n-\r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-        if (val.id === childProps.id) {\r\n-          i = index;\r\n-          return true;\r\n-        }\r\n-      })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n-      if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n-      }`;\r\n-  };\r\n-\r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-      return (\r\n-        <PrestationFicheMap\r\n-          key={row.id}\r\n-          postalCode={row.user.postalCode}\r\n-          enterprise={row.user.enterprise}\r\n-          city={row.user.city}\r\n-          lat={row.user.latitude}\r\n-          lng={row.user.longitude}\r\n-          text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n-          }\r\n-          id={row.id}\r\n-          // use your hover state (from store, react-controllables etc...)\r\n-          activeBenefit={activeBenefit}\r\n-        />\r\n-      );\r\n-    })\r\n-    : \"\";\r\n-\r\n-\r\n-\r\n-  function clustererPlaces(benefits) {\r\n-    if (!isPositionsSet) {\r\n-\r\n-\r\n-\r\n-\r\n-      let xrows = [];\r\n-      let xi = 0;\r\n-      let row = object;\r\n-      for (xi = 0; xi < benefits.length; xi++) {\r\n-        let oneXRow = [];\r\n-        row = benefits[xi];\r\n-        //console.log(\"LPF TU 1.031 positions \", row);\r\n-        oneXRow['label'] = row.user.enterprise;\r\n-        oneXRow['postalcode'] = row.user.postalCode;\r\n-        oneXRow['city_code'] = row.user.city;\r\n-        oneXRow['lat'] = row.user.latitude;\r\n-        oneXRow['lng'] = row.user.longitude;\r\n-        oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n-        oneXRow['id'] = row.id;\r\n-        xrows.push(oneXRow)\r\n-      }\r\n-      //console.log(\"LPF TU 1.032 positions \", xrows);\r\n-\r\n-      setPositions(xrows);\r\n-      setIsPositionsSet(true);\r\n-\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  const settings = {\r\n-    className: \"slider variable-width\",\r\n-    infinite: false,\r\n-    centerMode: true,\r\n-    slidesToShow: 2,\r\n-    slidesToScroll: 1,\r\n-    variableWidth: true,\r\n-    arrows: false,\r\n-    focusOnSelect: true,\r\n-    initialSlide: 1,\r\n-    responsive: [\r\n-      {\r\n-        breakpoint: 575,\r\n-        settings: {\r\n-          slidesToShow: 1,\r\n-          slidesToScroll: 1,\r\n-          initialSlide: 0,\r\n-        },\r\n-      },\r\n-    ],\r\n-  };\r\n-  return (\r\n-    <ListFichePrestation>\r\n-      <div className=\"head-list-content\">\r\n-        <h1 className=\"title-bloc-products\">\r\n-          {service ? getTitleService() : \"\"}\r\n-        </h1>\r\n-        <Select\r\n-          {...filter.sortBy}\r\n-          onChange={(e) => {\r\n-            const cpFilter = { ...filter };\r\n-            cpFilter.codePostal.error = false;\r\n-            cpFilter.sortBy.value = e.value;\r\n-            setFilter(cpFilter);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <Row className=\"bloc-lists-prstation-items\">\r\n-        <Col lg={5} className=\"content-lists-prstation-items\">\r\n-          {isDesktopOrLaptop && (\r\n-            <div className=\"lists-prstation-items\">{showData()}</div>\r\n-          )}\r\n-          {isTabletOrMobile && (\r\n-            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-              {showData()}\r\n-            </Slider>\r\n-          )}\r\n-        </Col>\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-          <GoogleMap\r\n-            apiKey={vars.mapsApiKey}\r\n-            center={state.map.center}\r\n-            zoom={state.map.zoom}\r\n-            hoverDistance={K_SIZE / 2}\r\n-            onChildClick={_onChildClick}\r\n-            onGoogleApiLoaded={({ map, maps }) => {\r\n-              //// // console.log(\"map is loaded.\");\r\n-            }}\r\n-          >\r\n-            {places}\r\n-          </GoogleMap>\r\n-        </Col>\r\n-\r\n-        {true && (<Col lg={7} className=\"bloc-map-list\">\r\n-\r\n-        </Col>)}\r\n-\r\n-      </Row>\r\n-      <NewMap\r\n-        position={positions}\r\n-        isDiscoverArtRoute={true} >\r\n-      </NewMap>\r\n-    </ListFichePrestation>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1714997417244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n \r\n       </Row>\r\n       <NewMap\r\n         position={positions}\r\n-        displayArt={\"Y\"} >\r\n+        displayArt={{\"Y\"}} >\r\n       </NewMap>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1714997562336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n+  const artTitleIsSet = true;\r\n   const [state, setState] = useState({\r\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n@@ -249,9 +250,9 @@\n \r\n       </Row>\r\n       <NewMap\r\n         position={positions}\r\n-        displayArt={{\"Y\"}} >\r\n+        displayArt={artTitleIsSet} >\r\n       </NewMap>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1714997854389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n-  const artTitleIsSet = true;\r\n+  \r\n   const [state, setState] = useState({\r\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n@@ -250,9 +250,9 @@\n \r\n       </Row>\r\n       <NewMap\r\n         position={positions}\r\n-        displayArt={artTitleIsSet} >\r\n+      >\r\n       </NewMap>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1714998249638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,11 +248,11 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n-      <NewMap\r\n+      <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n-      </NewMap>\r\n+    </NewServiceArtisansMap>\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1714998273652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { K_SIZE } from \"./markerStyle\";\r\n import * as vars from \"../../vars\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n import Slider from \"react-slick\";\r\n-import NewMap from \"../../components/front/newMap.js\";\r\n+import NewServiceArtisansMap from \"../../components/front/newServiceArtisansMap.js\";\r\n import { object } from \"prop-types\";\r\n export default function ListePrestationFiche({\r\n   service = {},\r\n   benefits = [],\r\n"
                },
                {
                    "date": 1714998972710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,18 +153,17 @@\n   function clustererPlaces(benefits) {\r\n     if (!isPositionsSet) {\r\n \r\n \r\n-\r\n-\r\n       let xrows = [];\r\n       let xi = 0;\r\n       let row = object;\r\n       for (xi = 0; xi < benefits.length; xi++) {\r\n         let oneXRow = [];\r\n         row = benefits[xi];\r\n         //console.log(\"LPF TU 1.031 positions \", row);\r\n         oneXRow['label'] = row.user.enterprise;\r\n+        oneXRow['picture'] = row.user.picture;\r\n         oneXRow['postalcode'] = row.user.postalCode;\r\n         oneXRow['city_code'] = row.user.city;\r\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n"
                },
                {
                    "date": 1714999222401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n         xrows.push(oneXRow)\r\n       }\r\n-      //console.log(\"LPF TU 1.032 positions \", xrows);\r\n+      console.log(\"LPF TU 1.032 positions \", xrows);\r\n \r\n       setPositions(xrows);\r\n       setIsPositionsSet(true);\r\n \r\n"
                },
                {
                    "date": 1714999301544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n         xrows.push(oneXRow)\r\n       }\r\n-      console.log(\"LPF TU 1.032 positions \", xrows);\r\n+      console.log(\" s \", xrows);\r\n \r\n       setPositions(xrows);\r\n       setIsPositionsSet(true);\r\n \r\n"
                },
                {
                    "date": 1714999378030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,9 @@\n           enterprise={row.user.enterprise}\r\n           city={row.user.city}\r\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n+          picture={row.user.picture}\r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n           }\r\n           id={row.id}\r\n@@ -170,9 +171,9 @@\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n         xrows.push(oneXRow)\r\n       }\r\n-      console.log(\" s \", xrows);\r\n+      console.log(\"LPF TU 1.032 positions \", xrows);\r\n \r\n       setPositions(xrows);\r\n       setIsPositionsSet(true);\r\n \r\n"
                },
                {
                    "date": 1714999496496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n           city={row.user.city}\r\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           picture={row.user.picture}\r\n+          bonusreparation={row.user.bonusreparation}\r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n           }\r\n           id={row.id}\r\n"
                },
                {
                    "date": 1714999559771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,8 +164,9 @@\n         row = benefits[xi];\r\n         //console.log(\"LPF TU 1.031 positions \", row);\r\n         oneXRow['label'] = row.user.enterprise;\r\n         oneXRow['picture'] = row.user.picture;\r\n+        oneXRow['bonusreparation'] = row.user.bonusreparation;\r\n         oneXRow['postalcode'] = row.user.postalCode;\r\n         oneXRow['city_code'] = row.user.city;\r\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n"
                },
                {
                    "date": 1714999853264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,9 @@\n         oneXRow['lng'] = row.user.longitude;\r\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n         xrows.push(oneXRow)\r\n+        console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n       }\r\n       console.log(\"LPF TU 1.032 positions \", xrows);\r\n \r\n       setPositions(xrows);\r\n"
                },
                {
                    "date": 1715005750735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n-  \r\n+\r\n   const [state, setState] = useState({\r\n     map: { center: [48.8534, 2.3488], zoom: 10 },\r\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n@@ -251,11 +251,12 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n+    \r\n+    </ListFichePrestation>\r\n       <NewServiceArtisansMap\r\n-        position={positions}\r\n-      >\r\n+      position={positions}\r\n+    >\r\n     </NewServiceArtisansMap>\r\n-    </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715005793999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect, useRef } from \"react\";\r\n import Select from \"../ui-elements/select\";\r\n import PrestationFiche from \"./prestationFiche\";\r\n import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n import GoogleMap from \"google-map-react\";\r\n import PrestationFicheMap from \"./prestationFicheMap\";\r\n import { K_SIZE } from \"./markerStyle\";\r\n import * as vars from \"../../vars\";\r\n@@ -251,12 +251,13 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n-    \r\n+    <Container>\r\n     </ListFichePrestation>\r\n       <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n+    </Container>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715005813871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,10 +251,11 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n-    <Container>\r\n+\r\n     </ListFichePrestation>\r\n+        <Container>\r\n       <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n"
                },
                {
                    "date": 1715006156033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect, useRef } from \"react\";\r\n import Select from \"../ui-elements/select\";\r\n import PrestationFiche from \"./prestationFiche\";\r\n import { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Container, Row } from \"react-bootstrap\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n import GoogleMap from \"google-map-react\";\r\n import PrestationFicheMap from \"./prestationFicheMap\";\r\n import { K_SIZE } from \"./markerStyle\";\r\n import * as vars from \"../../vars\";\r\n@@ -251,14 +251,11 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n-\r\n+      <NewServiceArtisansMap\r\n+        position={positions}\r\n+      >\r\n+      </NewServiceArtisansMap>\r\n     </ListFichePrestation>\r\n-        <Container>\r\n-      <NewServiceArtisansMap\r\n-      position={positions}\r\n-    >\r\n-    </NewServiceArtisansMap>\r\n-    </Container>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715006390150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,8 +171,9 @@\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n+        oneXRow['linkArtisanService'] = `/artisan/${slugIdUniverse}/${slugIdService}/${slugify(row.user.enterprise)}-${row.user.id}`;\r\n         xrows.push(oneXRow)\r\n         console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n       }\r\n       console.log(\"LPF TU 1.032 positions \", xrows);\r\n"
                },
                {
                    "date": 1715006447181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   });\r\n   const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n   const [positions, setPositions] = useState([]);\r\n   const [isPositionsSet, setIsPositionsSet] = useState(false);\r\n-\r\n+  const { slugIdUniverse, slugIdService, slugIdRepairman } = useParams();\r\n   useEffect(() => {\r\n     if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n       const cpState = { ...state };\r\n       cpState.map.center = [\r\n@@ -152,8 +152,9 @@\n \r\n \r\n \r\n   function clustererPlaces(benefits) {\r\n+ \r\n     if (!isPositionsSet) {\r\n \r\n \r\n       let xrows = [];\r\n"
                },
                {
                    "date": 1715006501497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,11 @@\n import { useMediaQuery } from \"react-responsive\";\r\n import Slider from \"react-slick\";\r\n import NewServiceArtisansMap from \"../../components/front/newServiceArtisansMap.js\";\r\n import { object } from \"prop-types\";\r\n+import { Link, useHistory, useParams } from \"react-router-dom\";\r\n+import { ItemFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\n+import { getPathImage, slugify } from \"../../helper/functions\";\r\n export default function ListePrestationFiche({\r\n   service = {},\r\n   benefits = [],\r\n   filter,\r\n"
                },
                {
                    "date": 1715009100544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,11 +256,15 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n-      <NewServiceArtisansMap\r\n+     \r\n+    </ListFichePrestation>\r\n+    <ListFichePrestation>\r\n+ <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n+\r\n     </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715009143253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,8 +210,9 @@\n       },\r\n     ],\r\n   };\r\n   return (\r\n+    <>\r\n     <ListFichePrestation>\r\n       <div className=\"head-list-content\">\r\n         <h1 className=\"title-bloc-products\">\r\n           {service ? getTitleService() : \"\"}\r\n@@ -258,13 +259,15 @@\n \r\n       </Row>\r\n      \r\n     </ListFichePrestation>\r\n+\r\n     <ListFichePrestation>\r\n- <NewServiceArtisansMap\r\n-        position={positions}\r\n-      >\r\n-      </NewServiceArtisansMap>\r\n+      <NewServiceArtisansMap\r\n+          position={positions}\r\n+        >\r\n+        </NewServiceArtisansMap>\r\n \r\n     </ListFichePrestation>\r\n+    </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715021518194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,10 @@\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           picture={row.user.picture}\r\n           bonusreparation={row.user.bonusreparation}\r\n+          deliveryModes ={ row.deliveryModes}\r\n+      \r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n           }\r\n           id={row.id}\r\n@@ -175,8 +177,9 @@\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n+        \r\n         oneXRow['linkArtisanService'] = `/artisan/${slugIdUniverse}/${slugIdService}/${slugify(row.user.enterprise)}-${row.user.id}`;\r\n         xrows.push(oneXRow)\r\n         console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n       }\r\n"
                },
                {
                    "date": 1715021560162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           picture={row.user.picture}\r\n           bonusreparation={row.user.bonusreparation}\r\n-          deliveryModes ={ row.deliveryModes}\r\n+          \r\n       \r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n           }\r\n"
                },
                {
                    "date": 1715021604060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,9 @@\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n+        oneXRow['deliveryModes']= row.deliveryModes;\r\n         \r\n         oneXRow['linkArtisanService'] = `/artisan/${slugIdUniverse}/${slugIdService}/${slugify(row.user.enterprise)}-${row.user.id}`;\r\n         xrows.push(oneXRow)\r\n         console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n"
                },
                {
                    "date": 1715021872047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,14 +264,14 @@\n       </Row>\r\n      \r\n     </ListFichePrestation>\r\n \r\n-    <ListFichePrestation>\r\n+  \r\n       <NewServiceArtisansMap\r\n           position={positions}\r\n         >\r\n         </NewServiceArtisansMap>\r\n \r\n-    </ListFichePrestation>\r\n+    \r\n     </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715021989067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n       //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n+    return (<></>);\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n     });\r\n"
                },
                {
                    "date": 1715022092803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,8 +242,9 @@\n               {showData()}\r\n             </Slider>\r\n           )}\r\n         </Col>\r\n+        { false && (\r\n         <Col lg={7} className=\"bloc-map-list\">\r\n           <GoogleMap\r\n             apiKey={vars.mapsApiKey}\r\n             center={state.map.center}\r\n@@ -256,8 +257,9 @@\n           >\r\n             {places}\r\n           </GoogleMap>\r\n         </Col>\r\n+        )};\r\n \r\n         {true && (<Col lg={7} className=\"bloc-map-list\">\r\n \r\n         </Col>)}\r\n"
                },
                {
                    "date": 1715022346041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,10 +142,10 @@\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           picture={row.user.picture}\r\n           bonusreparation={row.user.bonusreparation}\r\n-          \r\n-      \r\n+\r\n+\r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n           }\r\n           id={row.id}\r\n@@ -158,9 +158,9 @@\n \r\n \r\n \r\n   function clustererPlaces(benefits) {\r\n- \r\n+\r\n     if (!isPositionsSet) {\r\n \r\n \r\n       let xrows = [];\r\n@@ -178,10 +178,10 @@\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n         oneXRow['text'] = row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\";\r\n         oneXRow['id'] = row.id;\r\n-        oneXRow['deliveryModes']= row.deliveryModes;\r\n-        \r\n+        oneXRow['deliveryModes'] = row.deliveryModes;\r\n+\r\n         oneXRow['linkArtisanService'] = `/artisan/${slugIdUniverse}/${slugIdService}/${slugify(row.user.enterprise)}-${row.user.id}`;\r\n         xrows.push(oneXRow)\r\n         console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n       }\r\n@@ -216,65 +216,68 @@\n     ],\r\n   };\r\n   return (\r\n     <>\r\n-    <ListFichePrestation>\r\n-      <div className=\"head-list-content\">\r\n-        <h1 className=\"title-bloc-products\">\r\n-          {service ? getTitleService() : \"\"}\r\n-        </h1>\r\n-        <Select\r\n-          {...filter.sortBy}\r\n-          onChange={(e) => {\r\n-            const cpFilter = { ...filter };\r\n-            cpFilter.codePostal.error = false;\r\n-            cpFilter.sortBy.value = e.value;\r\n-            setFilter(cpFilter);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <Row className=\"bloc-lists-prstation-items\">\r\n-        <Col lg={5} className=\"content-lists-prstation-items\">\r\n-          {isDesktopOrLaptop && (\r\n-            <div className=\"lists-prstation-items\">{showData()}</div>\r\n-          )}\r\n-          {isTabletOrMobile && (\r\n-            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-              {showData()}\r\n-            </Slider>\r\n-          )}\r\n-        </Col>\r\n-        { false && (\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-          <GoogleMap\r\n-            apiKey={vars.mapsApiKey}\r\n-            center={state.map.center}\r\n-            zoom={state.map.zoom}\r\n-            hoverDistance={K_SIZE / 2}\r\n-            onChildClick={_onChildClick}\r\n-            onGoogleApiLoaded={({ map, maps }) => {\r\n-              //// // console.log(\"map is loaded.\");\r\n+      <ListFichePrestation>\r\n+        <div className=\"head-list-content\">\r\n+          <h1 className=\"title-bloc-products\">\r\n+            {service ? getTitleService() : \"\"}\r\n+          </h1>\r\n+          <Select\r\n+            {...filter.sortBy}\r\n+            onChange={(e) => {\r\n+              const cpFilter = { ...filter };\r\n+              cpFilter.codePostal.error = false;\r\n+              cpFilter.sortBy.value = e.value;\r\n+              setFilter(cpFilter);\r\n             }}\r\n-          >\r\n-            {places}\r\n-          </GoogleMap>\r\n-        </Col>\r\n+          />\r\n+        </div>\r\n+        {true && ({ showData() }\r\n+}\r\n+        {false && (\r\n+          <Row className=\"bloc-lists-prstation-items\">\r\n+            <Col lg={5} className=\"content-lists-prstation-items\">\r\n+              {isDesktopOrLaptop && (\r\n+                <div className=\"lists-prstation-items\">{showData()}</div>\r\n+              )}\r\n+              {isTabletOrMobile && (\r\n+                <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+                  {showData()}\r\n+                </Slider>\r\n+              )}\r\n+            </Col>\r\n+\r\n+            <Col lg={7} className=\"bloc-map-list\">\r\n+              <GoogleMap\r\n+                apiKey={vars.mapsApiKey}\r\n+                center={state.map.center}\r\n+                zoom={state.map.zoom}\r\n+                hoverDistance={K_SIZE / 2}\r\n+                onChildClick={_onChildClick}\r\n+                onGoogleApiLoaded={({ map, maps }) => {\r\n+                  //// // console.log(\"map is loaded.\");\r\n+                }}\r\n+              >\r\n+                {places}\r\n+              </GoogleMap>\r\n+            </Col>\r\n         )};\r\n \r\n-        {true && (<Col lg={7} className=\"bloc-map-list\">\r\n+            {false && (<Col lg={7} className=\"bloc-map-list\">\r\n \r\n-        </Col>)}\r\n+            </Col>)}\r\n \r\n-      </Row>\r\n+          </Row>\r\n      \r\n     </ListFichePrestation>\r\n \r\n-  \r\n+\r\n       <NewServiceArtisansMap\r\n-          position={positions}\r\n-        >\r\n-        </NewServiceArtisansMap>\r\n+        position={positions}\r\n+      >\r\n+      </NewServiceArtisansMap>\r\n \r\n-    \r\n+\r\n     </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715022353206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n               setFilter(cpFilter);\r\n             }}\r\n           />\r\n         </div>\r\n-        {true && ({ showData() }\r\n+        {true && ( showData() \r\n }\r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715022366467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n               setFilter(cpFilter);\r\n             }}\r\n           />\r\n         </div>\r\n-        {true && ( showData() \r\n+        { true && ( showData() )}\r\n }\r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715022413071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,10 +231,10 @@\n               setFilter(cpFilter);\r\n             }}\r\n           />\r\n         </div>\r\n-        { true && ( showData() )}\r\n-}\r\n+        { true &&  ({ showData()})};\r\n+\r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n               {isDesktopOrLaptop && (\r\n"
                },
                {
                    "date": 1715022426321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,11 @@\n               setFilter(cpFilter);\r\n             }}\r\n           />\r\n         </div>\r\n-        { true &&  ({ showData()})};\r\n+        { true &&  (\r\n+          { showData()}\r\n+          )};\r\n \r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715022431890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n             }}\r\n           />\r\n         </div>\r\n         { true &&  (\r\n-          { showData()}\r\n+          { showData() }\r\n           )};\r\n \r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715022465615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n           />\r\n         </div>\r\n         { true &&  (\r\n           { showData() }\r\n-          )};\r\n+          )}\r\n \r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715022593990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,10 +231,15 @@\n               setFilter(cpFilter);\r\n             }}\r\n           />\r\n         </div>\r\n-        { true &&  (\r\n-          { showData() }\r\n+        { true && (\r\n+           \r\n+            <Row className=\"bloc-lists-prstation-items\">\r\n+             { showData()}\r\n+           </Row>\r\n+\r\n+          \r\n           )}\r\n \r\n         {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715022663832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,18 +231,18 @@\n               setFilter(cpFilter);\r\n             }}\r\n           />\r\n         </div>\r\n-        { true && (\r\n-           \r\n-            <Row className=\"bloc-lists-prstation-items\">\r\n-             { showData()}\r\n-           </Row>\r\n+        {true && (\r\n \r\n-          \r\n-          )}\r\n+          <Row className=\"bloc-lists-prstation-items\">\r\n+            {showData()}\r\n+          </Row>\r\n \r\n-        {false && (\r\n+\r\n+        )}\r\n+\r\n+        { false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n               {isDesktopOrLaptop && (\r\n                 <div className=\"lists-prstation-items\">{showData()}</div>\r\n@@ -267,8 +267,9 @@\n               >\r\n                 {places}\r\n               </GoogleMap>\r\n             </Col>\r\n+           </Row> \r\n         )};\r\n \r\n             {false && (<Col lg={7} className=\"bloc-map-list\">\r\n \r\n"
                },
                {
                    "date": 1715022727605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,17 +232,14 @@\n             }}\r\n           />\r\n         </div>\r\n         {true && (\r\n-\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             {showData()}\r\n           </Row>\r\n-\r\n-\r\n         )}\r\n \r\n-        { false && (\r\n+        {false && (\r\n           <Row className=\"bloc-lists-prstation-items\">\r\n             <Col lg={5} className=\"content-lists-prstation-items\">\r\n               {isDesktopOrLaptop && (\r\n                 <div className=\"lists-prstation-items\">{showData()}</div>\r\n@@ -267,25 +264,24 @@\n               >\r\n                 {places}\r\n               </GoogleMap>\r\n             </Col>\r\n-           </Row> \r\n+          </Row>\r\n         )};\r\n \r\n-            {false && (<Col lg={7} className=\"bloc-map-list\">\r\n+        {false && (<Col lg={7} className=\"bloc-map-list\">\r\n \r\n-            </Col>)}\r\n+        </Col>)}\r\n \r\n-          </Row>\r\n-     \r\n-    </ListFichePrestation>\r\n+      </Row>\r\n+</>\r\n+    </ListFichePrestation >\r\n \r\n \r\n       <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n \r\n-\r\n-    </>\r\n+ \r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715022740675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,12 +272,12 @@\n \r\n         </Col>)}\r\n \r\n       </Row>\r\n-</>\r\n+\r\n     </ListFichePrestation >\r\n \r\n-\r\n+</>\r\n       <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n"
                },
                {
                    "date": 1715022776649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,19 +269,18 @@\n         )};\r\n \r\n         {false && (<Col lg={7} className=\"bloc-map-list\">\r\n \r\n-        </Col>)}\r\n+        </Col>) }\r\n \r\n-      </Row>\r\n \r\n     </ListFichePrestation >\r\n \r\n </>\r\n-      <NewServiceArtisansMap\r\n-        position={positions}\r\n-      >\r\n-      </NewServiceArtisansMap>\r\n+    <NewServiceArtisansMap\r\n+      position={positions}\r\n+    >\r\n+    </NewServiceArtisansMap>\r\n \r\n- \r\n+\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715022810450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,15 +267,17 @@\n             </Col>\r\n           </Row>\r\n         )};\r\n \r\n-        {false && (<Col lg={7} className=\"bloc-map-list\">\r\n+        {false && (\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n \r\n-        </Col>) }\r\n+        </Col>)\r\n+         }\r\n+</ListFichePrestation>\r\n \r\n+   \r\n \r\n-    </ListFichePrestation >\r\n-\r\n </>\r\n     <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n"
                },
                {
                    "date": 1715022836061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,15 +274,15 @@\n         </Col>)\r\n          }\r\n </ListFichePrestation>\r\n \r\n-   \r\n-\r\n-</>\r\n+</>   \r\n+<>\r\n     <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n \r\n \r\n   );\r\n+  </>\r\n }\r\n"
                },
                {
                    "date": 1715022861703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,6 +283,6 @@\n     </NewServiceArtisansMap>\r\n \r\n \r\n   );\r\n-  </>\r\n+  </></>\r\n }\r\n"
                },
                {
                    "date": 1715022871705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,15 +274,13 @@\n         </Col>)\r\n          }\r\n </ListFichePrestation>\r\n \r\n-</>   \r\n-<>\r\n     <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n \r\n \r\n   );\r\n-  </></>\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1715022912313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,15 +272,15 @@\n         <Col lg={7} className=\"bloc-map-list\">\r\n \r\n         </Col>)\r\n          }\r\n-</ListFichePrestation>\r\n+         </ListFichePrestation>\r\n+<>\r\n \r\n     <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n \r\n-\r\n   );\r\n-  \r\n+</>);\r\n }\r\n"
                },
                {
                    "date": 1715022920672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,7 +280,7 @@\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n \r\n-  );\r\n+\r\n </>);\r\n }\r\n"
                },
                {
                    "date": 1715022928145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,6 +281,7 @@\n     >\r\n     </NewServiceArtisansMap>\r\n \r\n \r\n-</>);\r\n+</>\r\n+)\r\n }\r\n"
                },
                {
                    "date": 1715022935883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,15 +273,15 @@\n \r\n         </Col>)\r\n          }\r\n          </ListFichePrestation>\r\n-<>\r\n \r\n+\r\n     <NewServiceArtisansMap\r\n       position={positions}\r\n     >\r\n     </NewServiceArtisansMap>\r\n \r\n \r\n-</>\r\n+>\r\n )\r\n }\r\n"
                },
                {
                    "date": 1715022949775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,20 +268,19 @@\n           </Row>\r\n         )};\r\n \r\n         {false && (\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n+          <Col lg={7} className=\"bloc-map-list\">\r\n \r\n-        </Col>)\r\n-         }\r\n-         </ListFichePrestation>\r\n+          </Col>)\r\n+        }\r\n+      </ListFichePrestation>\r\n \r\n \r\n-    <NewServiceArtisansMap\r\n-      position={positions}\r\n-    >\r\n-    </NewServiceArtisansMap>\r\n+      <NewServiceArtisansMap\r\n+        position={positions}\r\n+      >\r\n+      </NewServiceArtisansMap>\r\n \r\n \r\n->\r\n-)\r\n+      )\r\n }\r\n"
                },
                {
                    "date": 1715022986107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,9 @@\n       },\r\n     ],\r\n   };\r\n   return (\r\n-    <>\r\n+    \r\n       <ListFichePrestation>\r\n         <div className=\"head-list-content\">\r\n           <h1 className=\"title-bloc-products\">\r\n             {service ? getTitleService() : \"\"}\r\n@@ -272,15 +272,16 @@\n           <Col lg={7} className=\"bloc-map-list\">\r\n \r\n           </Col>)\r\n         }\r\n-      </ListFichePrestation>\r\n+    \r\n \r\n \r\n       <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n+      </ListFichePrestation>\r\n \r\n \r\n       )\r\n-}\r\n+\r\n"
                },
                {
                    "date": 1715022992945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,5 +283,5 @@\n       </ListFichePrestation>\r\n \r\n \r\n       )\r\n-\r\n+    }\r\n"
                },
                {
                    "date": 1715023037104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,73 +215,74 @@\n       },\r\n     ],\r\n   };\r\n   return (\r\n-    \r\n-      <ListFichePrestation>\r\n-        <div className=\"head-list-content\">\r\n-          <h1 className=\"title-bloc-products\">\r\n-            {service ? getTitleService() : \"\"}\r\n-          </h1>\r\n-          <Select\r\n-            {...filter.sortBy}\r\n-            onChange={(e) => {\r\n-              const cpFilter = { ...filter };\r\n-              cpFilter.codePostal.error = false;\r\n-              cpFilter.sortBy.value = e.value;\r\n-              setFilter(cpFilter);\r\n-            }}\r\n-          />\r\n-        </div>\r\n-        {true && (\r\n-          <Row className=\"bloc-lists-prstation-items\">\r\n-            {showData()}\r\n-          </Row>\r\n-        )}\r\n \r\n-        {false && (\r\n-          <Row className=\"bloc-lists-prstation-items\">\r\n-            <Col lg={5} className=\"content-lists-prstation-items\">\r\n-              {isDesktopOrLaptop && (\r\n-                <div className=\"lists-prstation-items\">{showData()}</div>\r\n-              )}\r\n-              {isTabletOrMobile && (\r\n-                <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-                  {showData()}\r\n-                </Slider>\r\n-              )}\r\n-            </Col>\r\n+    <ListFichePrestation>\r\n+      <div className=\"head-list-content\">\r\n+        <h1 className=\"title-bloc-products\">\r\n+          {service ? getTitleService() : \"\"}\r\n+        </h1>\r\n+        <Select\r\n+          {...filter.sortBy}\r\n+          onChange={(e) => {\r\n+            const cpFilter = { ...filter };\r\n+            cpFilter.codePostal.error = false;\r\n+            cpFilter.sortBy.value = e.value;\r\n+            setFilter(cpFilter);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      {true && (\r\n+        <Row className=\"bloc-lists-prstation-items\">\r\n+          {showData()}\r\n+          <NewServiceArtisansMap\r\n+        position={positions}\r\n+      >\r\n+      </NewServiceArtisansMap>\r\n+        </Row>\r\n+      )}\r\n \r\n-            <Col lg={7} className=\"bloc-map-list\">\r\n-              <GoogleMap\r\n-                apiKey={vars.mapsApiKey}\r\n-                center={state.map.center}\r\n-                zoom={state.map.zoom}\r\n-                hoverDistance={K_SIZE / 2}\r\n-                onChildClick={_onChildClick}\r\n-                onGoogleApiLoaded={({ map, maps }) => {\r\n-                  //// // console.log(\"map is loaded.\");\r\n-                }}\r\n-              >\r\n-                {places}\r\n-              </GoogleMap>\r\n-            </Col>\r\n-          </Row>\r\n-        )};\r\n+      {false && (\r\n+        <Row className=\"bloc-lists-prstation-items\">\r\n+          <Col lg={5} className=\"content-lists-prstation-items\">\r\n+            {isDesktopOrLaptop && (\r\n+              <div className=\"lists-prstation-items\">{showData()}</div>\r\n+            )}\r\n+            {isTabletOrMobile && (\r\n+              <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+                {showData()}\r\n+              </Slider>\r\n+            )}\r\n+          </Col>\r\n \r\n-        {false && (\r\n           <Col lg={7} className=\"bloc-map-list\">\r\n+            <GoogleMap\r\n+              apiKey={vars.mapsApiKey}\r\n+              center={state.map.center}\r\n+              zoom={state.map.zoom}\r\n+              hoverDistance={K_SIZE / 2}\r\n+              onChildClick={_onChildClick}\r\n+              onGoogleApiLoaded={({ map, maps }) => {\r\n+                //// // console.log(\"map is loaded.\");\r\n+              }}\r\n+            >\r\n+              {places}\r\n+            </GoogleMap>\r\n+          </Col>\r\n+        </Row>\r\n+      )};\r\n \r\n-          </Col>)\r\n-        }\r\n-    \r\n+      {false && (\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n \r\n+        </Col>)\r\n+      }\r\n \r\n-      <NewServiceArtisansMap\r\n-        position={positions}\r\n-      >\r\n-      </NewServiceArtisansMap>\r\n-      </ListFichePrestation>\r\n \r\n \r\n-      )\r\n-    }\r\n+   \r\n+    </ListFichePrestation>\r\n+\r\n+\r\n+  )\r\n+}\r\n"
                },
                {
                    "date": 1715023067499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,15 +232,15 @@\n           }}\r\n         />\r\n       </div>\r\n       {true && (\r\n-        <Row className=\"bloc-lists-prstation-items\">\r\n+        \r\n           {showData()}\r\n           <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n-        </Row>\r\n+         \r\n       )}\r\n \r\n       {false && (\r\n         <Row className=\"bloc-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715023125777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,15 +232,15 @@\n           }}\r\n         />\r\n       </div>\r\n       {true && (\r\n-        \r\n+        <Row className=\"bloc-lists-prstation-items\">\r\n           {showData()}\r\n           <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n-         \r\n+        </Row>\r\n       )}\r\n \r\n       {false && (\r\n         <Row className=\"bloc-lists-prstation-items\">\r\n"
                },
                {
                    "date": 1715023662187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,24 @@\n       row={row}\r\n     />\r\n   );\r\n \r\n+  const fetchData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      )\r\n+    else \r\n+    if (positions.length === 0) {\r\n+      clustererPlaces(benefits);\r\n+   \r\n+    }\r\n+   \r\n+    return (<></>);\r\n+\r\n+\r\n   const showData = () => {\r\n     if (service === false || isPending)\r\n       return (\r\n         <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n"
                },
                {
                    "date": 1715023667903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,10 @@\n    \r\n     }\r\n    \r\n     return (<></>);\r\n+  }\r\n \r\n-\r\n   const showData = () => {\r\n     if (service === false || isPending)\r\n       return (\r\n         <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n"
                },
                {
                    "date": 1715023742784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,12 @@\n         />\r\n       </div>\r\n       {true && (\r\n         <Row className=\"bloc-lists-prstation-items\">\r\n-          {showData()}\r\n+          {\r\n+          //showData()\r\n+          fetchData()\r\n+          }\r\n           <NewServiceArtisansMap\r\n         position={positions}\r\n       >\r\n       </NewServiceArtisansMap>\r\n"
                },
                {
                    "date": 1715023927837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,10 +79,22 @@\n       return (\r\n         <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n           Chargement...\r\n         </div>\r\n-      )\r\n-    else \r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée\r\n+        </h3>\r\n+      );\r\n     if (positions.length === 0) {\r\n       clustererPlaces(benefits);\r\n    \r\n     }\r\n"
                },
                {
                    "date": 1715024049348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n       //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n-    return (<></>);\r\n+    \r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n     });\r\n@@ -300,18 +300,17 @@\n               {places}\r\n             </GoogleMap>\r\n           </Col>\r\n         </Row>\r\n+        <Col lg={7} className=\"bloc-map-list\">\r\n+\r\n+        </Col>\r\n       )};\r\n \r\n-      {false && (\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n+     \r\n \r\n-        </Col>)\r\n-      }\r\n \r\n \r\n-\r\n    \r\n     </ListFichePrestation>\r\n \r\n \r\n"
                },
                {
                    "date": 1715024099513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,18 +299,18 @@\n             >\r\n               {places}\r\n             </GoogleMap>\r\n           </Col>\r\n+          <Col lg={7} className=\"bloc-map-list\">\r\n+\r\n+</Col>)\r\n         </Row>\r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-\r\n-        </Col>\r\n+        \r\n       )};\r\n \r\n      \r\n \r\n \r\n-\r\n    \r\n     </ListFichePrestation>\r\n \r\n \r\n"
                },
                {
                    "date": 1715024173909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,11 +95,11 @@\n         </h3>\r\n       );\r\n     if (positions.length === 0) {\r\n       clustererPlaces(benefits);\r\n-   \r\n+\r\n     }\r\n-   \r\n+\r\n     return (<></>);\r\n   }\r\n \r\n   const showData = () => {\r\n@@ -128,9 +128,9 @@\n       //console.log(\"LPF TU 1.01 positions is loaded\",positions);\r\n       //console.log(\"LPF TU 1.01 benefits just loaded\",benefits);\r\n     }\r\n     // // console.log(\"Step3  benefits.map\");\r\n-    \r\n+\r\n     return benefits.map((row) => {\r\n       // return(<></>);\r\n       return rowRender(row);\r\n     });\r\n@@ -262,15 +262,15 @@\n       </div>\r\n       {true && (\r\n         <Row className=\"bloc-lists-prstation-items\">\r\n           {\r\n-          //showData()\r\n-          fetchData()\r\n+            //showData()\r\n+            fetchData()\r\n           }\r\n           <NewServiceArtisansMap\r\n-        position={positions}\r\n-      >\r\n-      </NewServiceArtisansMap>\r\n+            position={positions}\r\n+          >\r\n+          </NewServiceArtisansMap>\r\n         </Row>\r\n       )}\r\n \r\n       {false && (\r\n@@ -301,17 +301,17 @@\n             </GoogleMap>\r\n           </Col>\r\n           <Col lg={7} className=\"bloc-map-list\">\r\n \r\n-</Col>)\r\n+          </Col>)\r\n         </Row>\r\n-        \r\n+\r\n       )};\r\n \r\n-     \r\n \r\n \r\n-   \r\n+\r\n+\r\n     </ListFichePrestation>\r\n \r\n \r\n   )\r\n"
                },
                {
                    "date": 1715764883199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n           bonusreparation={row.user.bonusreparation}\r\n \r\n \r\n           text={\r\n-            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devisa\"\r\n+            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n           }\r\n           id={row.id}\r\n           // use your hover state (from store, react-controllables etc...)\r\n           activeBenefit={activeBenefit}\r\n"
                },
                {
                    "date": 1715775849928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n \r\n           </Col>)\r\n         </Row>\r\n \r\n-      )};\r\n+      )}\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1716462089299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   ...props\r\n }) {\r\n \r\n   let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 793px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n \r\n"
                },
                {
                    "date": 1716462480103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   ...props\r\n }) {\r\n \r\n   let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 793px)\" });\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 593px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n \r\n"
                },
                {
                    "date": 1717489887085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n           lat={row.user.latitude}\r\n           lng={row.user.longitude}\r\n           picture={row.user.picture}\r\n           bonusreparation={row.user.bonusreparation}\r\n+          reparacteur={row.user.reparacteur}\r\n \r\n \r\n           text={\r\n             row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n"
                },
                {
                    "date": 1717498941170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,8 +201,9 @@\n         //console.log(\"LPF TU 1.031 positions \", row);\r\n         oneXRow['label'] = row.user.enterprise;\r\n         oneXRow['picture'] = row.user.picture;\r\n         oneXRow['bonusreparation'] = row.user.bonusreparation;\r\n+        oneXRow['reparacteur'] = row.user.reparacteur;\r\n         oneXRow['postalcode'] = row.user.postalCode;\r\n         oneXRow['city_code'] = row.user.city;\r\n         oneXRow['lat'] = row.user.latitude;\r\n         oneXRow['lng'] = row.user.longitude;\r\n"
                },
                {
                    "date": 1717601649889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,8 +201,9 @@\n         //console.log(\"LPF TU 1.031 positions \", row);\r\n         oneXRow['label'] = row.user.enterprise;\r\n         oneXRow['picture'] = row.user.picture;\r\n         oneXRow['bonusreparation'] = row.user.bonusreparation;\r\n+        oneXRow['boutiquefermee'] = row.user.boutiquefermee;\r\n         oneXRow['reparacteur'] = row.user.reparacteur;\r\n         oneXRow['postalcode'] = row.user.postalCode;\r\n         oneXRow['city_code'] = row.user.city;\r\n         oneXRow['lat'] = row.user.latitude;\r\n"
                },
                {
                    "date": 1717601885633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,10 @@\n         oneXRow['label'] = row.user.enterprise;\r\n         oneXRow['picture'] = row.user.picture;\r\n         oneXRow['bonusreparation'] = row.user.bonusreparation;\r\n         oneXRow['boutiquefermee'] = row.user.boutiquefermee;\r\n+        oneXRow['isRegistrationCompleted'] = row.user.isRegistrationCompleted;\r\n+        \r\n         oneXRow['reparacteur'] = row.user.reparacteur;\r\n         oneXRow['postalcode'] = row.user.postalCode;\r\n         oneXRow['city_code'] = row.user.city;\r\n         oneXRow['lat'] = row.user.latitude;\r\n"
                },
                {
                    "date": 1717602937427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n       let row = object;\r\n       for (xi = 0; xi < benefits.length; xi++) {\r\n         let oneXRow = [];\r\n         row = benefits[xi];\r\n-        //console.log(\"LPF TU 1.031 positions \", row);\r\n+        console.log(\"LPF TU 1.031 positions \", row);\r\n         oneXRow['label'] = row.user.enterprise;\r\n         oneXRow['picture'] = row.user.picture;\r\n         oneXRow['bonusreparation'] = row.user.bonusreparation;\r\n         oneXRow['boutiquefermee'] = row.user.boutiquefermee;\r\n"
                },
                {
                    "date": 1717654671487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n       let row = object;\r\n       for (xi = 0; xi < benefits.length; xi++) {\r\n         let oneXRow = [];\r\n         row = benefits[xi];\r\n-        console.log(\"LPF TU 1.031 positions \", row);\r\n+        //console.log(\"LPF TU 1.031 positions \", row);\r\n         oneXRow['label'] = row.user.enterprise;\r\n         oneXRow['picture'] = row.user.picture;\r\n         oneXRow['bonusreparation'] = row.user.bonusreparation;\r\n         oneXRow['boutiquefermee'] = row.user.boutiquefermee;\r\n@@ -215,9 +215,9 @@\n         oneXRow['deliveryModes'] = row.deliveryModes;\r\n \r\n         oneXRow['linkArtisanService'] = `/artisan/${slugIdUniverse}/${slugIdService}/${slugify(row.user.enterprise)}-${row.user.id}`;\r\n         xrows.push(oneXRow)\r\n-        console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n+        //console.log(\"LPF TU 1.032 user for posution \", row.user);\r\n       }\r\n       console.log(\"LPF TU 1.032 positions \", xrows);\r\n \r\n       setPositions(xrows);\r\n"
                },
                {
                    "date": 1718095001514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   ...props\r\n }) {\r\n \r\n   let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 593px)\" });\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 013px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n \r\n"
                }
            ],
            "date": 1706549944637,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport Select from \"../ui-elements/select\";\r\nimport PrestationFiche from \"./prestationFiche\";\r\nimport { ListFichePrestation } from \"../../assets/styles/frontGlobalStyle\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport GoogleMap from \"google-map-react\";\r\nimport PrestationFicheMap from \"./prestationFicheMap\";\r\nimport { K_SIZE } from \"./markerStyle\";\r\nimport * as vars from \"../../vars\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport Slider from \"react-slick\";\r\n\r\nexport default function ListePrestationFiche({\r\n  service = {},\r\n  benefits = [],\r\n  filter,\r\n  setFilter,\r\n  greatPlaces,\r\n  isPending,\r\n  ...props\r\n}) {\r\n  let refSlider = useRef(null);\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n  const isDesktopOrLaptop = useMediaQuery({\r\n    query: \"(min-width: 994px)\",\r\n  });\r\n  const [state, setState] = useState({\r\n    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n  });\r\n  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n\r\n  useEffect(() => {\r\n    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n      const cpState = { ...state };\r\n      cpState.map.center = [\r\n        filter.codePostal.latitude,\r\n        filter.codePostal.longitude,\r\n      ];\r\n      setState(cpState);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n\r\n  useEffect(() => {\r\n    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n      const cpState = { ...state };\r\n      cpState.map.center = [\r\n        activeBenefit.user.latitude,\r\n        activeBenefit.user.longitude,\r\n      ];\r\n      setState(cpState);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activeBenefit]);\r\n\r\n  const rowRender = (row) => (\r\n    <PrestationFiche\r\n      activeBenefit={activeBenefit}\r\n      setActiveBenefit={setActiveBenefit}\r\n      key={row.id}\r\n      row={row}\r\n    />\r\n  );\r\n\r\n  const showData = () => {\r\n    if (service === false || isPending)\r\n      return (\r\n        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n          Chargement...\r\n        </div>\r\n      );\r\n    else if (benefits.length === 0)\r\n      return (\r\n        <h3\r\n          style={{\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n            fontSize: \"22px\",\r\n            fontWeight: \"600\",\r\n          }}\r\n        >\r\n          Aucune donnée\r\n        </h3>\r\n      );\r\n\r\n    return benefits.map((row) => {\r\n      return rowRender(row);\r\n    });\r\n  };\r\n\r\n  const _onChildClick = (key, childProps) => {\r\n    let i = null;\r\n    const benefit = benefits.length\r\n      ? benefits.find((val, index) => {\r\n        if (val.id === childProps.id) {\r\n          i = index;\r\n          return true;\r\n        }\r\n      })\r\n      : { id: null };\r\n    if (benefit.id) {\r\n      setActiveBenefit(benefit);\r\n      if (isTabletOrMobile) {\r\n        refSlider.slickGoTo(i);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTitleService = () => {\r\n    return `${service.name} : ${benefits.length} réparateur${benefits.length > 1 ? \"(s)\" : \"\"\r\n      }`;\r\n  };\r\n\r\n  const places = benefits.length\r\n    ? benefits.map((row) => {\r\n      return (\r\n        <PrestationFicheMap\r\n          key={row.id}\r\n          lat={row.user.latitude}\r\n          lng={row.user.longitude}\r\n          text={\r\n            row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n          }\r\n          id={row.id}\r\n          // use your hover state (from store, react-controllables etc...)\r\n          activeBenefit={activeBenefit}\r\n        />\r\n      );\r\n    })\r\n    : \"\";\r\n\r\n  const settings = {\r\n    className: \"slider variable-width\",\r\n    infinite: false,\r\n    centerMode: true,\r\n    slidesToShow: 2,\r\n    slidesToScroll: 1,\r\n    variableWidth: true,\r\n    arrows: false,\r\n    focusOnSelect: true,\r\n    initialSlide: 1,\r\n    responsive: [\r\n      {\r\n        breakpoint: 575,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n          initialSlide: 0,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <ListFichePrestation>\r\n      <div className=\"head-list-content\">\r\n        <h1 className=\"title-bloc-products\">\r\n          {service ? getTitleService() : \"\"}\r\n        </h1>\r\n        <Select\r\n          {...filter.sortBy}\r\n          onChange={(e) => {\r\n            const cpFilter = { ...filter };\r\n            cpFilter.codePostal.error = false;\r\n            cpFilter.sortBy.value = e.value;\r\n            setFilter(cpFilter);\r\n          }}\r\n        />\r\n      </div>\r\n      <Row className=\"bloc-lists-prstation-items\">\r\n        <Col lg={5} className=\"content-lists-prstation-items\">\r\n          {isDesktopOrLaptop && (\r\n            <div className=\"lists-prstation-items\">{showData()}</div>\r\n          )}\r\n          {isTabletOrMobile && (\r\n            <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n              {showData()}\r\n            </Slider>\r\n          )}\r\n        </Col>\r\n        <Col lg={7} className=\"bloc-map-list\">\r\n          <GoogleMap\r\n            apiKey={vars.mapsApiKey}\r\n            center={state.map.center}\r\n            zoom={state.map.zoom}\r\n            hoverDistance={K_SIZE / 2}\r\n            onChildClick={_onChildClick}\r\n            onGoogleApiLoaded={({ map, maps }) => {\r\n              //console.log(\"map is loaded.\");\r\n            }}\r\n          >\r\n            {places}\r\n          </GoogleMap>\r\n        </Col>\r\n      </Row>\r\n    </ListFichePrestation>\r\n  );\r\n}\r\n"
        }
    ]
}