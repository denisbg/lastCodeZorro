{
    "sourceFile": "src/components/ui-elements/inputAutoCompleteArt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1711448911811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711448923498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { GroupInput } from \"../../assets/styles/adminStyle/adminGlobalStyle\";\r\n import { GPSIcon } from \"../../assets/styles/icons\";\r\n import { useOutsideAlerter } from \"../../helper/events\";\r\n \r\n-export default function InputAutoComplete({\r\n+export default function InputAutoCompleteArt({\r\n   filter,\r\n   setFilter,\r\n   placeIsSelected = false,\r\n   setPlaceIsSelected,\r\n"
                },
                {
                    "date": 1711449029840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,49 +109,7 @@\n       });\r\n   };\r\n \r\n   return (\r\n-    <div className=\"post-code\">\r\n-      <OverlayTrigger\r\n-        placement={\"bottom\"}\r\n-        overlay={<Tooltip>Me géolocaliser</Tooltip>}\r\n-      >\r\n-        <button className=\"btn-gps\" onClick={(e) => getLocation()}>\r\n-          <GPSIcon />\r\n-        </button>\r\n-      </OverlayTrigger>\r\n-      <GroupInput className={filter.codePostal.error ? \"form-error\" : \"\"}>\r\n-        {filter.codePostal.label ? (\r\n-          <label>\r\n-            {filter.codePostal.label}\r\n-            {filter.codePostal.required ? <i>*</i> : null}\r\n-          </label>\r\n-        ) : null}\r\n-\r\n-        <input\r\n-          className=\"form-control\"\r\n-          ref={ref}\r\n-          value={filter.codePostal.value}\r\n-          type={filter.codePostal.type}\r\n-          placeholder={filter.codePostal.placeholder}\r\n-          onChange={(e) => {\r\n-            const cpFilter = { ...filter };\r\n-            cpFilter.codePostal.value = e.target.value;\r\n-            cpFilter.codePostal.error = false;\r\n-            setFilter(cpFilter);\r\n-            setPlaceIsSelected(false);\r\n-            localStorage.setItem(\"codePostal\", \"\");\r\n-            localStorage.setItem(\"latitude\", \"\");\r\n-            localStorage.setItem(\"longitude\", \"\");\r\n-          }}\r\n-          autoComplete=\"false\"\r\n-        />\r\n-      </GroupInput>\r\n-      {filter.codePostal.infoBulle ? (\r\n-        <div className=\"message-infobulle\" ref={refMessg}>\r\n-          Veuillez sélectionner une adresse dans la liste pour lancer une\r\n-          recherche\r\n-        </div>\r\n-      ) : null}\r\n-    </div>\r\n+   <></>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1715586460513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,9 @@\n       lat: parseFloat(coords.latitude),\r\n       lng: parseFloat(coords.longitude),\r\n     };\r\n     const geocoder = new window.google.maps.Geocoder();\r\n-    geocoder\r\n-      .geocode({ location: latlng })\r\n+    geocoder?.geocode({ location: latlng })\r\n       .then((response) => {\r\n         if (response?.results[0]?.formatted_address) {\r\n           const cpFilter = { ...filter };\r\n           cpFilter.codePostal.value = response.results[0].formatted_address;\r\n"
                }
            ],
            "date": 1711448911811,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef } from \"react\";\r\nimport { usePlacesWidget } from \"react-google-autocomplete\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { GroupInput } from \"../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport { GPSIcon } from \"../../assets/styles/icons\";\r\nimport { useOutsideAlerter } from \"../../helper/events\";\r\n\r\nexport default function InputAutoComplete({\r\n  filter,\r\n  setFilter,\r\n  placeIsSelected = false,\r\n  setPlaceIsSelected,\r\n  isPendingLatLng = true,\r\n  setIsPendingLatLng,\r\n  ...props\r\n}) {\r\n  const refMessg = useRef(null);\r\n  useOutsideAlerter(refMessg, () => {\r\n    const cpFilter = { ...filter };\r\n    cpFilter.codePostal.infoBulle = false;\r\n    setFilter(cpFilter);\r\n  });\r\n  const { ref } = usePlacesWidget({\r\n    onPlaceSelected: (place) => {\r\n      if (place?.formatted_address && place?.geometry?.location?.lat()) {\r\n        const cpFilter = { ...filter };\r\n        cpFilter.codePostal.value = place.formatted_address;\r\n        cpFilter.codePostal.latitude = place.geometry.location.lat();\r\n        cpFilter.codePostal.longitude = place.geometry.location.lng();\r\n        localStorage.setItem(\"codePostal\", cpFilter.codePostal.value);\r\n        localStorage.setItem(\"latitude\", cpFilter.codePostal.latitude);\r\n        localStorage.setItem(\"longitude\", cpFilter.codePostal.longitude);\r\n        setFilter(cpFilter);\r\n        setPlaceIsSelected(true);\r\n      }\r\n    },\r\n    language: \"fr\",\r\n    options: {\r\n      componentRestrictions: { country: \"fr\" },\r\n      fields: [\"formatted_address\", \"geometry\"],\r\n      //types: [\"address\",\"(cities)\",\"(regions)\",\"geocode\",\"establishment\"],\r\n      types: [\"geocode\", \"establishment\"],\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      filter.codePostal.value &&\r\n      filter.codePostal.latitude &&\r\n      filter.codePostal.longitude\r\n    ) {\r\n      setPlaceIsSelected(true);\r\n      setIsPendingLatLng(false);\r\n    } else {\r\n      getLocation();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getLocation = () => {\r\n    let msg = \"\";\r\n    if (!navigator.geolocation) {\r\n      msg =\r\n        \"La géolocalisation n'est pas prise en charge par votre navigateur.\";\r\n      NotificationManager.error(msg, \"\");\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          getAddress(position.coords);\r\n        },\r\n        () => {}\r\n      );\r\n    }\r\n  };\r\n\r\n  const getAddress = (coords) => {\r\n    const latlng = {\r\n      lat: parseFloat(coords.latitude),\r\n      lng: parseFloat(coords.longitude),\r\n    };\r\n    const geocoder = new window.google.maps.Geocoder();\r\n    geocoder\r\n      .geocode({ location: latlng })\r\n      .then((response) => {\r\n        if (response?.results[0]?.formatted_address) {\r\n          const cpFilter = { ...filter };\r\n          cpFilter.codePostal.value = response.results[0].formatted_address;\r\n          cpFilter.codePostal.latitude = coords.latitude;\r\n          cpFilter.codePostal.longitude = coords.longitude;\r\n          localStorage.setItem(\"codePostal\", cpFilter.codePostal.value);\r\n          localStorage.setItem(\"latitude\", cpFilter.codePostal.latitude);\r\n          localStorage.setItem(\"longitude\", cpFilter.codePostal.longitude);\r\n          cpFilter.codePostal.error = false;\r\n          cpFilter.codePostal.infoBulle = false;\r\n          setFilter(cpFilter);\r\n          setPlaceIsSelected(true);\r\n          setIsPendingLatLng(false);\r\n        } else {\r\n          NotificationManager.error(\"Aucun résultat trouvé\", \"\");\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        NotificationManager.error(\r\n          \"Le géocodeur a échoué en raison de: \" + e,\r\n          \"\"\r\n        );\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-code\">\r\n      <OverlayTrigger\r\n        placement={\"bottom\"}\r\n        overlay={<Tooltip>Me géolocaliser</Tooltip>}\r\n      >\r\n        <button className=\"btn-gps\" onClick={(e) => getLocation()}>\r\n          <GPSIcon />\r\n        </button>\r\n      </OverlayTrigger>\r\n      <GroupInput className={filter.codePostal.error ? \"form-error\" : \"\"}>\r\n        {filter.codePostal.label ? (\r\n          <label>\r\n            {filter.codePostal.label}\r\n            {filter.codePostal.required ? <i>*</i> : null}\r\n          </label>\r\n        ) : null}\r\n\r\n        <input\r\n          className=\"form-control\"\r\n          ref={ref}\r\n          value={filter.codePostal.value}\r\n          type={filter.codePostal.type}\r\n          placeholder={filter.codePostal.placeholder}\r\n          onChange={(e) => {\r\n            const cpFilter = { ...filter };\r\n            cpFilter.codePostal.value = e.target.value;\r\n            cpFilter.codePostal.error = false;\r\n            setFilter(cpFilter);\r\n            setPlaceIsSelected(false);\r\n            localStorage.setItem(\"codePostal\", \"\");\r\n            localStorage.setItem(\"latitude\", \"\");\r\n            localStorage.setItem(\"longitude\", \"\");\r\n          }}\r\n          autoComplete=\"false\"\r\n        />\r\n      </GroupInput>\r\n      {filter.codePostal.infoBulle ? (\r\n        <div className=\"message-infobulle\" ref={refMessg}>\r\n          Veuillez sélectionner une adresse dans la liste pour lancer une\r\n          recherche\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}