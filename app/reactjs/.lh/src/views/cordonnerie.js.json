{
    "sourceFile": "src/views/cordonnerie.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1710148969146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1710148969146,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\r\nimport Base from \"../theme/front/base\";\r\nimport ROUTES from \"../config/routes\";\r\n\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport PopinModal from \"../components/ui-elements/popinModal\";\r\nimport ButtonDef from \"../components/ui-elements/buttonDef\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FormLogin } from \"../assets/styles/componentStyles\";\r\nimport InscriptionForm from \"../components/inscriptionForm\";\r\nimport Forgotpassword from \"./back/auth/forgotpassword\";\r\nimport * as vars from \"../vars\";\r\nimport * as actionTypes from \"../store/functions/actionTypes\";\r\nimport { clearErrors } from \"../helper/form\";\r\nimport { validateEmail, validatePassword } from \"../helper/form\";\r\nimport Input from \"../components/ui-elements/input\";\r\nimport endPoints from \"../config/endPoints\";\r\nimport connector from \"../connector\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { Form } from \"react-bootstrap\";\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\n\r\nexport default function Cordonnerie() {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const history = useHistory();\r\n  const auth = useSelector((store) => store.auth);\r\n  const dispatch = useDispatch();\r\n  const dataCrumbs = [\r\n    { name: \"Accueil\", path: \"/\" },\r\n    {\r\n      name: \"CONNEXION\",\r\n      path: ROUTES.CHARTE_COOKIES.url,\r\n    },\r\n  ];\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    email: {\r\n      label: \"Email\",\r\n      name: \"email\",\r\n      placeholder: \"Email\",\r\n      value: \"\",\r\n      type: \"email\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      autocomplete: \"username\",\r\n      required: true,\r\n    },\r\n    password: {\r\n      label: \"Mot de passe\",\r\n      name: \"password\",\r\n      placeholder: \"Mot de passe\",\r\n      value: \"\",\r\n      type: \"password\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      autocomplete: \"new-password\",\r\n      required: true,\r\n      setType: (e) => {\r\n        const cpState = { ...state };\r\n        cpState.password.type = e;\r\n        setState(cpState);\r\n      },\r\n    },\r\n  });\r\n\r\n  const msgErrors = (e) => {\r\n    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n    if (e.msg !== undefined) setMessage(e.msg);\r\n    const cpState = { ...state };\r\n    if (e.email !== undefined) cpState.email.error = e.email;\r\n    if (e.password !== undefined) cpState.password.error = e.password;\r\n    if (e.submit !== undefined) setSubmitting(e.submit);\r\n    setState(cpState);\r\n  };\r\n  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n  const [forgotPasswordRepairman] = useState(\r\n    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n  );\r\n  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [dataModal, setDataModal] = useState({\r\n    title: \"\",\r\n    typeModal: \"\",\r\n  });\r\n\r\n  console.log(dataModal)\r\n  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n\r\n  const submitLogin = (e) => {\r\n    e.preventDefault();\r\n    if (!submitting) {\r\n      setState(clearErrors(state));\r\n\r\n      const email = state.email.value;\r\n      const password = state.password.value;\r\n      let msg = \"Erreur\";\r\n      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n\r\n      if (email && password) {\r\n        if (!validateEmail(email)) {\r\n          msg = \"Votre email n’est pas correctement renseigné.\";\r\n          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n        } else if (!validatePassword(password)) {\r\n          msg =\r\n            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n        } else {\r\n          connector({\r\n            method: \"post\",\r\n            url: endPoints.LOGIN,\r\n            data: { username: email, password },\r\n            success: (response) => {\r\n              msgErrors({ submit: false });\r\n              dispatch({\r\n                type: actionTypes.LOGIN_SUCCESS,\r\n                token: response.data.token,\r\n                refresh_token: response.data.refresh_token,\r\n              });\r\n              setIsConnected(true);\r\n              setShowModal(false);\r\n            },\r\n            catch: (error) => {\r\n              console.log(error);\r\n              msg = \"Vos identifiants sont incorrects\";\r\n              if (error.response?.data?.code !== undefined) {\r\n                if (error.response.data.message !== undefined) {\r\n                  msg = error.response.data.message;\r\n                }\r\n              }\r\n              msgErrors({ msg, submit: false });\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        msgErrors({\r\n          email: !email,\r\n          password: !password,\r\n          msg: \"Veuillez renseigner les champs obligatoires\",\r\n          submit: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"eventHeader\", function (event) {\r\n      if (event.detail === \"openModalClient\") {\r\n        setShowModal(true);\r\n        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n      }\r\n    });\r\n\r\n    if (forgotPasswordRepairman) {\r\n      setLinkInscrir(\"forgotPass\");\r\n      setShowModal(true);\r\n      setDataModal({\r\n        typeModal: \"reparateur\",\r\n        title: \"Espace réparateur\",\r\n      });\r\n    }\r\n\r\n    if (\r\n      modalInscription &&\r\n      [\"reparateur\", \"client\"].includes(modalInscription)\r\n    ) {\r\n      setLinkInscrir(modalInscription);\r\n      setShowModal(true);\r\n      setDataModal({\r\n        typeModal: modalInscription,\r\n        title:\r\n          modalInscription == \"reparateur\"\r\n            ? \"Espace réparateur\"\r\n            : \"Espace client\",\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (auth.roles.length && isConnected) {\r\n      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n        history.push(ROUTES.CATEGORIES.url);\r\n      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n        history.push(ROUTES.REPA_VITRINE.url);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [auth.roles, isConnected]);\r\n  return (\r\n    <Base>\r\n    \r\n        <PopinModal\r\n          show={showModal}\r\n          handleClose={() => {\r\n            setShowModal(false);\r\n            setLinkInscrir();\r\n          }}\r\n          title={dataModal.title}\r\n          className={dataModal.typeModal}\r\n        >\r\n          <div className=\"content-modal\">\r\n            {linkInscrir === \"reparateur\" ? (\r\n              <>\r\n                <InscriptionForm\r\n                  retour={() => {\r\n                    setLinkInscrir(null);\r\n                    setShowModal(true);\r\n                  }}\r\n                  formType={linkInscrir}\r\n                />\r\n                <div className=\"footer-modal\">\r\n                  Déjà sur Fingz?{\" \"}\r\n                  <Link\r\n                    to={\"#\"}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setLinkInscrir();\r\n                    }}\r\n                  >\r\n                    Connectez-vous\r\n                  </Link>\r\n                </div>\r\n              </>\r\n            ) : linkInscrir === \"client\" ? (\r\n              <>\r\n                <InscriptionForm\r\n                  retour={() => {\r\n                    setShowModal(true);\r\n                  }}\r\n                  formType={linkInscrir}\r\n                />\r\n                <div className=\"footer-modal\">\r\n                  Déjà sur Fingz?{\" \"}\r\n                  <Link\r\n                    to={\"#\"}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setLinkInscrir(null);\r\n                    }}\r\n                  >\r\n                    Connectez-vous\r\n                  </Link>\r\n                </div>\r\n              </>\r\n            ) : linkInscrir === \"forgotPass\" ? (\r\n              <Forgotpassword\r\n                retour={(e) => {\r\n                  e.preventDefault();\r\n                  setLinkInscrir();\r\n                }}\r\n              />\r\n            ) : (\r\n              <>\r\n                <div className=\"header-modal\">\r\n                  Première fois sur Fingz?{\" \"}\r\n                  {linkInscrir === \"reparateur\" ||\r\n                  dataModal.typeModal === \"reparateur\" ? (\r\n                    <Link\r\n                      to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n                      target=\"_blank\"\r\n                    >\r\n                      Inscrivez-vous\r\n                    </Link>\r\n                  ) : (\r\n                    <Link\r\n                      to={\"#\"}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setLinkInscrir(dataModal.typeModal);\r\n                      }}\r\n                    >\r\n                      Inscrivez-vous\r\n                    </Link>\r\n                  )}\r\n                </div>\r\n                <FormLogin onSubmit={submitLogin}>\r\n                  {message ? (\r\n                    <span className=\"error-form\">{message}</span>\r\n                  ) : null}\r\n                  <Input\r\n                    {...state.email}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.email.value = e.target.value;\r\n                      setState(cpState);\r\n                      setMessage(null);\r\n                    }}\r\n                  />\r\n                  <Input\r\n                    className=\"password-input\"\r\n                    {...state.password}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.password.value = e.target.value;\r\n                      setState(cpState);\r\n                      setMessage(null);\r\n                    }}\r\n                  />\r\n                  <Link\r\n                    to={\"#\"}\r\n                    className=\"pass-oublier\"\r\n                    onClick={(e) => {\r\n                      setLinkInscrir(\"forgotPass\");\r\n                    }}\r\n                  >\r\n                    Mot de passe oublié ?\r\n                  </Link>\r\n                  <ButtonDef\r\n                    textButton=\"Connexion\"\r\n                    className=\"btn-form-def\"\r\n                    spinner={submitting}\r\n                  />\r\n                </FormLogin>\r\n              </>\r\n            )}\r\n          </div>\r\n        </PopinModal>\r\n      \r\n      <div style={{ width: 1512, height: 860, position: 'relative', background: '#F6F3F5' }}>\r\n         <div style={{ left: 100, top: 52, position: 'absolute', color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word' }}>Cordonnerie !</div>\r\n     \r\n\r\n\r\n      </div>\r\n    </Base>\r\n  );\r\n}"
        }
    ]
}