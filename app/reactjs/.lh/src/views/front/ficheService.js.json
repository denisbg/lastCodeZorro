{
    "sourceFile": "src/views/front/ficheService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 43,
            "patches": [
                {
                    "date": 1711303680094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711303692173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n-              console.log(\"STEP SERVICE RESULT\");\r\n+              console.log(\"STEP SERVICE RESULT\",results);\r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711304002004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,8 +235,9 @@\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n+              console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               let results = response.data[\"hydra:member\"] || [];\r\n               //todo list est voir le min et max\r\n               if (service) {\r\n                 const cpService = { ...service };\r\n@@ -264,9 +265,9 @@\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n-              console.log(\"STEP SERVICE RESULT\",results);\r\n+              console.log(\"STEP SERVICE RESULT 2\",results);\r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711314003564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,8 +389,9 @@\n             <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n               <SearchIcon /> Rechercher une prestation\r\n             </div>\r\n           )}\r\n+          skfsldkdflk\r\n           <ListePrestationFiche\r\n             service={service}\r\n             benefits={benefits}\r\n             filter={filter}\r\n"
                },
                {
                    "date": 1711314142721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n-              console.log(\"STEP SERVICE RESULT 2\",results);\r\n+      \r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711314312253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,9 @@\n \r\n         const cpParamsUrlService = `${condition}`;\r\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n+          console.log(\"llllllllllllll\");\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n           connector({\r\n             method: \"get\",\r\n"
                },
                {
                    "date": 1711314435728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,8 +159,9 @@\n     });\r\n   };\r\n \r\n   const getService = () => {\r\n+    console.log(\"Step 1 Getservice \");\r\n     const idService = slugIdService.split(\"-\").pop();\r\n     if (idService) {\r\n       let condition = ``;\r\n       if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n@@ -229,9 +230,8 @@\n \r\n         const cpParamsUrlService = `${condition}`;\r\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n-          console.log(\"llllllllllllll\");\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n           connector({\r\n             method: \"get\",\r\n"
                },
                {
                    "date": 1711314531144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   });\r\n   const [click, setClick] = useState(false);\r\n   const toggleFilter = () => setClick(!click);\r\n   const toogleCloseFilter = () => setClick(false);\r\n-\r\n+  console.log(\"TU 1 Ficheservice\");\r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n     } else {\r\n"
                },
                {
                    "date": 1711314606962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n         success: (response) => {\r\n+          console.log(\"Step 2 Getservice \",response.data);\r\n           setService(response.data || {});\r\n         },\r\n         catch: (error) => {\r\n           console.log(error);\r\n"
                },
                {
                    "date": 1711314677732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,8 @@\n     });\r\n   };\r\n \r\n   const getService = () => {\r\n-    console.log(\"Step 1 Getservice \");\r\n     const idService = slugIdService.split(\"-\").pop();\r\n     if (idService) {\r\n       let condition = ``;\r\n       if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n"
                },
                {
                    "date": 1711314806417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     if (!isPendingLatLng && service) {\r\n+      console.log(\"TU 12 FicheService getBenefits\");\r\n       getBenefits(true);\r\n     }\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n"
                },
                {
                    "date": 1711314877113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,9 @@\n   useEffect(() => {\r\n     if (!isPendingLatLng && service) {\r\n       console.log(\"TU 12 FicheService getBenefits\");\r\n       getBenefits(true);\r\n+      console.log(\"TU 13 FicheService getBenefits\");\r\n     }\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n \r\n"
                },
                {
                    "date": 1711314902480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,11 +133,11 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     if (!isPendingLatLng && service) {\r\n-      console.log(\"TU 12 FicheService getBenefits\");\r\n+      console.log(\"step TU 12 FicheService getBenefits\");\r\n       getBenefits(true);\r\n-      console.log(\"TU 13 FicheService getBenefits\");\r\n+      console.log(\"step TU 13 FicheService getBenefits\");\r\n     }\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n \r\n"
                },
                {
                    "date": 1711314958269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,8 +185,9 @@\n   };\r\n \r\n   const getBenefits = (refresh = false) => {\r\n     const idService = slugIdService.split(\"-\").pop();\r\n+    console.log(\"Step 4 Fiche Service: \", idService);\r\n     if (idService) {\r\n       if (!placeIsSelected) {\r\n         msgErrors({\r\n           codePostal: true,\r\n"
                },
                {
                    "date": 1711315033973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,8 +235,9 @@\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n+          console.log(\"STEP 6 Ficheservice \",cpParamsUrlService)\r\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n"
                },
                {
                    "date": 1711315236002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n-          console.log(\"STEP 6 Ficheservice \",cpParamsUrlService)\r\n+          console.log(\"STEP 6 Ficheservice \",cpParamsUrlService, idService)\r\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n"
                },
                {
                    "date": 1711315241935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n-          console.log(\"STEP 6 Ficheservice \",cpParamsUrlService, idService)\r\n+          console.log(\"STEP 6 Ficheservice \",cpParamsUrlService, idService);\r\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n"
                },
                {
                    "date": 1711315456050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,10 +240,11 @@\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n+            \r\n+              let results = response.data[\"hydra:member\"] || [];\r\n               console.log(\"STEP SERVICE -1 RESULT\",results);\r\n-              let results = response.data[\"hydra:member\"] || [];\r\n               //todo list est voir le min et max\r\n               if (service) {\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n"
                },
                {
                    "date": 1711315579708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,9 @@\n               let results = response.data[\"hydra:member\"] || [];\r\n               console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n               if (service) {\r\n+                console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n                   for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n"
                },
                {
                    "date": 1711315696066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n-      \r\n+              console.log(\"STEP SERVICE 1-13 RESULT\",results);\r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711315874789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,8 +267,9 @@\n                   cpService.maxPrice = 0;\r\n                   setService(cpService);\r\n                 }\r\n               }\r\n+              console.log(\"STEP SERVICE 1-15 RESULT\",results);\r\n               if (sortBy[0] === \"price\") {\r\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n"
                },
                {
                    "date": 1711315939864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,9 +273,9 @@\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n-              console.log(\"STEP SERVICE 1-13 RESULT\",results);\r\n+              console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711315959096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,13 +268,9 @@\n                   setService(cpService);\r\n                 }\r\n               }\r\n               console.log(\"STEP SERVICE 1-15 RESULT\",results);\r\n-              if (sortBy[0] === \"price\") {\r\n-                results = sortObjects(results,'minPrice',sortBy[1]);\r\n-              }else if(sortBy[0] === \"rating\"){\r\n-                results = sortObjects(results,'rating',sortBy[1]);\r\n-              }\r\n+              \r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n"
                },
                {
                    "date": 1711316043222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   );\r\n \r\n   const { slugIdUniverse, slugIdService } = useParams();\r\n   const [service, setService] = useState(false);\r\n-  const [benefits, setBenefits] = useState([]);\r\n+  const [benefits, setBenefits] = useState();\r\n   const [activeUniverse, setActiveUniverse] = useState(false);\r\n   const universe = useSelector((state) => state.universe);\r\n   const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n   const [isPending, setIsPending] = useState(false);\r\n@@ -268,9 +268,13 @@\n                   setService(cpService);\r\n                 }\r\n               }\r\n               console.log(\"STEP SERVICE 1-15 RESULT\",results);\r\n-              \r\n+              if (sortBy[0] === \"price\") {\r\n+                results = sortObjects(results,'minPrice',sortBy[1]);\r\n+              }else if(sortBy[0] === \"rating\"){\r\n+                results = sortObjects(results,'rating',sortBy[1]);\r\n+              }\r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n               setBenefits(results);\r\n               setIsPending(false);\r\n             },\r\n"
                },
                {
                    "date": 1711316082922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   );\r\n \r\n   const { slugIdUniverse, slugIdService } = useParams();\r\n   const [service, setService] = useState(false);\r\n-  const [benefits, setBenefits] = useState();\r\n+  const [benefits, setBenefits] = useState([]);\r\n   const [activeUniverse, setActiveUniverse] = useState(false);\r\n   const universe = useSelector((state) => state.universe);\r\n   const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n   const [isPending, setIsPending] = useState(false);\r\n"
                },
                {
                    "date": 1711316165102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,10 @@\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n-              setBenefits(results);\r\n+              //setBenefits(results);\r\n+              setBenefits(response.data[\"hydra:member\"] || []);\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n               console.log(error);\r\n"
                },
                {
                    "date": 1711316371731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,10 +274,10 @@\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }\r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n-              //setBenefits(results);\r\n-              setBenefits(response.data[\"hydra:member\"] || []);\r\n+              setBenefits(results);\r\n+              \r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n               console.log(error);\r\n"
                },
                {
                    "date": 1711316712480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n             \r\n               let results = response.data[\"hydra:member\"] || [];\r\n               console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n-              if (service) {\r\n+              if (service  && false) {\r\n                 console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n"
                },
                {
                    "date": 1711316779746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,13 +268,14 @@\n                   setService(cpService);\r\n                 }\r\n               }\r\n               console.log(\"STEP SERVICE 1-15 RESULT\",results);\r\n+              /*\r\n               if (sortBy[0] === \"price\") {\r\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n-              }\r\n+              }*/\r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n               setBenefits(results);\r\n               \r\n               setIsPending(false);\r\n"
                },
                {
                    "date": 1711316815184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }*/\r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n-              setBenefits(results);\r\n+             // setBenefits(results);\r\n               \r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711317001660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }*/\r\n               console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n-             // setBenefits(results);\r\n+              setBenefits(results);\r\n               \r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n"
                },
                {
                    "date": 1711317927603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   });\r\n   const [click, setClick] = useState(false);\r\n   const toggleFilter = () => setClick(!click);\r\n   const toogleCloseFilter = () => setClick(false);\r\n-  console.log(\"TU 1 Ficheservice\");\r\n+\r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n     } else {\r\n@@ -133,11 +133,9 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     if (!isPendingLatLng && service) {\r\n-      console.log(\"step TU 12 FicheService getBenefits\");\r\n       getBenefits(true);\r\n-      console.log(\"step TU 13 FicheService getBenefits\");\r\n     }\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n \r\n@@ -171,9 +169,8 @@\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n         success: (response) => {\r\n-          console.log(\"Step 2 Getservice \",response.data);\r\n           setService(response.data || {});\r\n         },\r\n         catch: (error) => {\r\n           console.log(error);\r\n@@ -185,9 +182,8 @@\n   };\r\n \r\n   const getBenefits = (refresh = false) => {\r\n     const idService = slugIdService.split(\"-\").pop();\r\n-    console.log(\"Step 4 Fiche Service: \", idService);\r\n     if (idService) {\r\n       if (!placeIsSelected) {\r\n         msgErrors({\r\n           codePostal: true,\r\n@@ -235,19 +231,15 @@\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n-          console.log(\"STEP 6 Ficheservice \",cpParamsUrlService, idService);\r\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n-            \r\n               let results = response.data[\"hydra:member\"] || [];\r\n-              console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n-              if (service  && false) {\r\n-                console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n+              if (service) {\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n                   for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n@@ -267,18 +259,14 @@\n                   cpService.maxPrice = 0;\r\n                   setService(cpService);\r\n                 }\r\n               }\r\n-              console.log(\"STEP SERVICE 1-15 RESULT\",results);\r\n-              /*\r\n               if (sortBy[0] === \"price\") {\r\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n-              }*/\r\n-              console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n+              }\r\n               setBenefits(results);\r\n-              \r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n               console.log(error);\r\n@@ -399,16 +387,9 @@\n             <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n               <SearchIcon /> Rechercher une prestation\r\n             </div>\r\n           )}\r\n-          skfsldkdflk\r\n-          <ListePrestationFiche\r\n-            service={service}\r\n-            benefits={benefits}\r\n-            filter={filter}\r\n-            setFilter={setFilter}\r\n-            isPending={isPending}\r\n-          />\r\n+        \r\n         </Container>\r\n       </ContentPageStyle>\r\n     </Base>\r\n   );\r\n"
                },
                {
                    "date": 1711317959511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,402 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import { useSelector } from \"react-redux\";\r\n+import { Container } from \"react-bootstrap\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { useParams } from \"react-router-dom\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import {\r\n+  BackStyle,\r\n+  BlocFilterStyle,\r\n+  ContentPageStyle,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import { BackIcon, SearchIcon } from \"../../assets/styles/icons\";\r\n+import Breadcrumb from \"../../components/ui-elements/breadcrumb\";\r\n+import Base from \"../../theme/front/base\";\r\n+import Nouislider from \"nouislider-react\";\r\n+import \"nouislider/distribute/nouislider.css\";\r\n+import { RangePrice } from \"../../assets/styles/componentStyles\";\r\n+import ListePrestationFiche from \"../../components/front/listePrestationFiche\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import connector from \"../../connector\";\r\n+import InputAutoComplete from \"../../components/ui-elements/inputAutoComplete\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import SelectCat from \"../../components/categories/selectCat\";\r\n+import { sortObjects } from \"../../helper/functions\";\r\n+\r\n+export default function FicheService() {\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [click, setClick] = useState(false);\r\n+  const toggleFilter = () => setClick(!click);\r\n+  const toogleCloseFilter = () => setClick(false);\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  const [defaultCodePostal] = useState(localStorage.getItem(\"codePostal\"));\r\n+  const [defaultLatitude] = useState(\r\n+    parseFloat(localStorage.getItem(\"latitude\"))\r\n+  );\r\n+  const [defaultLongitude] = useState(\r\n+    parseFloat(localStorage.getItem(\"longitude\"))\r\n+  );\r\n+\r\n+  const { slugIdUniverse, slugIdService } = useParams();\r\n+  const [service, setService] = useState(false);\r\n+  const [benefits, setBenefits] = useState([]);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const [isPendingLatLng, setIsPendingLatLng] = useState(true);\r\n+  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n+  const [filter, setFilter] = useState({\r\n+    deliveryModeTypes: {\r\n+      label: \"Mode de délivrance\",\r\n+      name: \"deliveryModeTypes\",\r\n+      placeholder: \"Tous\",\r\n+      options: [],\r\n+      value: [],\r\n+      hideOptions: true,\r\n+    },\r\n+    codePostal: {\r\n+      name: \"codePostal\",\r\n+      type: \"text\",\r\n+      label: \"Où\",\r\n+      placeholder: \"Saisir un code postal\",\r\n+      value:\r\n+        defaultCodePostal && defaultLatitude && defaultLongitude\r\n+          ? defaultCodePostal\r\n+          : \"\",\r\n+      latitude:\r\n+        defaultCodePostal && defaultLatitude && defaultLongitude\r\n+          ? defaultLatitude\r\n+          : null,\r\n+      longitude:\r\n+        defaultCodePostal && defaultLatitude && defaultLongitude\r\n+          ? defaultLongitude\r\n+          : null,\r\n+      error: false,\r\n+      required: true,\r\n+      infoBulle: false,\r\n+    },\r\n+    price: {\r\n+      value: [-1, -1],\r\n+    },\r\n+    sortBy: {\r\n+      label: \"Trier par: \",\r\n+      placeholder: `${isTabletOrMobile ? \"trier par :\" : \"\"}`,\r\n+      options: [\r\n+        { value: \"distance_asc\", label: \"Distance\" },\r\n+        { value: \"rating_desc\", label: \"Meilleures notes\" },\r\n+        { value: \"price_asc\", label: \"Prix croissant\" },\r\n+        { value: \"price_desc\", label: \"Prix décroissant\" },\r\n+      ],\r\n+      value: `${isTabletOrMobile ? null : \"distance_asc\"}`,\r\n+    },\r\n+  });\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: `${activeUniverse ? activeUniverse.name : \"Univers\"}`,\r\n+      path: `/univers/${slugIdUniverse}`,\r\n+    },\r\n+    { name: service ? service.name : \"\", path: \"/\" },\r\n+  ];\r\n+\r\n+  useEffect(() => {\r\n+    if (universe.allUniverses) {\r\n+      const id = slugIdUniverse.split(\"-\").pop();\r\n+      if (id) {\r\n+        const universeData = universe.allUniverses.find(\r\n+          (u) => parseInt(u.id) === parseInt(id)\r\n+        );\r\n+        if (universeData) {\r\n+          setActiveUniverse(universeData);\r\n+        }\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [universe]);\r\n+\r\n+  useEffect(() => {\r\n+    getDeliveryModeTypes();\r\n+    getService();\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (!isPendingLatLng && service) {\r\n+      getBenefits(true);\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n+\r\n+  const getDeliveryModeTypes = () => {\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: endPoints.DELIVERY_MODE_TYPES,\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        const cpFilter = { ...filter };\r\n+        let options = [];\r\n+        for (let i = 0; i < arrayObj.length; i++) {\r\n+          options.push({ value: arrayObj[i].id, label: arrayObj[i].name });\r\n+        }\r\n+        cpFilter.deliveryModeTypes.options = options;\r\n+        setFilter(cpFilter);\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      },\r\n+    });\r\n+  };\r\n+\r\n+  const getService = () => {\r\n+    const idService = slugIdService.split(\"-\").pop();\r\n+    if (idService) {\r\n+      let condition = ``;\r\n+      if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+        condition += `?latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n+      }\r\n+      connector({\r\n+        method: \"get\",\r\n+        url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n+        success: (response) => {\r\n+          setService(response.data || {});\r\n+        },\r\n+        catch: (error) => {\r\n+          console.log(error);\r\n+        },\r\n+      });\r\n+    } else {\r\n+      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n+    }\r\n+  };\r\n+\r\n+  const getBenefits = (refresh = false) => {\r\n+    const idService = slugIdService.split(\"-\").pop();\r\n+    if (idService) {\r\n+      if (!placeIsSelected) {\r\n+        msgErrors({\r\n+          codePostal: true,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      if (isTabletOrMobile) {\r\n+        setClick(false);\r\n+      }\r\n+\r\n+      if (!isPending) {\r\n+        setIsPending(true);\r\n+        setFilter(clearErrors(filter));\r\n+\r\n+        const sortBy = filter.sortBy.value.split(\"_\");\r\n+\r\n+        let condition = ``;\r\n+        if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+          condition += `&latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n+        }\r\n+        if (sortBy[0] === \"distance\") {\r\n+          condition += `&order[distance]=asc`;\r\n+        } else if (sortBy[0] === \"price\") {\r\n+          condition += `&order[deliveryModes.price]=${sortBy[1]}`;\r\n+        }else if (sortBy[0] === \"rating\") {\r\n+          condition += `&order[rating]=${sortBy[1]}`;\r\n+        }\r\n+        if (filter.deliveryModeTypes.value.length) {\r\n+          for (let i = 0; i < filter.deliveryModeTypes.value.length; i++) {\r\n+            const row = filter.deliveryModeTypes.value[i];\r\n+            condition += `&deliveryModes.deliveryModeType.id[]=${row.value}`;\r\n+          }\r\n+        }\r\n+        if (\r\n+          filter.price.value[0] > -1 &&\r\n+          filter.price.value[1] > -1 &&\r\n+          (filter.price.value[0] !== service.minPrice ||\r\n+            filter.price.value[1] !== service.maxPrice)\r\n+        ) {\r\n+          condition += `&deliveryModes.price[between]=${filter.price.value[0]}..${filter.price.value[1]}`;\r\n+        }\r\n+\r\n+        const cpParamsUrlService = `${condition}`;\r\n+\r\n+        //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n+        if (refresh || paramsUrlService) {\r\n+          setParamsUrlService(cpParamsUrlService);\r\n+          connector({\r\n+            method: \"get\",\r\n+            url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n+            success: (response) => {\r\n+              let results = response.data[\"hydra:member\"] || [];\r\n+              //todo list est voir le min et max\r\n+              if (service) {\r\n+                const cpService = { ...service };\r\n+                let prices = [];\r\n+                for (var i = 0; i < results.length; i++) {\r\n+                  for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n+                    const obj = results[i].deliveryModes[j];\r\n+                    if (obj.price && parseFloat(obj.price) > 0) {\r\n+                      prices.push(parseFloat(obj.price));\r\n+                    }\r\n+                  }\r\n+                  results[i] = {...results[i], rating :  results[i].user.googleRating || 0};\r\n+                }\r\n+                if (prices.length) {\r\n+                  cpService.minPrice = Math.floor(Math.min(...prices));\r\n+                  cpService.maxPrice = Math.ceil(Math.max(...prices));\r\n+                  setService(cpService);\r\n+                }else{\r\n+                  cpService.minPrice = 0;\r\n+                  cpService.maxPrice = 0;\r\n+                  setService(cpService);\r\n+                }\r\n+              }\r\n+              if (sortBy[0] === \"price\") {\r\n+                results = sortObjects(results,'minPrice',sortBy[1]);\r\n+              }else if(sortBy[0] === \"rating\"){\r\n+                results = sortObjects(results,'rating',sortBy[1]);\r\n+              }\r\n+              setBenefits(results);\r\n+              setIsPending(false);\r\n+            },\r\n+            catch: (error) => {\r\n+              console.log(error);\r\n+              setIsPending(false);\r\n+            },\r\n+          });\r\n+        } else {\r\n+          setIsPending(false);\r\n+        }\r\n+      }\r\n+    } else {\r\n+      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n+    }\r\n+  };\r\n+\r\n+  const to = (value, index) => {\r\n+    value = Math.round(value);\r\n+    const cpFilter = { ...filter };\r\n+    if (index !== undefined && cpFilter.price.value[index] !== value) {\r\n+      cpFilter.price.value[index] = value;\r\n+      setFilter(cpFilter);\r\n+    }\r\n+    return value;\r\n+  };\r\n+\r\n+  const from = (value) => {\r\n+    return Number(value);\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    const cpFilter = { ...filter };\r\n+    if (e.notice !== undefined) NotificationManager.error(e.notice, \"\");\r\n+    if (e.codePostal !== undefined) {\r\n+      cpFilter.codePostal.error = e.codePostal;\r\n+      cpFilter.codePostal.infoBulle = e.codePostal;\r\n+    }\r\n+    setFilter(cpFilter);\r\n+  };\r\n+\r\n+  return (\r\n+    <Base className=\"fiche-service-page\">\r\n+      <ContentPageStyle>\r\n+        <Container>\r\n+          <BlocFilterStyle open={click}>\r\n+            {isTabletOrMobile && (\r\n+              <button\r\n+                className=\"menu-burger is-opened\"\r\n+                onClick={toogleCloseFilter}\r\n+              >\r\n+                <span></span>\r\n+                <span></span>\r\n+                <span></span>\r\n+              </button>\r\n+            )}\r\n+            <div className=\"item-filter\">\r\n+              <RangePrice>\r\n+                <label>Prix</label>\r\n+                {service &&\r\n+                service.minPrice &&\r\n+                service.maxPrice &&\r\n+                service.minPrice != service.maxPrice ? (\r\n+                  <Nouislider\r\n+                    range={{ min: service.minPrice, max: service.maxPrice }}\r\n+                    start={[service.minPrice, service.maxPrice]}\r\n+                    connect={true}\r\n+                    behaviour=\"tap\"\r\n+                    step={1}\r\n+                    tooltips={true}\r\n+                    format={{ to, from }}\r\n+                  />\r\n+                ) : (\r\n+                  \"Sur devis\"\r\n+                )}\r\n+              </RangePrice>\r\n+            </div>\r\n+            <div className=\"item-filter\">\r\n+              <SelectCat\r\n+                {...filter.deliveryModeTypes}\r\n+                onChangeCallback={(response) => {\r\n+                  const cpFilter = { ...filter };\r\n+                  cpFilter.deliveryModeTypes.value = response;\r\n+                  setFilter(cpFilter);\r\n+                }}\r\n+              />\r\n+            </div>\r\n+            <div className=\"item-filter\">\r\n+              <InputAutoComplete\r\n+                filter={filter}\r\n+                setFilter={setFilter}\r\n+                placeIsSelected={placeIsSelected}\r\n+                setPlaceIsSelected={setPlaceIsSelected}\r\n+                isPendingLatLng={isPendingLatLng}\r\n+                setIsPendingLatLng={setIsPendingLatLng}\r\n+              />\r\n+            </div>\r\n+            <div className=\"btn-filter-banner\">\r\n+              <button\r\n+                className=\"btn-search-filter\"\r\n+                onClick={(e) => {\r\n+                  getBenefits(false);\r\n+                }}\r\n+              >\r\n+                {isDesktopOrLaptop && (\r\n+                  <>\r\n+                    <SearchIcon />\r\n+                  </>\r\n+                )}\r\n+                {isTabletOrMobile && <>Recherche</>}\r\n+              </button>\r\n+            </div>\r\n+          </BlocFilterStyle>\r\n+          {isDesktopOrLaptop && <Breadcrumb crumbs={dataCrumbs} />}\r\n+          <BackStyle to={`/univers/${slugIdUniverse}`}>\r\n+            <BackIcon />\r\n+            <span>Retour à l'univers</span>\r\n+          </BackStyle>\r\n+          {isTabletOrMobile && (\r\n+            <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n+              <SearchIcon /> Rechercher une prestation\r\n+            </div>\r\n+          )}\r\n+          <ListePrestationFiche\r\n+            service={service}\r\n+            benefits={benefits}\r\n+            filter={filter}\r\n+            setFilter={setFilter}\r\n+            isPending={isPending}\r\n+          />\r\n+        </Container>\r\n+      </ContentPageStyle>\r\n+    </Base>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1711320099703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   });\r\n   const [click, setClick] = useState(false);\r\n   const toggleFilter = () => setClick(!click);\r\n   const toogleCloseFilter = () => setClick(false);\r\n-\r\n+  // console.log(\"TU 1 Ficheservice\");\r\n   useEffect(() => {\r\n     if (click) {\r\n       document.body.classList.add(\"menu-is-show\");\r\n     } else {\r\n@@ -133,9 +133,11 @@\n   }, []);\r\n \r\n   useEffect(() => {\r\n     if (!isPendingLatLng && service) {\r\n+      // console.log(\"step TU 12 FicheService getBenefits\");\r\n       getBenefits(true);\r\n+      // console.log(\"step TU 13 FicheService getBenefits\");\r\n     }\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n \r\n@@ -153,9 +155,9 @@\n         cpFilter.deliveryModeTypes.options = options;\r\n         setFilter(cpFilter);\r\n       },\r\n       catch: (error) => {\r\n-        console.log(error);\r\n+        // console.log(error);\r\n       },\r\n     });\r\n   };\r\n \r\n@@ -169,12 +171,13 @@\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n         success: (response) => {\r\n+          // console.log(\"Step 2 Getservice \",response.data);\r\n           setService(response.data || {});\r\n         },\r\n         catch: (error) => {\r\n-          console.log(error);\r\n+          // console.log(error);\r\n         },\r\n       });\r\n     } else {\r\n       NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n@@ -182,8 +185,9 @@\n   };\r\n \r\n   const getBenefits = (refresh = false) => {\r\n     const idService = slugIdService.split(\"-\").pop();\r\n+    // console.log(\"Step 4 Fiche Service: \", idService);\r\n     if (idService) {\r\n       if (!placeIsSelected) {\r\n         msgErrors({\r\n           codePostal: true,\r\n@@ -231,15 +235,19 @@\n \r\n         //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n         if (refresh || paramsUrlService) {\r\n           setParamsUrlService(cpParamsUrlService);\r\n+          // console.log(\"STEP 6 Ficheservice \",cpParamsUrlService, idService);\r\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n+            \r\n               let results = response.data[\"hydra:member\"] || [];\r\n+              // console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n-              if (service) {\r\n+              if (service  && false) {\r\n+                // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n                   for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n@@ -259,18 +267,22 @@\n                   cpService.maxPrice = 0;\r\n                   setService(cpService);\r\n                 }\r\n               }\r\n+              // console.log(\"STEP SERVICE 1-15 RESULT\",results);\r\n+              /*\r\n               if (sortBy[0] === \"price\") {\r\n                 results = sortObjects(results,'minPrice',sortBy[1]);\r\n               }else if(sortBy[0] === \"rating\"){\r\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n-              }\r\n+              }*/\r\n+              // console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n               setBenefits(results);\r\n+              \r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n-              console.log(error);\r\n+              // console.log(error);\r\n               setIsPending(false);\r\n             },\r\n           });\r\n         } else {\r\n@@ -387,8 +399,9 @@\n             <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n               <SearchIcon /> Rechercher une prestation\r\n             </div>\r\n           )}\r\n+          skfsldkdflk\r\n           <ListePrestationFiche\r\n             service={service}\r\n             benefits={benefits}\r\n             filter={filter}\r\n@@ -399,400 +412,4 @@\n       </ContentPageStyle>\r\n     </Base>\r\n   );\r\n }\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { useSelector } from \"react-redux\";\r\n-import { Container } from \"react-bootstrap\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { useParams } from \"react-router-dom\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import {\r\n-  BackStyle,\r\n-  BlocFilterStyle,\r\n-  ContentPageStyle,\r\n-} from \"../../assets/styles/frontGlobalStyle\";\r\n-import { BackIcon, SearchIcon } from \"../../assets/styles/icons\";\r\n-import Breadcrumb from \"../../components/ui-elements/breadcrumb\";\r\n-import Base from \"../../theme/front/base\";\r\n-import Nouislider from \"nouislider-react\";\r\n-import \"nouislider/distribute/nouislider.css\";\r\n-import { RangePrice } from \"../../assets/styles/componentStyles\";\r\n-import ListePrestationFiche from \"../../components/front/listePrestationFiche\";\r\n-import endPoints from \"../../config/endPoints\";\r\n-import connector from \"../../connector\";\r\n-import InputAutoComplete from \"../../components/ui-elements/inputAutoComplete\";\r\n-import { clearErrors } from \"../../helper/form\";\r\n-import SelectCat from \"../../components/categories/selectCat\";\r\n-import { sortObjects } from \"../../helper/functions\";\r\n-\r\n-export default function FicheService() {\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [click, setClick] = useState(false);\r\n-  const toggleFilter = () => setClick(!click);\r\n-  const toogleCloseFilter = () => setClick(false);\r\n-\r\n-  useEffect(() => {\r\n-    if (click) {\r\n-      document.body.classList.add(\"menu-is-show\");\r\n-    } else {\r\n-      document.body.classList.remove(\"menu-is-show\");\r\n-    }\r\n-  }, [click]);\r\n-\r\n-  const [defaultCodePostal] = useState(localStorage.getItem(\"codePostal\"));\r\n-  const [defaultLatitude] = useState(\r\n-    parseFloat(localStorage.getItem(\"latitude\"))\r\n-  );\r\n-  const [defaultLongitude] = useState(\r\n-    parseFloat(localStorage.getItem(\"longitude\"))\r\n-  );\r\n-\r\n-  const { slugIdUniverse, slugIdService } = useParams();\r\n-  const [service, setService] = useState(false);\r\n-  const [benefits, setBenefits] = useState([]);\r\n-  const [activeUniverse, setActiveUniverse] = useState(false);\r\n-  const universe = useSelector((state) => state.universe);\r\n-  const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n-  const [isPending, setIsPending] = useState(false);\r\n-  const [isPendingLatLng, setIsPendingLatLng] = useState(true);\r\n-  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n-  const [filter, setFilter] = useState({\r\n-    deliveryModeTypes: {\r\n-      label: \"Mode de délivrance\",\r\n-      name: \"deliveryModeTypes\",\r\n-      placeholder: \"Tous\",\r\n-      options: [],\r\n-      value: [],\r\n-      hideOptions: true,\r\n-    },\r\n-    codePostal: {\r\n-      name: \"codePostal\",\r\n-      type: \"text\",\r\n-      label: \"Où\",\r\n-      placeholder: \"Saisir un code postal\",\r\n-      value:\r\n-        defaultCodePostal && defaultLatitude && defaultLongitude\r\n-          ? defaultCodePostal\r\n-          : \"\",\r\n-      latitude:\r\n-        defaultCodePostal && defaultLatitude && defaultLongitude\r\n-          ? defaultLatitude\r\n-          : null,\r\n-      longitude:\r\n-        defaultCodePostal && defaultLatitude && defaultLongitude\r\n-          ? defaultLongitude\r\n-          : null,\r\n-      error: false,\r\n-      required: true,\r\n-      infoBulle: false,\r\n-    },\r\n-    price: {\r\n-      value: [-1, -1],\r\n-    },\r\n-    sortBy: {\r\n-      label: \"Trier par: \",\r\n-      placeholder: `${isTabletOrMobile ? \"trier par :\" : \"\"}`,\r\n-      options: [\r\n-        { value: \"distance_asc\", label: \"Distance\" },\r\n-        { value: \"rating_desc\", label: \"Meilleures notes\" },\r\n-        { value: \"price_asc\", label: \"Prix croissant\" },\r\n-        { value: \"price_desc\", label: \"Prix décroissant\" },\r\n-      ],\r\n-      value: `${isTabletOrMobile ? null : \"distance_asc\"}`,\r\n-    },\r\n-  });\r\n-  const dataCrumbs = [\r\n-    { name: \"Accueil\", path: \"/\" },\r\n-    {\r\n-      name: `${activeUniverse ? activeUniverse.name : \"Univers\"}`,\r\n-      path: `/univers/${slugIdUniverse}`,\r\n-    },\r\n-    { name: service ? service.name : \"\", path: \"/\" },\r\n-  ];\r\n-\r\n-  useEffect(() => {\r\n-    if (universe.allUniverses) {\r\n-      const id = slugIdUniverse.split(\"-\").pop();\r\n-      if (id) {\r\n-        const universeData = universe.allUniverses.find(\r\n-          (u) => parseInt(u.id) === parseInt(id)\r\n-        );\r\n-        if (universeData) {\r\n-          setActiveUniverse(universeData);\r\n-        }\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [universe]);\r\n-\r\n-  useEffect(() => {\r\n-    getDeliveryModeTypes();\r\n-    getService();\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (!isPendingLatLng && service) {\r\n-      getBenefits(true);\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n-\r\n-  const getDeliveryModeTypes = () => {\r\n-    connector({\r\n-      method: \"get\",\r\n-      url: endPoints.DELIVERY_MODE_TYPES,\r\n-      success: (response) => {\r\n-        const arrayObj = response.data[\"hydra:member\"] || [];\r\n-        const cpFilter = { ...filter };\r\n-        let options = [];\r\n-        for (let i = 0; i < arrayObj.length; i++) {\r\n-          options.push({ value: arrayObj[i].id, label: arrayObj[i].name });\r\n-        }\r\n-        cpFilter.deliveryModeTypes.options = options;\r\n-        setFilter(cpFilter);\r\n-      },\r\n-      catch: (error) => {\r\n-        console.log(error);\r\n-      },\r\n-    });\r\n-  };\r\n-\r\n-  const getService = () => {\r\n-    const idService = slugIdService.split(\"-\").pop();\r\n-    if (idService) {\r\n-      let condition = ``;\r\n-      if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-        condition += `?latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n-      }\r\n-      connector({\r\n-        method: \"get\",\r\n-        url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n-        success: (response) => {\r\n-          setService(response.data || {});\r\n-        },\r\n-        catch: (error) => {\r\n-          console.log(error);\r\n-        },\r\n-      });\r\n-    } else {\r\n-      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n-    }\r\n-  };\r\n-\r\n-  const getBenefits = (refresh = false) => {\r\n-    const idService = slugIdService.split(\"-\").pop();\r\n-    if (idService) {\r\n-      if (!placeIsSelected) {\r\n-        msgErrors({\r\n-          codePostal: true,\r\n-        });\r\n-        return;\r\n-      }\r\n-\r\n-      if (isTabletOrMobile) {\r\n-        setClick(false);\r\n-      }\r\n-\r\n-      if (!isPending) {\r\n-        setIsPending(true);\r\n-        setFilter(clearErrors(filter));\r\n-\r\n-        const sortBy = filter.sortBy.value.split(\"_\");\r\n-\r\n-        let condition = ``;\r\n-        if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-          condition += `&latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n-        }\r\n-        if (sortBy[0] === \"distance\") {\r\n-          condition += `&order[distance]=asc`;\r\n-        } else if (sortBy[0] === \"price\") {\r\n-          condition += `&order[deliveryModes.price]=${sortBy[1]}`;\r\n-        }else if (sortBy[0] === \"rating\") {\r\n-          condition += `&order[rating]=${sortBy[1]}`;\r\n-        }\r\n-        if (filter.deliveryModeTypes.value.length) {\r\n-          for (let i = 0; i < filter.deliveryModeTypes.value.length; i++) {\r\n-            const row = filter.deliveryModeTypes.value[i];\r\n-            condition += `&deliveryModes.deliveryModeType.id[]=${row.value}`;\r\n-          }\r\n-        }\r\n-        if (\r\n-          filter.price.value[0] > -1 &&\r\n-          filter.price.value[1] > -1 &&\r\n-          (filter.price.value[0] !== service.minPrice ||\r\n-            filter.price.value[1] !== service.maxPrice)\r\n-        ) {\r\n-          condition += `&deliveryModes.price[between]=${filter.price.value[0]}..${filter.price.value[1]}`;\r\n-        }\r\n-\r\n-        const cpParamsUrlService = `${condition}`;\r\n-\r\n-        //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n-        if (refresh || paramsUrlService) {\r\n-          setParamsUrlService(cpParamsUrlService);\r\n-          connector({\r\n-            method: \"get\",\r\n-            url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n-            success: (response) => {\r\n-              let results = response.data[\"hydra:member\"] || [];\r\n-              //todo list est voir le min et max\r\n-              if (service) {\r\n-                const cpService = { ...service };\r\n-                let prices = [];\r\n-                for (var i = 0; i < results.length; i++) {\r\n-                  for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n-                    const obj = results[i].deliveryModes[j];\r\n-                    if (obj.price && parseFloat(obj.price) > 0) {\r\n-                      prices.push(parseFloat(obj.price));\r\n-                    }\r\n-                  }\r\n-                  results[i] = {...results[i], rating :  results[i].user.googleRating || 0};\r\n-                }\r\n-                if (prices.length) {\r\n-                  cpService.minPrice = Math.floor(Math.min(...prices));\r\n-                  cpService.maxPrice = Math.ceil(Math.max(...prices));\r\n-                  setService(cpService);\r\n-                }else{\r\n-                  cpService.minPrice = 0;\r\n-                  cpService.maxPrice = 0;\r\n-                  setService(cpService);\r\n-                }\r\n-              }\r\n-              if (sortBy[0] === \"price\") {\r\n-                results = sortObjects(results,'minPrice',sortBy[1]);\r\n-              }else if(sortBy[0] === \"rating\"){\r\n-                results = sortObjects(results,'rating',sortBy[1]);\r\n-              }\r\n-              setBenefits(results);\r\n-              setIsPending(false);\r\n-            },\r\n-            catch: (error) => {\r\n-              console.log(error);\r\n-              setIsPending(false);\r\n-            },\r\n-          });\r\n-        } else {\r\n-          setIsPending(false);\r\n-        }\r\n-      }\r\n-    } else {\r\n-      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n-    }\r\n-  };\r\n-\r\n-  const to = (value, index) => {\r\n-    value = Math.round(value);\r\n-    const cpFilter = { ...filter };\r\n-    if (index !== undefined && cpFilter.price.value[index] !== value) {\r\n-      cpFilter.price.value[index] = value;\r\n-      setFilter(cpFilter);\r\n-    }\r\n-    return value;\r\n-  };\r\n-\r\n-  const from = (value) => {\r\n-    return Number(value);\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    const cpFilter = { ...filter };\r\n-    if (e.notice !== undefined) NotificationManager.error(e.notice, \"\");\r\n-    if (e.codePostal !== undefined) {\r\n-      cpFilter.codePostal.error = e.codePostal;\r\n-      cpFilter.codePostal.infoBulle = e.codePostal;\r\n-    }\r\n-    setFilter(cpFilter);\r\n-  };\r\n-\r\n-  return (\r\n-    <Base className=\"fiche-service-page\">\r\n-      <ContentPageStyle>\r\n-        <Container>\r\n-          <BlocFilterStyle open={click}>\r\n-            {isTabletOrMobile && (\r\n-              <button\r\n-                className=\"menu-burger is-opened\"\r\n-                onClick={toogleCloseFilter}\r\n-              >\r\n-                <span></span>\r\n-                <span></span>\r\n-                <span></span>\r\n-              </button>\r\n-            )}\r\n-            <div className=\"item-filter\">\r\n-              <RangePrice>\r\n-                <label>Prix</label>\r\n-                {service &&\r\n-                service.minPrice &&\r\n-                service.maxPrice &&\r\n-                service.minPrice != service.maxPrice ? (\r\n-                  <Nouislider\r\n-                    range={{ min: service.minPrice, max: service.maxPrice }}\r\n-                    start={[service.minPrice, service.maxPrice]}\r\n-                    connect={true}\r\n-                    behaviour=\"tap\"\r\n-                    step={1}\r\n-                    tooltips={true}\r\n-                    format={{ to, from }}\r\n-                  />\r\n-                ) : (\r\n-                  \"Sur devis\"\r\n-                )}\r\n-              </RangePrice>\r\n-            </div>\r\n-            <div className=\"item-filter\">\r\n-              <SelectCat\r\n-                {...filter.deliveryModeTypes}\r\n-                onChangeCallback={(response) => {\r\n-                  const cpFilter = { ...filter };\r\n-                  cpFilter.deliveryModeTypes.value = response;\r\n-                  setFilter(cpFilter);\r\n-                }}\r\n-              />\r\n-            </div>\r\n-            <div className=\"item-filter\">\r\n-              <InputAutoComplete\r\n-                filter={filter}\r\n-                setFilter={setFilter}\r\n-                placeIsSelected={placeIsSelected}\r\n-                setPlaceIsSelected={setPlaceIsSelected}\r\n-                isPendingLatLng={isPendingLatLng}\r\n-                setIsPendingLatLng={setIsPendingLatLng}\r\n-              />\r\n-            </div>\r\n-            <div className=\"btn-filter-banner\">\r\n-              <button\r\n-                className=\"btn-search-filter\"\r\n-                onClick={(e) => {\r\n-                  getBenefits(false);\r\n-                }}\r\n-              >\r\n-                {isDesktopOrLaptop && (\r\n-                  <>\r\n-                    <SearchIcon />\r\n-                  </>\r\n-                )}\r\n-                {isTabletOrMobile && <>Recherche</>}\r\n-              </button>\r\n-            </div>\r\n-          </BlocFilterStyle>\r\n-          {isDesktopOrLaptop && <Breadcrumb crumbs={dataCrumbs} />}\r\n-          <BackStyle to={`/univers/${slugIdUniverse}`}>\r\n-            <BackIcon />\r\n-            <span>Retour à l'univers</span>\r\n-          </BackStyle>\r\n-          {isTabletOrMobile && (\r\n-            <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n-              <SearchIcon /> Rechercher une prestation\r\n-            </div>\r\n-          )}\r\n-        \r\n-        </Container>\r\n-      </ContentPageStyle>\r\n-    </Base>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1711530841169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -399,9 +399,9 @@\n             <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n               <SearchIcon /> Rechercher une prestation\r\n             </div>\r\n           )}\r\n-          skfsldkdflk\r\n+      \r\n           <ListePrestationFiche\r\n             service={service}\r\n             benefits={benefits}\r\n             filter={filter}\r\n"
                },
                {
                    "date": 1711743976083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,8 +242,9 @@\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n             \r\n               let results = response.data[\"hydra:member\"] || [];\r\n+              console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n               // console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n               if (service  && false) {\r\n                 // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n"
                },
                {
                    "date": 1711744176757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n               let results = response.data[\"hydra:member\"] || [];\r\n               console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n               // console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n-              if (service  && false) {\r\n+              if (service ) {\r\n                 // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n"
                },
                {
                    "date": 1711744220799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,9 +245,9 @@\n               let results = response.data[\"hydra:member\"] || [];\r\n               console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n               // console.log(\"STEP SERVICE -1 RESULT\",results);\r\n               //todo list est voir le min et max\r\n-              if (service ) {\r\n+              if (service  && false) {\r\n                 // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n"
                },
                {
                    "date": 1711744341551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,9 @@\n             success: (response) => {\r\n             \r\n               let results = response.data[\"hydra:member\"] || [];\r\n               console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n-              // console.log(\"STEP SERVICE -1 RESULT\",results);\r\n+              console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", cpParamsUrlService);\r\n               //todo list est voir le min et max\r\n               if (service  && false) {\r\n                 // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n"
                },
                {
                    "date": 1711744484793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,10 +242,10 @@\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n             \r\n               let results = response.data[\"hydra:member\"] || [];\r\n-              console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n-              console.log(\"FAS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", cpParamsUrlService);\r\n+              console.log(\"FS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n+              console.log(\"FS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", cpParamsUrlService);\r\n               //todo list est voir le min et max\r\n               if (service  && false) {\r\n                 // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n"
                },
                {
                    "date": 1714784075920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n         if (sortBy[0] === \"distance\") {\r\n           condition += `&order[distance]=asc`;\r\n         } else if (sortBy[0] === \"price\") {\r\n           condition += `&order[deliveryModes.price]=${sortBy[1]}`;\r\n-        }else if (sortBy[0] === \"rating\") {\r\n+        } else if (sortBy[0] === \"rating\") {\r\n           condition += `&order[rating]=${sortBy[1]}`;\r\n         }\r\n         if (filter.deliveryModeTypes.value.length) {\r\n           for (let i = 0; i < filter.deliveryModeTypes.value.length; i++) {\r\n@@ -240,14 +240,14 @@\n           connector({\r\n             method: \"get\",\r\n             url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n             success: (response) => {\r\n-            \r\n+\r\n               let results = response.data[\"hydra:member\"] || [];\r\n-              console.log(\"FS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n-              console.log(\"FS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", cpParamsUrlService);\r\n+              // console.log(\"FS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", results);\r\n+              // console.log(\"FS Step:1.01 ANONYMOUS_BENEFITS_SERVICE\", cpParamsUrlService);\r\n               //todo list est voir le min et max\r\n-              if (service  && false) {\r\n+              if (service && false) {\r\n                 // console.log(\"STEP SERVICE 1-11 RESULT\",service);\r\n                 const cpService = { ...service };\r\n                 let prices = [];\r\n                 for (var i = 0; i < results.length; i++) {\r\n@@ -256,15 +256,15 @@\n                     if (obj.price && parseFloat(obj.price) > 0) {\r\n                       prices.push(parseFloat(obj.price));\r\n                     }\r\n                   }\r\n-                  results[i] = {...results[i], rating :  results[i].user.googleRating || 0};\r\n+                  results[i] = { ...results[i], rating: results[i].user.googleRating || 0 };\r\n                 }\r\n                 if (prices.length) {\r\n                   cpService.minPrice = Math.floor(Math.min(...prices));\r\n                   cpService.maxPrice = Math.ceil(Math.max(...prices));\r\n                   setService(cpService);\r\n-                }else{\r\n+                } else {\r\n                   cpService.minPrice = 0;\r\n                   cpService.maxPrice = 0;\r\n                   setService(cpService);\r\n                 }\r\n@@ -277,9 +277,9 @@\n                 results = sortObjects(results,'rating',sortBy[1]);\r\n               }*/\r\n               // console.log(\"STEP SERVICE 1-16 RESULT\",results);\r\n               setBenefits(results);\r\n-              \r\n+\r\n               setIsPending(false);\r\n             },\r\n             catch: (error) => {\r\n               // console.log(error);\r\n@@ -337,11 +337,11 @@\n             <div className=\"item-filter\">\r\n               <RangePrice>\r\n                 <label>Prix</label>\r\n                 {service &&\r\n-                service.minPrice &&\r\n-                service.maxPrice &&\r\n-                service.minPrice != service.maxPrice ? (\r\n+                  service.minPrice &&\r\n+                  service.maxPrice &&\r\n+                  service.minPrice != service.maxPrice ? (\r\n                   <Nouislider\r\n                     range={{ min: service.minPrice, max: service.maxPrice }}\r\n                     start={[service.minPrice, service.maxPrice]}\r\n                     connect={true}\r\n@@ -400,9 +400,9 @@\n             <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n               <SearchIcon /> Rechercher une prestation\r\n             </div>\r\n           )}\r\n-      \r\n+\r\n           <ListePrestationFiche\r\n             service={service}\r\n             benefits={benefits}\r\n             filter={filter}\r\n"
                },
                {
                    "date": 1716462089359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n import SelectCat from \"../../components/categories/selectCat\";\r\n import { sortObjects } from \"../../helper/functions\";\r\n \r\n export default function FicheService() {\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 793px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n   const [click, setClick] = useState(false);\r\n"
                },
                {
                    "date": 1716462480158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n import SelectCat from \"../../components/categories/selectCat\";\r\n import { sortObjects } from \"../../helper/functions\";\r\n \r\n export default function FicheService() {\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 793px)\" });\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 593px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n   const [click, setClick] = useState(false);\r\n"
                },
                {
                    "date": 1718095001420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n import SelectCat from \"../../components/categories/selectCat\";\r\n import { sortObjects } from \"../../helper/functions\";\r\n \r\n export default function FicheService() {\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 593px)\" });\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 013px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n   const [click, setClick] = useState(false);\r\n"
                }
            ],
            "date": 1711303680094,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport {\r\n  BackStyle,\r\n  BlocFilterStyle,\r\n  ContentPageStyle,\r\n} from \"../../assets/styles/frontGlobalStyle\";\r\nimport { BackIcon, SearchIcon } from \"../../assets/styles/icons\";\r\nimport Breadcrumb from \"../../components/ui-elements/breadcrumb\";\r\nimport Base from \"../../theme/front/base\";\r\nimport Nouislider from \"nouislider-react\";\r\nimport \"nouislider/distribute/nouislider.css\";\r\nimport { RangePrice } from \"../../assets/styles/componentStyles\";\r\nimport ListePrestationFiche from \"../../components/front/listePrestationFiche\";\r\nimport endPoints from \"../../config/endPoints\";\r\nimport connector from \"../../connector\";\r\nimport InputAutoComplete from \"../../components/ui-elements/inputAutoComplete\";\r\nimport { clearErrors } from \"../../helper/form\";\r\nimport SelectCat from \"../../components/categories/selectCat\";\r\nimport { sortObjects } from \"../../helper/functions\";\r\n\r\nexport default function FicheService() {\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n  const isDesktopOrLaptop = useMediaQuery({\r\n    query: \"(min-width: 994px)\",\r\n  });\r\n  const [click, setClick] = useState(false);\r\n  const toggleFilter = () => setClick(!click);\r\n  const toogleCloseFilter = () => setClick(false);\r\n\r\n  useEffect(() => {\r\n    if (click) {\r\n      document.body.classList.add(\"menu-is-show\");\r\n    } else {\r\n      document.body.classList.remove(\"menu-is-show\");\r\n    }\r\n  }, [click]);\r\n\r\n  const [defaultCodePostal] = useState(localStorage.getItem(\"codePostal\"));\r\n  const [defaultLatitude] = useState(\r\n    parseFloat(localStorage.getItem(\"latitude\"))\r\n  );\r\n  const [defaultLongitude] = useState(\r\n    parseFloat(localStorage.getItem(\"longitude\"))\r\n  );\r\n\r\n  const { slugIdUniverse, slugIdService } = useParams();\r\n  const [service, setService] = useState(false);\r\n  const [benefits, setBenefits] = useState([]);\r\n  const [activeUniverse, setActiveUniverse] = useState(false);\r\n  const universe = useSelector((state) => state.universe);\r\n  const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [isPendingLatLng, setIsPendingLatLng] = useState(true);\r\n  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n  const [filter, setFilter] = useState({\r\n    deliveryModeTypes: {\r\n      label: \"Mode de délivrance\",\r\n      name: \"deliveryModeTypes\",\r\n      placeholder: \"Tous\",\r\n      options: [],\r\n      value: [],\r\n      hideOptions: true,\r\n    },\r\n    codePostal: {\r\n      name: \"codePostal\",\r\n      type: \"text\",\r\n      label: \"Où\",\r\n      placeholder: \"Saisir un code postal\",\r\n      value:\r\n        defaultCodePostal && defaultLatitude && defaultLongitude\r\n          ? defaultCodePostal\r\n          : \"\",\r\n      latitude:\r\n        defaultCodePostal && defaultLatitude && defaultLongitude\r\n          ? defaultLatitude\r\n          : null,\r\n      longitude:\r\n        defaultCodePostal && defaultLatitude && defaultLongitude\r\n          ? defaultLongitude\r\n          : null,\r\n      error: false,\r\n      required: true,\r\n      infoBulle: false,\r\n    },\r\n    price: {\r\n      value: [-1, -1],\r\n    },\r\n    sortBy: {\r\n      label: \"Trier par: \",\r\n      placeholder: `${isTabletOrMobile ? \"trier par :\" : \"\"}`,\r\n      options: [\r\n        { value: \"distance_asc\", label: \"Distance\" },\r\n        { value: \"rating_desc\", label: \"Meilleures notes\" },\r\n        { value: \"price_asc\", label: \"Prix croissant\" },\r\n        { value: \"price_desc\", label: \"Prix décroissant\" },\r\n      ],\r\n      value: `${isTabletOrMobile ? null : \"distance_asc\"}`,\r\n    },\r\n  });\r\n  const dataCrumbs = [\r\n    { name: \"Accueil\", path: \"/\" },\r\n    {\r\n      name: `${activeUniverse ? activeUniverse.name : \"Univers\"}`,\r\n      path: `/univers/${slugIdUniverse}`,\r\n    },\r\n    { name: service ? service.name : \"\", path: \"/\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (universe.allUniverses) {\r\n      const id = slugIdUniverse.split(\"-\").pop();\r\n      if (id) {\r\n        const universeData = universe.allUniverses.find(\r\n          (u) => parseInt(u.id) === parseInt(id)\r\n        );\r\n        if (universeData) {\r\n          setActiveUniverse(universeData);\r\n        }\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [universe]);\r\n\r\n  useEffect(() => {\r\n    getDeliveryModeTypes();\r\n    getService();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isPendingLatLng && service) {\r\n      getBenefits(true);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n\r\n  const getDeliveryModeTypes = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: endPoints.DELIVERY_MODE_TYPES,\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        let options = [];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          options.push({ value: arrayObj[i].id, label: arrayObj[i].name });\r\n        }\r\n        cpFilter.deliveryModeTypes.options = options;\r\n        setFilter(cpFilter);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getService = () => {\r\n    const idService = slugIdService.split(\"-\").pop();\r\n    if (idService) {\r\n      let condition = ``;\r\n      if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n        condition += `?latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n      }\r\n      connector({\r\n        method: \"get\",\r\n        url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n        success: (response) => {\r\n          setService(response.data || {});\r\n        },\r\n        catch: (error) => {\r\n          console.log(error);\r\n        },\r\n      });\r\n    } else {\r\n      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n    }\r\n  };\r\n\r\n  const getBenefits = (refresh = false) => {\r\n    const idService = slugIdService.split(\"-\").pop();\r\n    if (idService) {\r\n      if (!placeIsSelected) {\r\n        msgErrors({\r\n          codePostal: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (isTabletOrMobile) {\r\n        setClick(false);\r\n      }\r\n\r\n      if (!isPending) {\r\n        setIsPending(true);\r\n        setFilter(clearErrors(filter));\r\n\r\n        const sortBy = filter.sortBy.value.split(\"_\");\r\n\r\n        let condition = ``;\r\n        if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n          condition += `&latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n        }\r\n        if (sortBy[0] === \"distance\") {\r\n          condition += `&order[distance]=asc`;\r\n        } else if (sortBy[0] === \"price\") {\r\n          condition += `&order[deliveryModes.price]=${sortBy[1]}`;\r\n        }else if (sortBy[0] === \"rating\") {\r\n          condition += `&order[rating]=${sortBy[1]}`;\r\n        }\r\n        if (filter.deliveryModeTypes.value.length) {\r\n          for (let i = 0; i < filter.deliveryModeTypes.value.length; i++) {\r\n            const row = filter.deliveryModeTypes.value[i];\r\n            condition += `&deliveryModes.deliveryModeType.id[]=${row.value}`;\r\n          }\r\n        }\r\n        if (\r\n          filter.price.value[0] > -1 &&\r\n          filter.price.value[1] > -1 &&\r\n          (filter.price.value[0] !== service.minPrice ||\r\n            filter.price.value[1] !== service.maxPrice)\r\n        ) {\r\n          condition += `&deliveryModes.price[between]=${filter.price.value[0]}..${filter.price.value[1]}`;\r\n        }\r\n\r\n        const cpParamsUrlService = `${condition}`;\r\n\r\n        //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n        if (refresh || paramsUrlService) {\r\n          setParamsUrlService(cpParamsUrlService);\r\n          connector({\r\n            method: \"get\",\r\n            url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n            success: (response) => {\r\n              let results = response.data[\"hydra:member\"] || [];\r\n              //todo list est voir le min et max\r\n              if (service) {\r\n                const cpService = { ...service };\r\n                let prices = [];\r\n                for (var i = 0; i < results.length; i++) {\r\n                  for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n                    const obj = results[i].deliveryModes[j];\r\n                    if (obj.price && parseFloat(obj.price) > 0) {\r\n                      prices.push(parseFloat(obj.price));\r\n                    }\r\n                  }\r\n                  results[i] = {...results[i], rating :  results[i].user.googleRating || 0};\r\n                }\r\n                if (prices.length) {\r\n                  cpService.minPrice = Math.floor(Math.min(...prices));\r\n                  cpService.maxPrice = Math.ceil(Math.max(...prices));\r\n                  setService(cpService);\r\n                }else{\r\n                  cpService.minPrice = 0;\r\n                  cpService.maxPrice = 0;\r\n                  setService(cpService);\r\n                }\r\n              }\r\n              if (sortBy[0] === \"price\") {\r\n                results = sortObjects(results,'minPrice',sortBy[1]);\r\n              }else if(sortBy[0] === \"rating\"){\r\n                results = sortObjects(results,'rating',sortBy[1]);\r\n              }\r\n              console.log(\"STEP SERVICE RESULT\");\r\n              setBenefits(results);\r\n              setIsPending(false);\r\n            },\r\n            catch: (error) => {\r\n              console.log(error);\r\n              setIsPending(false);\r\n            },\r\n          });\r\n        } else {\r\n          setIsPending(false);\r\n        }\r\n      }\r\n    } else {\r\n      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n    }\r\n  };\r\n\r\n  const to = (value, index) => {\r\n    value = Math.round(value);\r\n    const cpFilter = { ...filter };\r\n    if (index !== undefined && cpFilter.price.value[index] !== value) {\r\n      cpFilter.price.value[index] = value;\r\n      setFilter(cpFilter);\r\n    }\r\n    return value;\r\n  };\r\n\r\n  const from = (value) => {\r\n    return Number(value);\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    const cpFilter = { ...filter };\r\n    if (e.notice !== undefined) NotificationManager.error(e.notice, \"\");\r\n    if (e.codePostal !== undefined) {\r\n      cpFilter.codePostal.error = e.codePostal;\r\n      cpFilter.codePostal.infoBulle = e.codePostal;\r\n    }\r\n    setFilter(cpFilter);\r\n  };\r\n\r\n  return (\r\n    <Base className=\"fiche-service-page\">\r\n      <ContentPageStyle>\r\n        <Container>\r\n          <BlocFilterStyle open={click}>\r\n            {isTabletOrMobile && (\r\n              <button\r\n                className=\"menu-burger is-opened\"\r\n                onClick={toogleCloseFilter}\r\n              >\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </button>\r\n            )}\r\n            <div className=\"item-filter\">\r\n              <RangePrice>\r\n                <label>Prix</label>\r\n                {service &&\r\n                service.minPrice &&\r\n                service.maxPrice &&\r\n                service.minPrice != service.maxPrice ? (\r\n                  <Nouislider\r\n                    range={{ min: service.minPrice, max: service.maxPrice }}\r\n                    start={[service.minPrice, service.maxPrice]}\r\n                    connect={true}\r\n                    behaviour=\"tap\"\r\n                    step={1}\r\n                    tooltips={true}\r\n                    format={{ to, from }}\r\n                  />\r\n                ) : (\r\n                  \"Sur devis\"\r\n                )}\r\n              </RangePrice>\r\n            </div>\r\n            <div className=\"item-filter\">\r\n              <SelectCat\r\n                {...filter.deliveryModeTypes}\r\n                onChangeCallback={(response) => {\r\n                  const cpFilter = { ...filter };\r\n                  cpFilter.deliveryModeTypes.value = response;\r\n                  setFilter(cpFilter);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"item-filter\">\r\n              <InputAutoComplete\r\n                filter={filter}\r\n                setFilter={setFilter}\r\n                placeIsSelected={placeIsSelected}\r\n                setPlaceIsSelected={setPlaceIsSelected}\r\n                isPendingLatLng={isPendingLatLng}\r\n                setIsPendingLatLng={setIsPendingLatLng}\r\n              />\r\n            </div>\r\n            <div className=\"btn-filter-banner\">\r\n              <button\r\n                className=\"btn-search-filter\"\r\n                onClick={(e) => {\r\n                  getBenefits(false);\r\n                }}\r\n              >\r\n                {isDesktopOrLaptop && (\r\n                  <>\r\n                    <SearchIcon />\r\n                  </>\r\n                )}\r\n                {isTabletOrMobile && <>Recherche</>}\r\n              </button>\r\n            </div>\r\n          </BlocFilterStyle>\r\n          {isDesktopOrLaptop && <Breadcrumb crumbs={dataCrumbs} />}\r\n          <BackStyle to={`/univers/${slugIdUniverse}`}>\r\n            <BackIcon />\r\n            <span>Retour à l'univers</span>\r\n          </BackStyle>\r\n          {isTabletOrMobile && (\r\n            <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n              <SearchIcon /> Rechercher une prestation\r\n            </div>\r\n          )}\r\n          <ListePrestationFiche\r\n            service={service}\r\n            benefits={benefits}\r\n            filter={filter}\r\n            setFilter={setFilter}\r\n            isPending={isPending}\r\n          />\r\n        </Container>\r\n      </ContentPageStyle>\r\n    </Base>\r\n  );\r\n}\r\n"
        }
    ]
}