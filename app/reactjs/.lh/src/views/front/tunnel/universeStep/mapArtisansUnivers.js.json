{
    "sourceFile": "src/views/front/tunnel/universeStep/mapArtisansUnivers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1706637662651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706692450457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,29 +156,49 @@\n       },\r\n     ],\r\n   };\r\n   return (\r\n-    <ListFichePrestation>\r\n-     <CordStyle>\r\n-                <div className=\"cordtitle\" > Découvrez nos artisans en France</div>\r\n-            </CordStyle>\r\n \r\n-      <Row className=\"bloc-lists-prstation-items\">\r\n-   \r\n-        <Col lg={7} className=\"bloc-map-list\">\r\n-          <GoogleMap\r\n-            apiKey={vars.mapsApiKey}\r\n-            center={state.map.center}\r\n-            zoom={state.map.zoom}\r\n-            hoverDistance={K_SIZE / 2}\r\n-            onChildClick={_onChildClick}\r\n-            onGoogleApiLoaded={({ map, maps }) => {\r\n-              //console.log(\"map is loaded.\");\r\n-            }}\r\n-          >\r\n-            {places}\r\n-          </GoogleMap>\r\n-        </Col>\r\n-      </Row>\r\n-    </ListFichePrestation>\r\n+     <ListFichePrestation>\r\n+     <div className=\"head-list-content\">\r\n+       <h1 className=\"title-bloc-products\">\r\n+         {service ? getTitleService() : \"\"}\r\n+       </h1>\r\n+       <Select\r\n+         {...filter.sortBy}\r\n+         onChange={(e) => {\r\n+           const cpFilter = { ...filter };\r\n+           cpFilter.codePostal.error = false;\r\n+           cpFilter.sortBy.value = e.value;\r\n+           setFilter(cpFilter);\r\n+         }}\r\n+       />\r\n+     </div>\r\n+     <Row className=\"bloc-lists-prstation-items\">\r\n+       <Col lg={5} className=\"content-lists-prstation-items\">\r\n+         {isDesktopOrLaptop && (\r\n+           <div className=\"lists-prstation-items\">{showData()}</div>\r\n+         )}\r\n+         {isTabletOrMobile && (\r\n+           <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+             {showData()}\r\n+           </Slider>\r\n+         )}\r\n+       </Col>\r\n+       <Col lg={7} className=\"bloc-map-list\">\r\n+         <GoogleMap\r\n+           apiKey={vars.mapsApiKey}\r\n+           center={state.map.center}\r\n+           zoom={state.map.zoom}\r\n+           hoverDistance={K_SIZE / 2}\r\n+           onChildClick={_onChildClick}\r\n+           onGoogleApiLoaded={({ map, maps }) => {\r\n+             //console.log(\"map is loaded.\");\r\n+           }}\r\n+         >\r\n+           {places}\r\n+         </GoogleMap>\r\n+       </Col>\r\n+     </Row>\r\n+   </ListFichePrestation>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1706706039649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,22 +158,9 @@\n   };\r\n   return (\r\n \r\n      <ListFichePrestation>\r\n-     <div className=\"head-list-content\">\r\n-       <h1 className=\"title-bloc-products\">\r\n-         {service ? getTitleService() : \"\"}\r\n-       </h1>\r\n-       <Select\r\n-         {...filter.sortBy}\r\n-         onChange={(e) => {\r\n-           const cpFilter = { ...filter };\r\n-           cpFilter.codePostal.error = false;\r\n-           cpFilter.sortBy.value = e.value;\r\n-           setFilter(cpFilter);\r\n-         }}\r\n-       />\r\n-     </div>\r\n+  \r\n      <Row className=\"bloc-lists-prstation-items\">\r\n        <Col lg={5} className=\"content-lists-prstation-items\">\r\n          {isDesktopOrLaptop && (\r\n            <div className=\"lists-prstation-items\">{showData()}</div>\r\n"
                },
                {
                    "date": 1706706058946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,22 @@\n   };\r\n   return (\r\n \r\n      <ListFichePrestation>\r\n-  \r\n+     <div className=\"head-list-content\">\r\n+       <h1 className=\"title-bloc-products\">\r\n+         {service ? getTitleService() : \"\"}\r\n+       </h1>\r\n+       <Select\r\n+         {...filter.sortBy}\r\n+         onChange={(e) => {\r\n+           const cpFilter = { ...filter };\r\n+           cpFilter.codePostal.error = false;\r\n+           cpFilter.sortBy.value = e.value;\r\n+           setFilter(cpFilter);\r\n+         }}\r\n+       />\r\n+     </div>\r\n      <Row className=\"bloc-lists-prstation-items\">\r\n        <Col lg={5} className=\"content-lists-prstation-items\">\r\n          {isDesktopOrLaptop && (\r\n            <div className=\"lists-prstation-items\">{showData()}</div>\r\n"
                },
                {
                    "date": 1706706167588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,11 +159,9 @@\n   return (\r\n \r\n      <ListFichePrestation>\r\n      <div className=\"head-list-content\">\r\n-       <h1 className=\"title-bloc-products\">\r\n-         {service ? getTitleService() : \"\"}\r\n-       </h1>\r\n+  \r\n        <Select\r\n          {...filter.sortBy}\r\n          onChange={(e) => {\r\n            const cpFilter = { ...filter };\r\n"
                },
                {
                    "date": 1706706203018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,191 @@\n+import React, { useState, useEffect, useRef } from \"react\";\r\n+import Select from \"../../../../components/ui-elements/select\";\r\n+import PrestationFiche from \"../../../../components/front/prestationFiche\";\r\n+import { ListFichePrestation } from \"../../../../assets/styles/frontGlobalStyle\";\r\n+import { Col, Row } from \"react-bootstrap\";\r\n+import GoogleMap from \"google-map-react\";\r\n+import PrestationFicheMap from \"../../../../components/front/prestationFicheMap\";\r\n+import { K_SIZE } from \"./markersRegroupeStyles\";\r\n+import * as vars from \"../../../../vars\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import Slider from \"react-slick\";\r\n+import {\r\n+  CordStyle\r\n+} from \"../../../../assets/styles/frontUniverseStyles\";\r\n+\r\n+export default function MapArtisansUnivers({\r\n+  service = {},\r\n+  benefits = [],\r\n+  filter,\r\n+  setFilter,\r\n+  greatPlaces,\r\n+  isPending,\r\n+  ...props\r\n+}) {\r\n+  let refSlider = useRef(null);\r\n+  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n+  const isDesktopOrLaptop = useMediaQuery({\r\n+    query: \"(min-width: 994px)\",\r\n+  });\r\n+  const [state, setState] = useState({\r\n+    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  });\r\n+  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+\r\n+  useEffect(() => {\r\n+    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        filter.codePostal.latitude,\r\n+        filter.codePostal.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n+      const cpState = { ...state };\r\n+      cpState.map.center = [\r\n+        activeBenefit.user.latitude,\r\n+        activeBenefit.user.longitude,\r\n+      ];\r\n+      setState(cpState);\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [activeBenefit]);\r\n+\r\n+  const rowRender = (row) => (\r\n+    <PrestationFiche\r\n+      activeBenefit={activeBenefit}\r\n+      setActiveBenefit={setActiveBenefit}\r\n+      key={row.id}\r\n+      row={row}\r\n+    />\r\n+  );\r\n+\r\n+  const showData = () => {\r\n+    if (service === false || isPending)\r\n+      return (\r\n+        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n+          Chargement...\r\n+        </div>\r\n+      );\r\n+    else if (benefits.length === 0)\r\n+      return (\r\n+        <h3\r\n+          style={{\r\n+            textAlign: \"center\",\r\n+            width: \"100%\",\r\n+            fontSize: \"22px\",\r\n+            fontWeight: \"600\",\r\n+          }}\r\n+        >\r\n+          Aucune donnée\r\n+        </h3>\r\n+      );\r\n+\r\n+    return benefits.map((row) => {\r\n+      return rowRender(row);\r\n+    });\r\n+  };\r\n+\r\n+  const _onChildClick = (key, childProps) => {\r\n+    let i = null;\r\n+    const benefit = benefits.length\r\n+      ? benefits.find((val, index) => {\r\n+          if (val.id === childProps.id) {\r\n+            i = index;\r\n+            return true;\r\n+          }\r\n+        })\r\n+      : { id: null };\r\n+    if (benefit.id) {\r\n+      setActiveBenefit(benefit);\r\n+      if (isTabletOrMobile) {\r\n+        refSlider.slickGoTo(i);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const getTitleService = () => {\r\n+    return `${service.name} : ${benefits.length} réparateur${\r\n+      benefits.length > 1 ? \"(s)\" : \"\"\r\n+    }`;\r\n+  };\r\n+\r\n+  const places = benefits.length\r\n+    ? benefits.map((row) => {\r\n+        return (\r\n+          <PrestationFicheMap\r\n+            key={row.id}\r\n+            lat={row.user.latitude}\r\n+            lng={row.user.longitude}\r\n+            text={\r\n+              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n+            }\r\n+            id={row.id}\r\n+            // use your hover state (from store, react-controllables etc...)\r\n+            activeBenefit={activeBenefit}\r\n+          />\r\n+        );\r\n+      })\r\n+    : \"\";\r\n+\r\n+  const settings = {\r\n+    className: \"slider variable-width\",\r\n+    infinite: false,\r\n+    centerMode: true,\r\n+    slidesToShow: 2,\r\n+    slidesToScroll: 1,\r\n+    variableWidth: true,\r\n+    arrows: false,\r\n+    focusOnSelect: true,\r\n+    initialSlide: 1,\r\n+    responsive: [\r\n+      {\r\n+        breakpoint: 575,\r\n+        settings: {\r\n+          slidesToShow: 1,\r\n+          slidesToScroll: 1,\r\n+          initialSlide: 0,\r\n+        },\r\n+      },\r\n+    ],\r\n+  };\r\n+  return (\r\n+\r\n+     <ListFichePrestation>\r\n+\r\n+     <Row className=\"bloc-lists-prstation-items\">\r\n+       <Col lg={5} className=\"content-lists-prstation-items\">\r\n+         {isDesktopOrLaptop && (\r\n+           <div className=\"lists-prstation-items\">{showData()}</div>\r\n+         )}\r\n+         {isTabletOrMobile && (\r\n+           <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+             {showData()}\r\n+           </Slider>\r\n+         )}\r\n+       </Col>\r\n+       <Col lg={7} className=\"bloc-map-list\">\r\n+         <GoogleMap\r\n+           apiKey={vars.mapsApiKey}\r\n+           center={state.map.center}\r\n+           zoom={state.map.zoom}\r\n+           hoverDistance={K_SIZE / 2}\r\n+           onChildClick={_onChildClick}\r\n+           onGoogleApiLoaded={({ map, maps }) => {\r\n+             //console.log(\"map is loaded.\");\r\n+           }}\r\n+         >\r\n+           {places}\r\n+         </GoogleMap>\r\n+       </Col>\r\n+     </Row>\r\n+   </ListFichePrestation>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1706706219987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,201 +158,12 @@\n   };\r\n   return (\r\n \r\n      <ListFichePrestation>\r\n-\r\n-     <Row className=\"bloc-lists-prstation-items\">\r\n-       <Col lg={5} className=\"content-lists-prstation-items\">\r\n-         {isDesktopOrLaptop && (\r\n-           <div className=\"lists-prstation-items\">{showData()}</div>\r\n-         )}\r\n-         {isTabletOrMobile && (\r\n-           <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-             {showData()}\r\n-           </Slider>\r\n-         )}\r\n-       </Col>\r\n-       <Col lg={7} className=\"bloc-map-list\">\r\n-         <GoogleMap\r\n-           apiKey={vars.mapsApiKey}\r\n-           center={state.map.center}\r\n-           zoom={state.map.zoom}\r\n-           hoverDistance={K_SIZE / 2}\r\n-           onChildClick={_onChildClick}\r\n-           onGoogleApiLoaded={({ map, maps }) => {\r\n-             //console.log(\"map is loaded.\");\r\n-           }}\r\n-         >\r\n-           {places}\r\n-         </GoogleMap>\r\n-       </Col>\r\n-     </Row>\r\n-   </ListFichePrestation>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../../../../components/ui-elements/select\";\r\n-import PrestationFiche from \"../../../../components/front/prestationFiche\";\r\n-import { ListFichePrestation } from \"../../../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"../../../../components/front/prestationFicheMap\";\r\n-import { K_SIZE } from \"./markersRegroupeStyles\";\r\n-import * as vars from \"../../../../vars\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n-import {\r\n-  CordStyle\r\n-} from \"../../../../assets/styles/frontUniverseStyles\";\r\n-\r\n-export default function MapArtisansUnivers({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-  let refSlider = useRef(null);\r\n-  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n-  const isDesktopOrLaptop = useMediaQuery({\r\n-    query: \"(min-width: 994px)\",\r\n-  });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n-  });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n-\r\n-  useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n-\r\n-  useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n-    }\r\n-\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n-\r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée\r\n-        </h3>\r\n-      );\r\n-\r\n-    return benefits.map((row) => {\r\n-      return rowRender(row);\r\n-    });\r\n-  };\r\n-\r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-          if (val.id === childProps.id) {\r\n-            i = index;\r\n-            return true;\r\n-          }\r\n-        })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n-      if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${\r\n-      benefits.length > 1 ? \"(s)\" : \"\"\r\n-    }`;\r\n-  };\r\n-\r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-        return (\r\n-          <PrestationFicheMap\r\n-            key={row.id}\r\n-            lat={row.user.latitude}\r\n-            lng={row.user.longitude}\r\n-            text={\r\n-              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-            }\r\n-            id={row.id}\r\n-            // use your hover state (from store, react-controllables etc...)\r\n-            activeBenefit={activeBenefit}\r\n-          />\r\n-        );\r\n-      })\r\n-    : \"\";\r\n-\r\n-  const settings = {\r\n-    className: \"slider variable-width\",\r\n-    infinite: false,\r\n-    centerMode: true,\r\n-    slidesToShow: 2,\r\n-    slidesToScroll: 1,\r\n-    variableWidth: true,\r\n-    arrows: false,\r\n-    focusOnSelect: true,\r\n-    initialSlide: 1,\r\n-    responsive: [\r\n-      {\r\n-        breakpoint: 575,\r\n-        settings: {\r\n-          slidesToShow: 1,\r\n-          slidesToScroll: 1,\r\n-          initialSlide: 0,\r\n-        },\r\n-      },\r\n-    ],\r\n-  };\r\n-  return (\r\n-\r\n-     <ListFichePrestation>\r\n      <div className=\"head-list-content\">\r\n-  \r\n+       <h1 className=\"title-bloc-products\">\r\n+         {service ? getTitleService() : \"\"}\r\n+       </h1>\r\n        <Select\r\n          {...filter.sortBy}\r\n          onChange={(e) => {\r\n            const cpFilter = { ...filter };\r\n"
                },
                {
                    "date": 1706706243924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,18 +173,9 @@\n          }}\r\n        />\r\n      </div>\r\n      <Row className=\"bloc-lists-prstation-items\">\r\n-       <Col lg={5} className=\"content-lists-prstation-items\">\r\n-         {isDesktopOrLaptop && (\r\n-           <div className=\"lists-prstation-items\">{showData()}</div>\r\n-         )}\r\n-         {isTabletOrMobile && (\r\n-           <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-             {showData()}\r\n-           </Slider>\r\n-         )}\r\n-       </Col>\r\n+   \r\n        <Col lg={7} className=\"bloc-map-list\">\r\n          <GoogleMap\r\n            apiKey={vars.mapsApiKey}\r\n            center={state.map.center}\r\n"
                },
                {
                    "date": 1706706262563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,18 @@\n          }}\r\n        />\r\n      </div>\r\n      <Row className=\"bloc-lists-prstation-items\">\r\n-   \r\n+       <Col lg={5} className=\"content-lists-prstation-items\">\r\n+         {isDesktopOrLaptop && (\r\n+           <div className=\"lists-prstation-items\">{showData()}</div>\r\n+         )}\r\n+         {isTabletOrMobile && (\r\n+           <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n+             {showData()}\r\n+           </Slider>\r\n+         )}\r\n+       </Col>\r\n        <Col lg={7} className=\"bloc-map-list\">\r\n          <GoogleMap\r\n            apiKey={vars.mapsApiKey}\r\n            center={state.map.center}\r\n"
                },
                {
                    "date": 1706706409646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,204 +1,401 @@\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-import Select from \"../../../../components/ui-elements/select\";\r\n-import PrestationFiche from \"../../../../components/front/prestationFiche\";\r\n-import { ListFichePrestation } from \"../../../../assets/styles/frontGlobalStyle\";\r\n-import { Col, Row } from \"react-bootstrap\";\r\n-import GoogleMap from \"google-map-react\";\r\n-import PrestationFicheMap from \"../../../../components/front/prestationFicheMap\";\r\n-import { K_SIZE } from \"./markersRegroupeStyles\";\r\n-import * as vars from \"../../../../vars\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import { useSelector } from \"react-redux\";\r\n+import { Container } from \"react-bootstrap\";\r\n import { useMediaQuery } from \"react-responsive\";\r\n-import Slider from \"react-slick\";\r\n+import { useParams } from \"react-router-dom\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n import {\r\n-  CordStyle\r\n-} from \"../../../../assets/styles/frontUniverseStyles\";\r\n+  BackStyle,\r\n+  BlocFilterStyle,\r\n+  ContentPageStyle,\r\n+} from \"../../assets/styles/frontGlobalStyle\";\r\n+import { BackIcon, SearchIcon } from \"../../assets/styles/icons\";\r\n+import Breadcrumb from \"../../components/ui-elements/breadcrumb\";\r\n+import Base from \"../../theme/front/base\";\r\n+import Nouislider from \"nouislider-react\";\r\n+import \"nouislider/distribute/nouislider.css\";\r\n+import { RangePrice } from \"../../assets/styles/componentStyles\";\r\n+import ListePrestationFiche from \"../../components/front/listePrestationFiche\";\r\n+import endPoints from \"../../config/endPoints\";\r\n+import connector from \"../../connector\";\r\n+import InputAutoComplete from \"../../components/ui-elements/inputAutoComplete\";\r\n+import { clearErrors } from \"../../helper/form\";\r\n+import SelectCat from \"../../components/categories/selectCat\";\r\n+import { sortObjects } from \"../../helper/functions\";\r\n \r\n-export default function MapArtisansUnivers({\r\n-  service = {},\r\n-  benefits = [],\r\n-  filter,\r\n-  setFilter,\r\n-  greatPlaces,\r\n-  isPending,\r\n-  ...props\r\n-}) {\r\n-  let refSlider = useRef(null);\r\n+export default function MapArtisansUnivers() {\r\n   const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n   const isDesktopOrLaptop = useMediaQuery({\r\n     query: \"(min-width: 994px)\",\r\n   });\r\n-  const [state, setState] = useState({\r\n-    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n+  const [click, setClick] = useState(false);\r\n+  const toggleFilter = () => setClick(!click);\r\n+  const toogleCloseFilter = () => setClick(false);\r\n+\r\n+  useEffect(() => {\r\n+    if (click) {\r\n+      document.body.classList.add(\"menu-is-show\");\r\n+    } else {\r\n+      document.body.classList.remove(\"menu-is-show\");\r\n+    }\r\n+  }, [click]);\r\n+\r\n+  const [defaultCodePostal] = useState(localStorage.getItem(\"codePostal\"));\r\n+  const [defaultLatitude] = useState(\r\n+    parseFloat(localStorage.getItem(\"latitude\"))\r\n+  );\r\n+  const [defaultLongitude] = useState(\r\n+    parseFloat(localStorage.getItem(\"longitude\"))\r\n+  );\r\n+\r\n+  const { slugIdUniverse, slugIdService } = useParams();\r\n+  console.log(slugIdUniverse);\r\n+  const [service, setService] = useState(false);\r\n+  const [benefits, setBenefits] = useState([]);\r\n+  const [activeUniverse, setActiveUniverse] = useState(false);\r\n+  const universe = useSelector((state) => state.universe);\r\n+  const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const [isPendingLatLng, setIsPendingLatLng] = useState(true);\r\n+  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n+  const [filter, setFilter] = useState({\r\n+    deliveryModeTypes: {\r\n+      label: \"Mode de délivrance\",\r\n+      name: \"deliveryModeTypes\",\r\n+      placeholder: \"Tous\",\r\n+      options: [],\r\n+      value: [],\r\n+      hideOptions: true,\r\n+    },\r\n+    codePostal: {\r\n+      name: \"codePostal\",\r\n+      type: \"text\",\r\n+      label: \"Où\",\r\n+      placeholder: \"Saisir un code postal\",\r\n+      value:\r\n+        defaultCodePostal && defaultLatitude && defaultLongitude\r\n+          ? defaultCodePostal\r\n+          : \"\",\r\n+      latitude:\r\n+        defaultCodePostal && defaultLatitude && defaultLongitude\r\n+          ? defaultLatitude\r\n+          : null,\r\n+      longitude:\r\n+        defaultCodePostal && defaultLatitude && defaultLongitude\r\n+          ? defaultLongitude\r\n+          : null,\r\n+      error: false,\r\n+      required: true,\r\n+      infoBulle: false,\r\n+    },\r\n+    price: {\r\n+      value: [-1, -1],\r\n+    },\r\n+    sortBy: {\r\n+      label: \"Trier par: \",\r\n+      placeholder: `${isTabletOrMobile ? \"trier par :\" : \"\"}`,\r\n+      options: [\r\n+        { value: \"distance_asc\", label: \"Distance\" },\r\n+        { value: \"rating_desc\", label: \"Meilleures notes\" },\r\n+        { value: \"price_asc\", label: \"Prix croissant\" },\r\n+        { value: \"price_desc\", label: \"Prix décroissant\" },\r\n+      ],\r\n+      value: `${isTabletOrMobile ? null : \"distance_asc\"}`,\r\n+    },\r\n   });\r\n-  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: `${activeUniverse ? activeUniverse.name : \"Univers\"}`,\r\n+      path: `/univers/${slugIdUniverse}`,\r\n+    },\r\n+    { name: service ? service.name : \"\", path: \"/\" },\r\n+  ];\r\n \r\n   useEffect(() => {\r\n-    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        filter.codePostal.latitude,\r\n-        filter.codePostal.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n+    if (universe.allUniverses) {\r\n+      const id = slugIdUniverse.split(\"-\").pop();\r\n+      if (id) {\r\n+        const universeData = universe.allUniverses.find(\r\n+          (u) => parseInt(u.id) === parseInt(id)\r\n+        );\r\n+        if (universeData) {\r\n+          setActiveUniverse(universeData);\r\n+        }\r\n+      }\r\n     }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [universe]);\r\n \r\n+  useEffect(() => {\r\n+    getDeliveryModeTypes();\r\n+    getService();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n+  }, []);\r\n \r\n   useEffect(() => {\r\n-    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n-      const cpState = { ...state };\r\n-      cpState.map.center = [\r\n-        activeBenefit.user.latitude,\r\n-        activeBenefit.user.longitude,\r\n-      ];\r\n-      setState(cpState);\r\n+    if (!isPendingLatLng && service) {\r\n+      getBenefits(true);\r\n     }\r\n-\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [activeBenefit]);\r\n+  }, [slugIdService, filter.sortBy.value, isPendingLatLng, service.id]);\r\n \r\n-  const rowRender = (row) => (\r\n-    <PrestationFiche\r\n-      activeBenefit={activeBenefit}\r\n-      setActiveBenefit={setActiveBenefit}\r\n-      key={row.id}\r\n-      row={row}\r\n-    />\r\n-  );\r\n-\r\n-  const showData = () => {\r\n-    if (service === false || isPending)\r\n-      return (\r\n-        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n-          Chargement...\r\n-        </div>\r\n-      );\r\n-    else if (benefits.length === 0)\r\n-      return (\r\n-        <h3\r\n-          style={{\r\n-            textAlign: \"center\",\r\n-            width: \"100%\",\r\n-            fontSize: \"22px\",\r\n-            fontWeight: \"600\",\r\n-          }}\r\n-        >\r\n-          Aucune donnée\r\n-        </h3>\r\n-      );\r\n-\r\n-    return benefits.map((row) => {\r\n-      return rowRender(row);\r\n+  const getDeliveryModeTypes = () => {\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: endPoints.DELIVERY_MODE_TYPES,\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        const cpFilter = { ...filter };\r\n+        let options = [];\r\n+        for (let i = 0; i < arrayObj.length; i++) {\r\n+          options.push({ value: arrayObj[i].id, label: arrayObj[i].name });\r\n+        }\r\n+        cpFilter.deliveryModeTypes.options = options;\r\n+        setFilter(cpFilter);\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      },\r\n     });\r\n   };\r\n \r\n-  const _onChildClick = (key, childProps) => {\r\n-    let i = null;\r\n-    const benefit = benefits.length\r\n-      ? benefits.find((val, index) => {\r\n-          if (val.id === childProps.id) {\r\n-            i = index;\r\n-            return true;\r\n-          }\r\n-        })\r\n-      : { id: null };\r\n-    if (benefit.id) {\r\n-      setActiveBenefit(benefit);\r\n+  const getService = () => {\r\n+    const idService = \"/univers/cordonnerie-30/entretien-nettoyage-218\".split(\"-\").pop();\r\n+    if (idService) {\r\n+      let condition = ``;\r\n+      if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+        condition += `?latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n+      }\r\n+      connector({\r\n+        method: \"get\",\r\n+        url: `${endPoints.ANONYMOUS_SERVICE}${idService}${condition}`,\r\n+        success: (response) => {\r\n+          setService(response.data || {});\r\n+        },\r\n+        catch: (error) => {\r\n+          console.log(error);\r\n+        },\r\n+      });\r\n+    } else {\r\n+      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n+    }\r\n+  };\r\n+\r\n+  const getBenefits = (refresh = false) => {\r\n+    const idService = \"/univers/cordonnerie-30/entretien-nettoyage-218\".split(\"-\").pop();\r\n+    if (idService) {\r\n+      if (!placeIsSelected) {\r\n+        msgErrors({\r\n+          codePostal: true,\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n       if (isTabletOrMobile) {\r\n-        refSlider.slickGoTo(i);\r\n+        setClick(false);\r\n       }\r\n+\r\n+      if (!isPending) {\r\n+        setIsPending(true);\r\n+        setFilter(clearErrors(filter));\r\n+\r\n+        const sortBy = filter.sortBy.value.split(\"_\");\r\n+\r\n+        let condition = ``;\r\n+        if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n+          condition += `&latitude=${filter.codePostal.latitude}&longitude=${filter.codePostal.longitude}`;\r\n+        }\r\n+        if (sortBy[0] === \"distance\") {\r\n+          condition += `&order[distance]=asc`;\r\n+        } else if (sortBy[0] === \"price\") {\r\n+          condition += `&order[deliveryModes.price]=${sortBy[1]}`;\r\n+        }else if (sortBy[0] === \"rating\") {\r\n+          condition += `&order[rating]=${sortBy[1]}`;\r\n+        }\r\n+        if (filter.deliveryModeTypes.value.length) {\r\n+          for (let i = 0; i < filter.deliveryModeTypes.value.length; i++) {\r\n+            const row = filter.deliveryModeTypes.value[i];\r\n+            condition += `&deliveryModes.deliveryModeType.id[]=${row.value}`;\r\n+          }\r\n+        }\r\n+        if (\r\n+          filter.price.value[0] > -1 &&\r\n+          filter.price.value[1] > -1 &&\r\n+          (filter.price.value[0] !== service.minPrice ||\r\n+            filter.price.value[1] !== service.maxPrice)\r\n+        ) {\r\n+          condition += `&deliveryModes.price[between]=${filter.price.value[0]}..${filter.price.value[1]}`;\r\n+        }\r\n+\r\n+        const cpParamsUrlService = `${condition}`;\r\n+\r\n+        //if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n+        if (refresh || paramsUrlService) {\r\n+          setParamsUrlService(cpParamsUrlService);\r\n+          connector({\r\n+            method: \"get\",\r\n+            url: `${endPoints.ANONYMOUS_BENEFITS_SERVICE}?service.id=${idService}${cpParamsUrlService}`,\r\n+            success: (response) => {\r\n+              let results = response.data[\"hydra:member\"] || [];\r\n+              //todo list est voir le min et max\r\n+              if (service) {\r\n+                const cpService = { ...service };\r\n+                let prices = [];\r\n+                for (var i = 0; i < results.length; i++) {\r\n+                  for (var j = 0; j < results[i].deliveryModes.length; j++) {\r\n+                    const obj = results[i].deliveryModes[j];\r\n+                    if (obj.price && parseFloat(obj.price) > 0) {\r\n+                      prices.push(parseFloat(obj.price));\r\n+                    }\r\n+                  }\r\n+                  results[i] = {...results[i], rating :  results[i].user.googleRating || 0};\r\n+                }\r\n+                if (prices.length) {\r\n+                  cpService.minPrice = Math.floor(Math.min(...prices));\r\n+                  cpService.maxPrice = Math.ceil(Math.max(...prices));\r\n+                  setService(cpService);\r\n+                }else{\r\n+                  cpService.minPrice = 0;\r\n+                  cpService.maxPrice = 0;\r\n+                  setService(cpService);\r\n+                }\r\n+              }\r\n+              if (sortBy[0] === \"price\") {\r\n+                results = sortObjects(results,'minPrice',sortBy[1]);\r\n+              }else if(sortBy[0] === \"rating\"){\r\n+                results = sortObjects(results,'rating',sortBy[1]);\r\n+              }\r\n+              setBenefits(results);\r\n+              setIsPending(false);\r\n+            },\r\n+            catch: (error) => {\r\n+              console.log(error);\r\n+              setIsPending(false);\r\n+            },\r\n+          });\r\n+        } else {\r\n+          setIsPending(false);\r\n+        }\r\n+      }\r\n+    } else {\r\n+      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n     }\r\n   };\r\n \r\n-  const getTitleService = () => {\r\n-    return `${service.name} : ${benefits.length} réparateur${\r\n-      benefits.length > 1 ? \"(s)\" : \"\"\r\n-    }`;\r\n+  const to = (value, index) => {\r\n+    value = Math.round(value);\r\n+    const cpFilter = { ...filter };\r\n+    if (index !== undefined && cpFilter.price.value[index] !== value) {\r\n+      cpFilter.price.value[index] = value;\r\n+      setFilter(cpFilter);\r\n+    }\r\n+    return value;\r\n   };\r\n \r\n-  const places = benefits.length\r\n-    ? benefits.map((row) => {\r\n-        return (\r\n-          <PrestationFicheMap\r\n-            key={row.id}\r\n-            lat={row.user.latitude}\r\n-            lng={row.user.longitude}\r\n-            text={\r\n-              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n-            }\r\n-            id={row.id}\r\n-            // use your hover state (from store, react-controllables etc...)\r\n-            activeBenefit={activeBenefit}\r\n-          />\r\n-        );\r\n-      })\r\n-    : \"\";\r\n+  const from = (value) => {\r\n+    return Number(value);\r\n+  };\r\n \r\n-  const settings = {\r\n-    className: \"slider variable-width\",\r\n-    infinite: false,\r\n-    centerMode: true,\r\n-    slidesToShow: 2,\r\n-    slidesToScroll: 1,\r\n-    variableWidth: true,\r\n-    arrows: false,\r\n-    focusOnSelect: true,\r\n-    initialSlide: 1,\r\n-    responsive: [\r\n-      {\r\n-        breakpoint: 575,\r\n-        settings: {\r\n-          slidesToShow: 1,\r\n-          slidesToScroll: 1,\r\n-          initialSlide: 0,\r\n-        },\r\n-      },\r\n-    ],\r\n+  const msgErrors = (e) => {\r\n+    const cpFilter = { ...filter };\r\n+    if (e.notice !== undefined) NotificationManager.error(e.notice, \"\");\r\n+    if (e.codePostal !== undefined) {\r\n+      cpFilter.codePostal.error = e.codePostal;\r\n+      cpFilter.codePostal.infoBulle = e.codePostal;\r\n+    }\r\n+    setFilter(cpFilter);\r\n   };\r\n+\r\n   return (\r\n \r\n-     <ListFichePrestation>\r\n-     <div className=\"head-list-content\">\r\n-       <h1 className=\"title-bloc-products\">\r\n-         {service ? getTitleService() : \"\"}\r\n-       </h1>\r\n-       <Select\r\n-         {...filter.sortBy}\r\n-         onChange={(e) => {\r\n-           const cpFilter = { ...filter };\r\n-           cpFilter.codePostal.error = false;\r\n-           cpFilter.sortBy.value = e.value;\r\n-           setFilter(cpFilter);\r\n-         }}\r\n-       />\r\n-     </div>\r\n-     <Row className=\"bloc-lists-prstation-items\">\r\n-       <Col lg={5} className=\"content-lists-prstation-items\">\r\n-         {isDesktopOrLaptop && (\r\n-           <div className=\"lists-prstation-items\">{showData()}</div>\r\n-         )}\r\n-         {isTabletOrMobile && (\r\n-           <Slider ref={(slider) => (refSlider = slider)} {...settings}>\r\n-             {showData()}\r\n-           </Slider>\r\n-         )}\r\n-       </Col>\r\n-       <Col lg={7} className=\"bloc-map-list\">\r\n-         <GoogleMap\r\n-           apiKey={vars.mapsApiKey}\r\n-           center={state.map.center}\r\n-           zoom={state.map.zoom}\r\n-           hoverDistance={K_SIZE / 2}\r\n-           onChildClick={_onChildClick}\r\n-           onGoogleApiLoaded={({ map, maps }) => {\r\n-             //console.log(\"map is loaded.\");\r\n-           }}\r\n-         >\r\n-           {places}\r\n-         </GoogleMap>\r\n-       </Col>\r\n-     </Row>\r\n-   </ListFichePrestation>\r\n+        <Container>\r\n+          <BlocFilterStyle open={click}>\r\n+            {isTabletOrMobile && (\r\n+              <button\r\n+                className=\"menu-burger is-opened\"\r\n+                onClick={toogleCloseFilter}\r\n+              >\r\n+                <span></span>\r\n+                <span></span>\r\n+                <span></span>\r\n+              </button>\r\n+            )}\r\n+            <div className=\"item-filter\">\r\n+              <RangePrice>\r\n+                <label>Prix</label>\r\n+                {service &&\r\n+                service.minPrice &&\r\n+                service.maxPrice &&\r\n+                service.minPrice != service.maxPrice ? (\r\n+                  <Nouislider\r\n+                    range={{ min: service.minPrice, max: service.maxPrice }}\r\n+                    start={[service.minPrice, service.maxPrice]}\r\n+                    connect={true}\r\n+                    behaviour=\"tap\"\r\n+                    step={1}\r\n+                    tooltips={true}\r\n+                    format={{ to, from }}\r\n+                  />\r\n+                ) : (\r\n+                  \"Sur devis\"\r\n+                )}\r\n+              </RangePrice>\r\n+            </div>\r\n+            <div className=\"item-filter\">\r\n+              <SelectCat\r\n+                {...filter.deliveryModeTypes}\r\n+                onChangeCallback={(response) => {\r\n+                  const cpFilter = { ...filter };\r\n+                  cpFilter.deliveryModeTypes.value = response;\r\n+                  setFilter(cpFilter);\r\n+                }}\r\n+              />\r\n+            </div>\r\n+            <div className=\"item-filter\">\r\n+              <InputAutoComplete\r\n+                filter={filter}\r\n+                setFilter={setFilter}\r\n+                placeIsSelected={placeIsSelected}\r\n+                setPlaceIsSelected={setPlaceIsSelected}\r\n+                isPendingLatLng={isPendingLatLng}\r\n+                setIsPendingLatLng={setIsPendingLatLng}\r\n+              />\r\n+            </div>\r\n+            <div className=\"btn-filter-banner\">\r\n+              <button\r\n+                className=\"btn-search-filter\"\r\n+                onClick={(e) => {\r\n+                  getBenefits(false);\r\n+                }}\r\n+              >\r\n+                {isDesktopOrLaptop && (\r\n+                  <>\r\n+                    <SearchIcon />\r\n+                  </>\r\n+                )}\r\n+                {isTabletOrMobile && <>Recherche</>}\r\n+              </button>\r\n+            </div>\r\n+          </BlocFilterStyle>\r\n+          {isDesktopOrLaptop && <Breadcrumb crumbs={dataCrumbs} />}\r\n+          <BackStyle to={`/univers/${slugIdUniverse}`}>\r\n+            <BackIcon />\r\n+            <span>Retour à l'univers</span>\r\n+          </BackStyle>\r\n+          {isTabletOrMobile && (\r\n+            <div className=\"btn-toggle-filter\" onClick={toggleFilter}>\r\n+              <SearchIcon /> Rechercher une prestation\r\n+            </div>\r\n+          )}\r\n+          <ListePrestationFiche\r\n+            service={service}\r\n+            benefits={benefits}\r\n+            filter={filter}\r\n+            setFilter={setFilter}\r\n+            isPending={isPending}\r\n+          />\r\n+        </Container>\r\n+ \r\n   );\r\n }\r\n"
                }
            ],
            "date": 1706637662651,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport Select from \"../../../../components/ui-elements/select\";\r\nimport PrestationFiche from \"../../../../components/front/prestationFiche\";\r\nimport { ListFichePrestation } from \"../../../../assets/styles/frontGlobalStyle\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport GoogleMap from \"google-map-react\";\r\nimport PrestationFicheMap from \"../../../../components/front/prestationFicheMap\";\r\nimport { K_SIZE } from \"./markersRegroupeStyles\";\r\nimport * as vars from \"../../../../vars\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport Slider from \"react-slick\";\r\nimport {\r\n  CordStyle\r\n} from \"../../../../assets/styles/frontUniverseStyles\";\r\n\r\nexport default function MapArtisansUnivers({\r\n  service = {},\r\n  benefits = [],\r\n  filter,\r\n  setFilter,\r\n  greatPlaces,\r\n  isPending,\r\n  ...props\r\n}) {\r\n  let refSlider = useRef(null);\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n  const isDesktopOrLaptop = useMediaQuery({\r\n    query: \"(min-width: 994px)\",\r\n  });\r\n  const [state, setState] = useState({\r\n    map: { center: [48.8534, 2.3488], zoom: 10 },\r\n  });\r\n  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n\r\n  useEffect(() => {\r\n    if (filter.codePostal.latitude && filter.codePostal.longitude) {\r\n      const cpState = { ...state };\r\n      cpState.map.center = [\r\n        filter.codePostal.latitude,\r\n        filter.codePostal.longitude,\r\n      ];\r\n      setState(cpState);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filter.codePostal.latitude, filter.codePostal.longitude]);\r\n\r\n  useEffect(() => {\r\n    if (activeBenefit?.user?.latitude && activeBenefit?.user?.longitude) {\r\n      const cpState = { ...state };\r\n      cpState.map.center = [\r\n        activeBenefit.user.latitude,\r\n        activeBenefit.user.longitude,\r\n      ];\r\n      setState(cpState);\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activeBenefit]);\r\n\r\n  const rowRender = (row) => (\r\n    <PrestationFiche\r\n      activeBenefit={activeBenefit}\r\n      setActiveBenefit={setActiveBenefit}\r\n      key={row.id}\r\n      row={row}\r\n    />\r\n  );\r\n\r\n  const showData = () => {\r\n    if (service === false || isPending)\r\n      return (\r\n        <div className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n          Chargement...\r\n        </div>\r\n      );\r\n    else if (benefits.length === 0)\r\n      return (\r\n        <h3\r\n          style={{\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n            fontSize: \"22px\",\r\n            fontWeight: \"600\",\r\n          }}\r\n        >\r\n          Aucune donnée\r\n        </h3>\r\n      );\r\n\r\n    return benefits.map((row) => {\r\n      return rowRender(row);\r\n    });\r\n  };\r\n\r\n  const _onChildClick = (key, childProps) => {\r\n    let i = null;\r\n    const benefit = benefits.length\r\n      ? benefits.find((val, index) => {\r\n          if (val.id === childProps.id) {\r\n            i = index;\r\n            return true;\r\n          }\r\n        })\r\n      : { id: null };\r\n    if (benefit.id) {\r\n      setActiveBenefit(benefit);\r\n      if (isTabletOrMobile) {\r\n        refSlider.slickGoTo(i);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTitleService = () => {\r\n    return `${service.name} : ${benefits.length} réparateur${\r\n      benefits.length > 1 ? \"(s)\" : \"\"\r\n    }`;\r\n  };\r\n\r\n  const places = benefits.length\r\n    ? benefits.map((row) => {\r\n        return (\r\n          <PrestationFicheMap\r\n            key={row.id}\r\n            lat={row.user.latitude}\r\n            lng={row.user.longitude}\r\n            text={\r\n              row.typeService === \"forfait\" ? `${row.minPrice} €` : \"Sur devis\"\r\n            }\r\n            id={row.id}\r\n            // use your hover state (from store, react-controllables etc...)\r\n            activeBenefit={activeBenefit}\r\n          />\r\n        );\r\n      })\r\n    : \"\";\r\n\r\n  const settings = {\r\n    className: \"slider variable-width\",\r\n    infinite: false,\r\n    centerMode: true,\r\n    slidesToShow: 2,\r\n    slidesToScroll: 1,\r\n    variableWidth: true,\r\n    arrows: false,\r\n    focusOnSelect: true,\r\n    initialSlide: 1,\r\n    responsive: [\r\n      {\r\n        breakpoint: 575,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n          initialSlide: 0,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <ListFichePrestation>\r\n     <CordStyle>\r\n                <div className=\"cordtitle\" > Découvrez nos artisans en France</div>\r\n            </CordStyle>\r\n\r\n      <Row className=\"bloc-lists-prstation-items\">\r\n   \r\n        <Col lg={7} className=\"bloc-map-list\">\r\n          <GoogleMap\r\n            apiKey={vars.mapsApiKey}\r\n            center={state.map.center}\r\n            zoom={state.map.zoom}\r\n            hoverDistance={K_SIZE / 2}\r\n            onChildClick={_onChildClick}\r\n            onGoogleApiLoaded={({ map, maps }) => {\r\n              //console.log(\"map is loaded.\");\r\n            }}\r\n          >\r\n            {places}\r\n          </GoogleMap>\r\n        </Col>\r\n      </Row>\r\n    </ListFichePrestation>\r\n  );\r\n}\r\n"
        }
    ]
}