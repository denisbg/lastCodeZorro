{
    "sourceFile": "src/views/front/mapArtisanPrestationsUnivers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1714998077228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1714998095378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n import { useParams, useHistory } from \"react-router-dom\";\r\n import NewMap from \"../../components/front/newMap.js\";\r\n \r\n \r\n-export default function MapArtisansUnivers(props) {\r\n+export default function MapArtisanPrestationsUnivers(props) {\r\n \r\n   const isOlder = true;\r\n   const { slugIdUniverse, slugIdService } = useParams();\r\n   const [isPendingShowcase, setPendingShowCase] = useState(false);\r\n"
                }
            ],
            "date": 1714998077228,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { ROLES, PREFIX_BACKEND } from \"./../../vars.js\";\r\nimport \"nouislider/distribute/nouislider.css\";\r\nimport endPoints from \"../../config/endPoints\";\r\nimport connector from \"../../connector\";\r\nimport { RepairManlatlng } from '../../components/front/repairManPositions.js'\r\nimport ArtPrestationFiche from \"../../components/front/artPrestationFiche.js\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport NewMap from \"../../components/front/newMap.js\";\r\n\r\n\r\nexport default function MapArtisansUnivers(props) {\r\n\r\n  const isOlder = true;\r\n  const { slugIdUniverse, slugIdService } = useParams();\r\n  const [isPendingShowcase, setPendingShowCase] = useState(false);\r\n\r\n  const [isPending, setIsPending] = useState(0);\r\n  const [tabArray, setxObjElem] = useState([]);\r\n  const [repairManArr, setFilteredObject] = useState([]);\r\n  const [showCasesArray, setShowCases] = useState([]);\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const perPageDesMob = isMobile ? 10 : 20;\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [repairMans, setRepairMans] = useState([]);\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n  const isDesktopOrLaptop = useMediaQuery({ query: \"(min-width: 994px)\", });\r\n  const [click, setClick] = useState(false);\r\n  const toggleFilter = () => setClick(!click);\r\n  const toogleCloseFilter = () => setClick(false);\r\n  const [taskUsersShowCaseIsPending, setTaskUserWithShowCaseIsPending] = useState(false);\r\n  const [displayUniverseUsersIsReady, setDisplayUniverseUsersIsReady] = useState(false);\r\n  const [activeBenefit, setActiveBenefit] = useState({ id: null });\r\n  const [currentIdFromMap, setCurrentIdFromMap] = useState({ id: null });\r\n\r\n  useEffect(() => {\r\n\r\n    const universId = slugIdUniverse.split(\"-\").pop();\r\n    //retrieve user who have services (showcase contains the universe and the service)\r\n    // getUserWithShowCase();\r\n    getMyocUniverseRepairmen(universId);\r\n    //console.log(\"STEP 1  getMyocUniverseRepairmen  \", result);\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  const getMyocUniverseRepairmen = (universeId) => {\r\n \r\n    let userFieldMap = {\r\n      '@id': \"userId\", id: \"id\",\r\n      username: \"username\", firstName: \"firstname\", lastName: \"lastname\",\r\n      email: \"email\", enterprise: \"label\", gender: \"genre\", postalCode: \"postalcode\",\r\n      city: \"city_code\", latitude: \"lat\", longitude: \"lng\", picture: \"picture\",\r\n      description: \"description\", facebook: \"facebook\", instagram: \"instagram\", bonusreparation: \"bonusreparation\",\r\n      address: \"address\", roles: \"roles\",\r\n    }\r\n    setTaskUserWithShowCaseIsPending(true);\r\n    connector({\r\n      method: \"post\",\r\n      url: `${endPoints.ANONYMOUS_UNIVERSE_REPAIRMEN}?universId=${universeId}`,\r\n      data: {},\r\n      success: (response) => {\r\n        const universId = slugIdUniverse.split(\"-\").pop();\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        //console.log(\"STEP MYOC 1.1 :Success getMyocUniverseRepairmen \", universId, arrayObj);\r\n\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          var result = [];\r\n          let obj = arrayObj[i];\r\n          const found = obj[\"roles\"].find((element) => element == ROLES.ROLE_REPAIRMAN);\r\n          let toKeep = (found == ROLES.ROLE_REPAIRMAN);\r\n          if (toKeep) {\r\n            Object.entries(obj).forEach(entry => {\r\n              const [key, value] = entry;\r\n              let hasKey = userFieldMap.hasOwnProperty(key);\r\n              if (hasKey) {\r\n                result[userFieldMap[key]] = value;\r\n              }\r\n            });\r\n           \r\n              tabArray.push(result);\r\n             \r\n          }\r\n          else {\r\n            //console.log(\"STEP 2.32  user is not a repairman for this universe\", obj);\r\n          }\r\n         \r\n        }\r\n        //console.log(\"STEP MYOC 1.3 :Success getMyocUniverseRepairmen \",tabArray);\r\n\r\n        //var result = repairmanFilterByUniverse(universId, arrayObj);\r\n        //return (arrayObj);\r\n      },\r\n      catch: (error) => {\r\n          console.log(\"STEP MYOC 1.1\", error);\r\n        }\r\n      });\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  const getUserWithShowCase = () => {\r\n    if (taskUsersShowCaseIsPending) return false;\r\n    setTaskUserWithShowCaseIsPending(true);\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.ANONYMOUS_USERS_REPAIRMAN_UNIVERSES}?order[enterprise]=asc&page=1&itemsPerPage=1000`,\r\n      data: {},\r\n      success: (response) => {\r\n        const universId = slugIdUniverse.split(\"-\").pop();\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        console.log(\"STEP 1 :Success getUserWithShowCase  (univerID would be the good one) RETRIEVE USER/UNIVERs WITH SHOWCASE\", universId, arrayObj);\r\n        var result = repairmanFilterByUniverse(universId, arrayObj);\r\n        console.log(\"STEP 1.1 :filter UnniverID would be the good one) RETRIEVE USER/UNIVERs WITH SHOWCASE\", universId, result);\r\n        filterRepairMenOnly(result);\r\n        setTaskUserWithShowCaseIsPending(false);\r\n        return (result);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n  const _onChildClick = (key, childProps) => {\r\n\r\n    let i = null;\r\n     \r\n  };\r\n  // Push in an array the returns with repair man from the universe value to prepare display\r\n  // \r\n  const repairmanFilterByUniverse = ((universId, showCasesArray) => {\r\n    let xOneRows = [];\r\n    let xi = 0;\r\n    //console.log(\"STEP TU x08  repairmanFilterByUniverse showCasesArray \", showCasesArray)\r\n    Object.entries(showCasesArray).forEach(entry => {\r\n      const [key, value] = entry;\r\n      let oneUser = value;\r\n      let showcases = oneUser['showcases'];\r\n      if (showcases != null) {\r\n        Object.entries(showcases).forEach(entry => {\r\n          const [key, value] = entry;\r\n          let xOneCol = [];\r\n          let showcase = value;\r\n          xOneCol[\"user_id\"] = oneUser['@id'].split(\"/\").pop();\r\n          xOneCol[\"api_user\"] = oneUser['@id'];\r\n          xOneCol[\"user_lastName\"] = oneUser['lastName'];\r\n          xOneCol[\"univers_name\"] = showcase['name'];\r\n          xOneCol[\"univers_id\"] = showcase['@id'].split(\"/\").pop();\r\n          let isAlreadyIn = xOneRows.includes(xOneCol[\"user_id\"]);\r\n\r\n          if (xOneCol[\"univers_id\"] == universId && !isAlreadyIn) {\r\n            xOneRows[xi] = xOneCol;\r\n            xi++;\r\n          }\r\n        });\r\n      }\r\n    });\r\n      //setxObjElem(xOneRows);\r\n    return xOneRows;\r\n  });\r\n\r\n  const userIsInThisUniverse = (api_user, showCasesArray) => {\r\n    const universId = slugIdUniverse.split(\"-\").pop();\r\n    //console.log(\"STEP 4 1 LOOK IF SHOWCASE EMPTY: ERROR\", showCasesArray);\r\n    //console.log(\"STEP 4 2 CHECK PARAM userId UniversId\", api_user, universId);\r\n    let zFound = false;\r\n    //console.log(\"STEP 4 3 userIsInThisUniverse : len\", showCasesArray.length);\r\n    for (let i = 0; i < showCasesArray.length; i++) {\r\n      if (showCasesArray[i].api_user === api_user) {\r\n        if (showCasesArray[i].univers_id === universId) {\r\n          zFound = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return zFound;\r\n  }\r\n\r\n\r\n\r\n  const setImap = (idFromMap) => {\r\n    const data = \"Donn√©es importantes NAV LIST\";\r\n    //props.handleParentEvent(row, completeData);\r\n    // render <button onClick={handleClick}>Cliquez-moi</button>\r\n  }\r\n  const filterRepairMenOnly = (showCasesArray) => {\r\n    let userFieldMap = {\r\n      '@id': \"userId\", id: \"id\",\r\n      username: \"username\", firstName: \"firstname\", lastName: \"lastname\",\r\n      email: \"email\", enterprise: \"label\", gender: \"genre\", postalCode: \"postalcode\",\r\n      city: \"city_code\", latitude: \"lat\", longitude: \"lng\", picture: \"picture\",\r\n      description: \"description\", facebook: \"facebook\", instagram: \"instagram\", bonusreparation: \"bonusreparation\",\r\n      address: \"address\", roles: \"roles\",\r\n    }\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.USERS_REPAIRMAN_PUBLIC}?order[enterprise]=asc`,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        console.log(\"STEP 2.1  TU: CHECK WARNING Contents of showCasesArray\", arrayObj);\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          var result = [];\r\n          let obj = arrayObj[i];\r\n          const found = obj[\"roles\"].find((element) => element == ROLES.ROLE_REPAIRMAN);\r\n          let toKeep = (found == ROLES.ROLE_REPAIRMAN);\r\n          if (toKeep) {\r\n            Object.entries(obj).forEach(entry => {\r\n              const [key, value] = entry;\r\n              let hasKey = userFieldMap.hasOwnProperty(key);\r\n              if (hasKey) {\r\n                result[userFieldMap[key]] = value;\r\n              }\r\n            });\r\n            //console.log(\"STEP 2.3 VERIFY each USER HAVE SHOWCASE\", result);\r\n            if (userIsInThisUniverse(result['userId'], showCasesArray)) {\r\n              //console.log(\"STEP 2.31  user is A REPAIRMAN for this universe\", obj);\r\n              tabArray.push(result);\r\n            }\r\n            //else {\r\n\r\n            // }\r\n          }\r\n          else {\r\n            //console.log(\"STEP 2.32  user is not a repairman for this universe\", obj);\r\n          }\r\n        };\r\n       // setxObjElem(tabArray);\r\n        setDisplayUniverseUsersIsReady(true);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      }\r\n    });\r\n  };\r\n  /*\r\n    const showData = () => {\r\n      let data = RepairManlatlng;\r\n      if (!displayUniverseUsersIsReady) {\r\n        return <></>\r\n      }\r\n      else {\r\n        let xdata = [];\r\n        let xrow = 0;\r\n        if (tabArray) {\r\n          tabArray.forEach((item, index) => {\r\n  \r\n            if (item['picture'] !== null) {\r\n              //if (xrow < 12) {\r\n              xdata[xrow] = item;\r\n              //}\r\n              xrow++;\r\n            }\r\n          })\r\n        }\r\n        data = xdata;\r\n      }\r\n      if (data === false)\r\n        return (\r\n          <p className=\"loading-table\" style={{ textAlign: \"center\" }}>\r\n            Chargement...\r\n          </p>\r\n        );\r\n      if (data.length === 0)\r\n        return (\r\n          <h3\r\n            style={{\r\n              textAlign: \"center\",\r\n              width: \"100%\",\r\n              fontSize: \"22px\",\r\n              fontWeight: \"600\",\r\n              margin: \"40px 0\",\r\n            }}\r\n          >\r\n            Aucune donn√©e1\r\n          </h3>\r\n        );\r\n      return (\r\n        data.map(rowRenderArt)\r\n      )\r\n    };\r\n    const rowRenderArt = (row) => (\r\n      <ArtPrestationFiche\r\n  \r\n        activeBenefit={activeBenefit}\r\n        setActiveBenefit={setActiveBenefit}\r\n        key={row.email} row={row} id={row.id} />\r\n  \r\n  \r\n    )\r\n    */\r\n\r\n  return (<NewMap\r\n    tabArray={tabArray}\r\n    position={tabArray}\r\n    displayUniverseUsersIsReady={true}\r\n >\r\n  </NewMap>);\r\n  /*\r\nreturn(    <Container style={{ marginTop: 50 }}>\r\n  <Row>\r\n    <Col style={{\r\n      marginBottom: '3%', marginTop: '0%', width: '100%', height: '100%', color: '#465A61', fontSize: 40,\r\n      fontFamily: 'Helvetica Neue LT Std', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'\r\n    }}>\r\n      D√©couvrez nos artisans en France\r\n    </Col>\r\n  </Row>\r\n  <Row className=\"bloc-lists-prstation-items\">\r\n    <Col lg={5} className=\"content-lists-prstation-items\">\r\n      {isDesktopOrLaptop && (\r\n\r\n        <div className=\"content-lists-prstation-items\">\r\n          <div className=\"lists-prstation-items\" >\r\n\r\n            <div style={{ textAlign: \"left\", width: \"100%\", height: 400, color: '#444444', fontSize: 10, fontFamily: 'Poppins', fontWeight: '500' }}>\r\n              <p style={{\r\n                paddingRight: '5%', paddingLeft: '5%',\r\n                width: '90%', height: '100vh',\r\n                color: 'rgb(68, 68, 68)', overflow: 'scroll', fontSize: 8,\r\n                fontFamily: 'Poppins', fontWeight: '500',\r\n                boxShadow: \"2px 5px 5px rgb(68, 68, 68)\",\r\n                fontSize: 12\r\n              }}>\r\n                {showData()}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isTabletOrMobile && (\r\n        {})}\r\n    </Col>\r\n    <Col lg={7} className=\"bloc-map-list\">\r\n      <NewMap \r\n      position = {tabArray} \r\n      displayUniverseUsersIsReady={displayUniverseUsersIsReady}\r\n      >\r\n   \r\n      </NewMap>\r\n    </Col>\r\n  </Row>\r\n</Container>\r\n);*/\r\n}\r\n"
        }
    ]
}