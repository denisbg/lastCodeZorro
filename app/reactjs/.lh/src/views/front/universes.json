{
    "sourceFile": "src/views/front/universes",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1706547518986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1706547518986,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport imgMaintenence from \"../../assets/images/img-page-maintenace.svg\";\r\nimport {\r\n  BlocFilterStyle,\r\n  ContentPageStyle,\r\n} from \"../../assets/styles/frontGlobalStyle\";\r\nimport { SearchIcon } from \"../../assets/styles/icons\";\r\nimport SelectCat from \"../../components/categories/selectCat\";\r\nimport FoundPage from \"../../components/foundPage\";\r\nimport BannerPage from \"../../components/front/bannerPage\";\r\nimport ListProduits from \"../../components/front/listProduits\";\r\nimport Loader from \"../../components/loader\";\r\nimport Breadcrumb from \"../../components/ui-elements/breadcrumb\";\r\nimport InputAutoComplete from \"../../components/ui-elements/inputAutoComplete\";\r\nimport InputSearchKeyword from \"../../components/ui-elements/inputSearchKeyword\";\r\nimport Select from \"../../components/ui-elements/select\";\r\nimport endPoints from \"../../config/endPoints\";\r\nimport ROUTES from \"../../config/routes\";\r\nimport connector from \"../../connector\";\r\nimport { clearErrors } from \"../../helper/form\";\r\nimport Base from \"../../theme/front/base\";\r\n\r\n\r\n\r\n\r\n\r\nimport EnteteUnivers from \"./tunnel/enteteUnivers\";\r\n\r\n\r\nexport default function Universe() {\r\n  const isDisplayFilter = false;\r\n  const activedEtape = 1;\r\n  const isTabletOrMobile = useMediaQuery({ query: \"(max-width: 993px)\" });\r\n  const isDesktopOrLaptop = useMediaQuery({\r\n    query: \"(min-width: 994px)\",\r\n  });\r\n  const [toggleFilter, setToggleFilter] = useState(false);\r\n  const history = useHistory();\r\n  const [defaultKeywordId] = useState(localStorage.getItem(\"keywordId\"));\r\n  const [defaultKeywordBy] = useState(localStorage.getItem(\"keywordBy\"));\r\n  const [defaultKeywordVal] = useState(localStorage.getItem(\"keywordVal\"));\r\n  const [defaultCategory, setDefaultCategory] = useState(\r\n    parseInt(localStorage.getItem(\"defaultCategory\"))\r\n  );\r\n  const [defaultSubCategory, setDefaultSubCategory] = useState(\r\n    JSON.parse(localStorage.getItem(\"defaultSubCategory\") || null)\r\n  );\r\n  const [defaultCodePostal] = useState(localStorage.getItem(\"codePostal\"));\r\n  const [defaultLatitude] = useState(\r\n    parseFloat(localStorage.getItem(\"latitude\"))\r\n  );\r\n  const [defaultLongitude] = useState(\r\n    parseFloat(localStorage.getItem(\"longitude\"))\r\n  );\r\n\r\n  const perPageDesMob = isDesktopOrLaptop ? 20 : 8;\r\n  const { slugIdUniverse } = useParams();\r\n  const [placeIsSelected, setPlaceIsSelected] = useState(false);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [isPendingLatLng, setIsPendingLatLng] = useState(true);\r\n  const [universe, setUniverse] = useState(false);\r\n  const [perPage, setPerPage] = useState(perPageDesMob);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [services, setServices] = useState([]);\r\n  const [totalServices, setTotalServices] = useState(0);\r\n  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n  const universeSelector = useSelector((state) => state.universe);\r\n  const [filter, setFilter] = useState({\r\n    universe: {\r\n      label: \"Univers\",\r\n      placeholder: \"Choisir dans la liste\",\r\n      options: [{ label: \"Tous les univers\", value: \"\", category: [] }],\r\n      value: \"\",\r\n      category: [],\r\n      nameCategory: \"\",\r\n      nameSubCategory: \"\",\r\n      requireSearchSubCategory: false,\r\n      isSearchable: true,\r\n      error: false,\r\n      infoBull: false,\r\n      textInfoBulle:\r\n        \"Veuillez sélectionner un univers dans la liste pour lancer une recherche\",\r\n    },\r\n    category: {\r\n      label: \"Catégorie(s)\",\r\n      placeholder: \"Choisir dans la liste\",\r\n      options: [],\r\n      value: null,\r\n      error: false,\r\n      infoBull: false,\r\n      textInfoBulle:\r\n        \"Veuillez sélectionner une catégorie dans la liste pour lancer une recherche\",\r\n    },\r\n    subCategory: {\r\n      label: \"Sous-catégorie(s)\",\r\n      placeholder: \"Affiner votre recherche\",\r\n      options: [],\r\n      value: null,\r\n      hideOptions: true,\r\n      error: false,\r\n      infoBull: false,\r\n      textInfoBulle:\r\n        \"Veuillez sélectionner une sous-catégorie dans la liste pour lancer une recherche\",\r\n    },\r\n    keyword: {\r\n      label: \"Réparer quoi\",\r\n      type: \"text\",\r\n      name: \"keyword\",\r\n      placeholder: \"Rentrer un mot clé\",\r\n      value: defaultKeywordVal ? defaultKeywordVal : \"\",\r\n      options: [],\r\n      active:\r\n        defaultKeywordBy && defaultKeywordId\r\n          ? { id: defaultKeywordId, by: defaultKeywordBy }\r\n          : {},\r\n      error: false,\r\n      required: false,\r\n    },\r\n  });\r\n  const [filterMap, setFilterMap] = useState({\r\n    codePostal: {\r\n      name: \"codePostal\",\r\n      type: \"text\",\r\n      label: \"Où\",\r\n      placeholder: \"Saisir un code postal\",\r\n      value:\r\n        defaultCodePostal && defaultLatitude && defaultLongitude\r\n          ? defaultCodePostal\r\n          : \"\",\r\n      latitude:\r\n        defaultCodePostal && defaultLatitude && defaultLongitude\r\n          ? defaultLatitude\r\n          : null,\r\n      longitude:\r\n        defaultCodePostal && defaultLatitude && defaultLongitude\r\n          ? defaultLongitude\r\n          : null,\r\n      error: false,\r\n      required: true,\r\n      infoBulle: false,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (toggleFilter) {\r\n      document.body.classList.add(\"menu-is-show\");\r\n    } else {\r\n      document.body.classList.remove(\"menu-is-show\");\r\n    }\r\n  }, [toggleFilter]);\r\n\r\n  useEffect(() => {\r\n    if (universeSelector.allUniverses) {\r\n      let cpFilter = { ...filter };\r\n      cpFilter.universe.options = [];\r\n      for (let i = 0; i < universeSelector.allUniverses.length; i++) {\r\n        let o = universeSelector.allUniverses[i];\r\n        cpFilter.universe.options.push({\r\n          label: o.name,\r\n          value: o.id,\r\n          slug: o.slug,\r\n        });\r\n      }\r\n      cpFilter.universe.value = parseInt(slugIdUniverse.split(\"-\").pop());\r\n      setFilter(cpFilter);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [universeSelector, slugIdUniverse]);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"codePostal\")) {\r\n      getUniverse();\r\n    } else {\r\n      localStorage.setItem(\"errorcCodePostal\", \"codePostal non define\");\r\n      history.push(ROUTES.HOME.url);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [slugIdUniverse]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"Universe\", function (event) {\r\n      if (event?.detail?.url && event?.detail?.id) {\r\n        const cpFilter = { ...filter };\r\n        cpFilter.keyword.value = \"\";\r\n        cpFilter.keyword.active = { id: \"\", by: \"\", index: 0 };\r\n        cpFilter.keyword.options = [];\r\n        localStorage.setItem(\"keywordVal\", \"\");\r\n        localStorage.setItem(\"keywordBy\", \"\");\r\n        localStorage.setItem(\"keywordId\", \"\");\r\n        localStorage.setItem(\"defaultCategory\", \"\");\r\n        localStorage.setItem(\"defaultSubCategory\", \"\");\r\n        setDefaultCategory(null);\r\n        setDefaultSubCategory(null);\r\n        setFilter(cpFilter);\r\n      } else {\r\n        console.log(\"error event params.\");\r\n      }\r\n    });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (universe && !isPendingLatLng) {\r\n      getServices(false, 0);\r\n    }\r\n  }, [universe]);\r\n\r\n  useEffect(() => {\r\n    if (universe && !isPendingLatLng) {\r\n      getServices(false, null);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isPendingLatLng, pageIndex, perPage]);\r\n\r\n  const getUniverse = () => {\r\n    const id = slugIdUniverse.split(\"-\").pop();\r\n    if (id) {\r\n      connector({\r\n        method: \"get\",\r\n        url: `${endPoints.ANONYMOUS_UNIVERSE}${id}/categories`,\r\n        success: (response) => {\r\n          const arrayObj = response.data || { categories: [] };\r\n          setUniverse(arrayObj);\r\n\r\n          let cpFilter = { ...filter };\r\n          cpFilter.category.options = [];\r\n\r\n          cpFilter.category.value = null;\r\n          cpFilter.subCategory.value = null;\r\n          cpFilter.subCategory.options = [];\r\n\r\n          if (response.data?.nameCategory) {\r\n            cpFilter.category.label = response.data.nameCategory;\r\n          }\r\n\r\n          if (response.data?.nameSubCategory) {\r\n            cpFilter.subCategory.label = response.data.nameSubCategory;\r\n          }\r\n\r\n          if (response.data?.requireSearchSubCategory != undefined) {\r\n            cpFilter.universe.requireSearchSubCategory =\r\n              response.data.requireSearchSubCategory;\r\n          }\r\n\r\n          for (let i = 0; i < arrayObj.categories.length; i++) {\r\n            let o = arrayObj.categories[i];\r\n\r\n            if (o.id == defaultCategory) {\r\n              cpFilter.category.value = defaultCategory;\r\n              cpFilter.subCategory.value = defaultSubCategory;\r\n              for (let j = 0; j < o.children.length; j++) {\r\n                cpFilter.subCategory.options.push({\r\n                  label: o.children[j].name,\r\n                  value: o.children[j].id,\r\n                });\r\n              }\r\n            }\r\n            cpFilter.category.options.push({ label: o.name, value: o.id });\r\n          }\r\n          setFilter(cpFilter);\r\n        },\r\n        catch: (error) => {\r\n          console.log(error);\r\n          if (error.response?.data?.code !== undefined) {\r\n            if (error.response.data.code === 401) {\r\n              NotificationManager.error(\"Univers introuvable.\", \"\");\r\n            } else if (error.response.data.message !== undefined) {\r\n              NotificationManager.error(error.response.data.message, \"\");\r\n            }\r\n          }\r\n          setUniverse(null);\r\n        },\r\n      });\r\n    } else {\r\n      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n    }\r\n  };\r\n\r\n  const getServices = (refresh = false, index = null) => {\r\n    index = index != null ? index : pageIndex;\r\n    setPageIndex(index);\r\n    if (!placeIsSelected) {\r\n      msgErrors({\r\n        codePostal: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      setFilter(clearErrors(filter));\r\n      setFilterMap(clearErrors(filterMap));\r\n      if (refresh || (filterMap.codePostal.latitude && filterMap.codePostal.value)) {\r\n        let condition = \"\";\r\n        if (filter.category.value) {\r\n          condition += `&categories.parent.id=${filter.category.value}`;\r\n        }\r\n        if (filter.subCategory.value && filter.subCategory.value.length) {\r\n          for (let i = 0; i < filter.subCategory.value.length; i++) {\r\n            condition += `&categories.id[]=${filter.subCategory.value[i].value}`;\r\n          }\r\n        }\r\n        /*  if (\r\n          filter.keyword.active.id &&\r\n          filter.keyword.active.by &&\r\n          filter.keyword.value.trim()\r\n        ) {\r\n          condition += `&${filter.keyword.active.by}=${filter.keyword.value}`;\r\n        } else if (filter.keyword.value.trim()) {\r\n          condition += `&or[name,categories.parent.name,categories.name,description]=${filter.keyword.value}`;\r\n        } */\r\n\r\n        if (filterMap.codePostal.latitude && filterMap.codePostal.longitude) {\r\n          condition += `&latitude=${filterMap.codePostal.latitude}&longitude=${filterMap.codePostal.longitude}`;\r\n        }\r\n\r\n        const cpParamsUrlService = `page=${parseInt(index) + 1\r\n          }&itemsPerPage=${perPage}&categories.parent.universe.id=${universe.id\r\n          }${condition}`;\r\n\r\n        if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n          setParamsUrlService(cpParamsUrlService);\r\n          connector({\r\n            method: \"get\",\r\n            url: `${endPoints.ANONYMOUS_SERVICES_CATALOG}?${cpParamsUrlService}`,\r\n            success: (response) => {\r\n              setServices(response.data[\"hydra:member\"] || []);\r\n              setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n              setIsPending(false);\r\n            },\r\n            catch: (error) => {\r\n              console.log(error);\r\n              setIsPending(false);\r\n            },\r\n          });\r\n        } else {\r\n          setIsPending(false);\r\n        }\r\n      } else {\r\n        msgErrors({\r\n          codePostal: !(filterMap.codePostal.latitude && filterMap.codePostal.value),\r\n        });\r\n        setIsPending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const refreshSubCategory = (cpFilter, cpCategories) => {\r\n    const index = cpCategories.findIndex(\r\n      (cat) => cat.id === cpFilter.category.value\r\n    );\r\n    cpFilter.subCategory.options = [];\r\n    let subCat = [];\r\n    if (index > -1) {\r\n      subCat = cpCategories[index].children;\r\n    } else {\r\n      const allSubCategory = [];\r\n      for (let i = 0; i < cpCategories.length; i++) {\r\n        allSubCategory.push(...cpCategories[i].children);\r\n      }\r\n      subCat = allSubCategory;\r\n    }\r\n    for (let i = 0; i < subCat.length; i++) {\r\n      cpFilter.subCategory.options.push({\r\n        label: subCat[i].name,\r\n        value: subCat[i].id,\r\n      });\r\n    }\r\n    if (cpFilter.category.value) cpFilter.subCategory.value = [];\r\n    return cpFilter;\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    const cpFilter = { ...filter };\r\n    if (e.universe !== undefined) {\r\n      cpFilter.universe.error = e.universe;\r\n      cpFilter.universe.infoBull = e.universe;\r\n    }\r\n    if (e.category !== undefined) {\r\n      cpFilter.category.error = e.category;\r\n      cpFilter.category.infoBull = e.category;\r\n    }\r\n    if (e.subCategory !== undefined) {\r\n      cpFilter.subCategory.error = e.subCategory;\r\n      cpFilter.subCategory.infoBull = e.subCategory;\r\n    }\r\n\r\n    if (e.notice !== undefined) NotificationManager.error(e.notice, \"\");\r\n    setFilter(cpFilter);\r\n\r\n    const cpFilterMap = { ...filterMap };\r\n    if (e.codePostal !== undefined) {\r\n      cpFilterMap.codePostal.error = e.codePostal;\r\n      cpFilterMap.codePostal.infoBulle = e.codePostal;\r\n    }\r\n    setFilterMap(cpFilterMap);\r\n  };\r\n\r\n  if (universe === false) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <Base>\r\n      {universe ? (\r\n        <>\r\n          <BannerPage\r\n            universe={universe}\r\n            toggleFilter={toggleFilter}\r\n            setToggleFilter={setToggleFilter}\r\n          />\r\n          <ContentPageStyle>\r\n            <Container>\r\n              \r\n              {isDesktopOrLaptop && (\r\n                <Breadcrumb\r\n                  crumbs={[\r\n                    { name: \"Accueil\", path: \"/\" },\r\n                    { name: universe.name, path: \"/univers/\" + slugIdUniverse },\r\n                  ]}\r\n                />\r\n              )}\r\n\r\n              {isTabletOrMobile  && (\r\n                <div\r\n                  className=\"btn-toggle-filter toggel-filter-universe\"\r\n                  onClick={() => {\r\n                    setToggleFilter(!toggleFilter);\r\n                  }}\r\n                >\r\n                  <SearchIcon /> Rechercher une prestation\r\n                </div>\r\n              )}\r\n              { isDisplayFilter  && (\r\n              <BlocFilterStyle className=\"filter-universe\" open={toggleFilter}>\r\n                {isTabletOrMobile && (\r\n                  <button\r\n                    className=\"menu-burger is-opened\"\r\n                    onClick={() => {\r\n                      setToggleFilter(false);\r\n                    }}\r\n                  >\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </button>\r\n                )}\r\n\r\n                <div className=\"item-filter\">\r\n                  <Select\r\n                    {...filter.universe}\r\n                    element={filter.universe}\r\n                    setElement={(element) => {\r\n                      const cpFilter = { ...filter };\r\n                      cpFilter.universe = element;\r\n                      setFilter(cpFilter);\r\n                    }}\r\n                    onChange={(e) => {\r\n                      if (e.value && e.slug) {\r\n                        document.dispatchEvent(\r\n                          new CustomEvent(\"Universe\", {\r\n                            detail: {\r\n                              url: `/univers/${e.slug}-${e.value}`,\r\n                              id: e.value,\r\n                            },\r\n                          })\r\n                        );\r\n                        history.push(`/univers/${e.slug}-${e.value}`);\r\n\r\n                        msgErrors({\r\n                          universe: false,\r\n                          category: false,\r\n                          subCategory: false,\r\n                          codePostal: false,\r\n                        });\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"item-filter\">\r\n                  <Select\r\n                    {...filter.category}\r\n                    element={filter.category}\r\n                    setElement={(element) => {\r\n                      const cpFilter = { ...filter };\r\n                      cpFilter.category = element;\r\n                      setFilter(cpFilter);\r\n                    }}\r\n                    onChange={(e) => {\r\n                      if (filter.category.value !== e.value) {\r\n                        let cpFilter = { ...filter };\r\n                        cpFilter.category.value = e.value;\r\n                        cpFilter.category.error = false;\r\n                        localStorage.setItem(\"defaultCategory\", e.value);\r\n                        cpFilter = refreshSubCategory(\r\n                          cpFilter,\r\n                          universe.categories\r\n                        );\r\n                        if (e.value == \"\") {\r\n                          cpFilter.subCategory.value = \"\";\r\n                        }\r\n                        cpFilter.subCategory.error = false;\r\n                        cpFilter.subCategory.infoBull = false;\r\n                        setFilter(cpFilter);\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                {filter.category.value && (\r\n                  <div className=\"item-filter\">\r\n                    <SelectCat\r\n                      {...filter.subCategory}\r\n                      element={filter.subCategory}\r\n                      setElement={(element) => {\r\n                        const cpFilter = { ...filter };\r\n                        cpFilter.subCategory = element;\r\n                        setFilter(cpFilter);\r\n                      }}\r\n                      onChangeCallback={(response) => {\r\n                        const cpFilter = { ...filter };\r\n                        cpFilter.subCategory.value = response;\r\n                        cpFilter.subCategory.error = false;\r\n                        localStorage.setItem(\r\n                          \"defaultSubCategory\",\r\n                          JSON.stringify(response)\r\n                        );\r\n                        setFilter(cpFilter);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n\r\n                {/* <div className=\"item-filter\">\r\n                  <InputSearchKeyword\r\n                    filter={filter}\r\n                    setFilter={setFilter}\r\n                    universe={universe}\r\n                  />\r\n                </div> */}\r\n\r\n                <div className=\"item-filter\">\r\n                  <InputAutoComplete\r\n                    filter={filterMap}\r\n                    setFilter={setFilterMap}\r\n                    placeIsSelected={placeIsSelected}\r\n                    setPlaceIsSelected={setPlaceIsSelected}\r\n                    isPendingLatLng={isPendingLatLng}\r\n                    setIsPendingLatLng={setIsPendingLatLng}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"item-filter btn-filter-banner\">\r\n                  <button\r\n                    className=\"btn-search-filter\"\r\n                    onClick={() => {\r\n                      if (\r\n                        isTabletOrMobile &&\r\n                        placeIsSelected &&\r\n                        filterMap.codePostal.latitude &&\r\n                        filterMap.codePostal.value\r\n                      ) {\r\n                        setToggleFilter(false);\r\n                      }\r\n\r\n                      if (\r\n                        filter.universe.value &&\r\n                        filter.category.value &&\r\n                        ((Array.isArray(filter.subCategory.value) &&\r\n                          filter.subCategory.value.length > 0) ||\r\n                          !filter.universe.requireSearchSubCategory) &&\r\n                        placeIsSelected\r\n                      ) {\r\n                        getServices(false, 0);\r\n                      } else {\r\n                        msgErrors({\r\n                          universe: !filter.universe.value,\r\n                          category:\r\n                            filter.universe.value && !filter.category.value,\r\n                          subCategory:\r\n                            filter.universe.value &&\r\n                            filter.category.value &&\r\n                            !(\r\n                              Array.isArray(filter.subCategory.value) &&\r\n                              filter.subCategory.value.length > 0\r\n                            ) &&\r\n                            filter.universe.requireSearchSubCategory,\r\n                          codePostal: !placeIsSelected,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isDesktopOrLaptop && (\r\n                      <>\r\n                        <SearchIcon />\r\n                      </>\r\n                    )}\r\n                    {isTabletOrMobile && <>Recherche</>}\r\n                  </button>\r\n                </div>\r\n              </BlocFilterStyle>\r\n            )}\r\n            {activedEtape === 1 &&\r\n            <EnteteUnivers>                         \r\n            </EnteteUnivers>}\r\n            \r\n          \r\n            <ListProduits\r\n                data={services}\r\n                perPage={perPage}\r\n                setPerPage={setPerPage}\r\n                pageIndex={pageIndex}\r\n                setPageIndex={setPageIndex}\r\n                totalItemsLength={totalServices}\r\n                pagination={true}\r\n                isLoading={isPending}\r\n              />\r\n          \r\n            </Container>\r\n          </ContentPageStyle>\r\n        </>\r\n      ) : (\r\n        <FoundPage\r\n          noBase\r\n          title=\"Univers en cours de développement\"\r\n          image={imgMaintenence}\r\n        />\r\n      )}\r\n    </Base>\r\n  );\r\n}\r\n"
        }
    ]
}