{
    "sourceFile": "src/views/front/demand.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1719924082869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1719924082869,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport {\r\n  BackStyle,\r\n  ContentPageStyle,\r\n  LinNavkItem,\r\n} from \"../../assets/styles/frontGlobalStyle\";\r\nimport { BackIcon } from \"../../assets/styles/icons\";\r\nimport Loader from \"../../components/loader\";\r\nimport TabsStep from \"../../components/tabsStep\";\r\nimport endPoints from \"../../config/endPoints\";\r\nimport ROUTES from \"../../config/routes\";\r\nimport connector from \"../../connector\";\r\nimport { validForm } from \"../../helper/form\";\r\nimport {\r\n  deleteKeys,\r\n  getMsgError,\r\n  newObject,\r\n  renameKeys,\r\n  scrollTop,\r\n} from \"../../helper/functions\";\r\nimport Base from \"../../theme/front/base\";\r\nimport AdresseStep from \"./demandSteps/adresseStep\";\r\nimport ConfirmeStep from \"./demandSteps/confirmeStep\";\r\nimport InfosStep from \"./demandSteps/infosStep\";\r\nimport PaymentStep from \"./demandSteps/paymentStep\";\r\n\r\nexport default function Demand() {\r\n  const { slugIdUniverse, slugIdService, slugIdBenefit, idDeliveryMode } =\r\n    useParams();\r\n  const query = new URLSearchParams(useLocation().search);\r\n  const defaultCommand = query.get(\"command\")\r\n    ? parseInt(query.get(\"command\"))\r\n    : \"\";\r\n  const history = useHistory();\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const auth = useSelector((store) => store.auth);\r\n  const [user, setUser] = useState(false);\r\n  const [benefit, setBenefit] = useState(false);\r\n  const [command, setCommand] = useState(false);\r\n  const [paiement, setPaiement] = useState(false);\r\n  const [deliveryMode, setDeliveryMode] = useState(false);\r\n  const [message, setMessage] = useState(null);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const initState = {\r\n    id: { value: null, name: \"id\", error: false, required: false },\r\n    firstName: {\r\n      label: \"Prénom\",\r\n      name: \"firstName\",\r\n      placeholder: \"Prénom\",\r\n      value: \"\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n    },\r\n    lastName: {\r\n      label: \"Nom\",\r\n      name: \"lastName\",\r\n      placeholder: \"Nom\",\r\n      value: \"\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n    },\r\n    address: {\r\n      label: \"Adresse\",\r\n      name: \"address\",\r\n      placeholder: \"Adresse\",\r\n      value: \"\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n      autoComplete: \"false\",\r\n    },\r\n    latitude: {\r\n      name: \"latitude\",\r\n      value: \"\",\r\n      error: false,\r\n      required: false,\r\n    },\r\n    longitude: {\r\n      name: \"longitude\",\r\n      value: \"\",\r\n      error: false,\r\n      required: false,\r\n    },\r\n    placeIsSelected: {\r\n      name: \"placeIsSelected\",\r\n      value: true,\r\n      error: false,\r\n    },\r\n    additionalAddress: {\r\n      label: \"Complément d’adresse\",\r\n      name: \"additionalAddress\",\r\n      placeholder: \"Complément d’adresse\",\r\n      value: \"\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n    },\r\n    postalCode: {\r\n      label: \"Code postal\",\r\n      name: \"postalCode\",\r\n      placeholder: \"Code postal\",\r\n      value: \"\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n      autocomplete: false,\r\n      empty: true,\r\n      size: 5,\r\n      disabled: true,\r\n      editable: true,\r\n      isNumber: true,\r\n    },\r\n    city: {\r\n      label: \"Ville\",\r\n      name: \"city\",\r\n      placeholder: \"Ville\",\r\n      value: \"\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n      disabled: true,\r\n      editable: true,\r\n    },\r\n    sameAsInvoice: {\r\n      label: \"Identique à l’adresse de facturation\",\r\n      name: \"sameAsInvoice\",\r\n      value: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n    },\r\n  };\r\n  const [state, setState] = useState({\r\n    invoice: newObject({\r\n      ...initState,\r\n      type: { value: \"invoice\", name: \"type\", error: false },\r\n    }),\r\n    delivery: newObject({\r\n      ...initState,\r\n      type: { value: \"delivery\", name: \"type\", error: false },\r\n    }),\r\n    noteLivreur: {\r\n      name: `noteLivreur`,\r\n      label: \"Note d’information pour le livreur\",\r\n      type: \"text\",\r\n      placeholder: \"Digicode, étage etc…\",\r\n      value: \"\",\r\n      as: \"textarea\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n    },\r\n    infos: {\r\n      description: {\r\n        name: `description`,\r\n        label: \"Description du besoin\",\r\n        type: \"text\",\r\n        placeholder: \"Description du besoin\",\r\n        value: \"\",\r\n        as: \"textarea\",\r\n      },\r\n      picture: {\r\n        name: \"picture\",\r\n        placeholder: \"Insérer une photo\",\r\n        value: \"\",\r\n        file: null,\r\n        id: \"file-img\",\r\n        type: \"file\",\r\n        nameFile: null,\r\n        required: false,\r\n        error: false,\r\n        errorMessage: \"\",\r\n      },\r\n      files: {\r\n        name: \"files\",\r\n        value: [],\r\n        required: false,\r\n        error: false,\r\n        errorMessage: \"\",\r\n      },\r\n    },\r\n    payment: {\r\n      cardNumber: {\r\n        name: \"cardNumber\",\r\n        label: \"Numéro de la carte\",\r\n        type: \"text\",\r\n        required: true,\r\n        placeholder: \"Numéro de la carte\",\r\n        value: \"\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n        className: \"number-cart-payment\",\r\n        classInput: \"input-cart-payment\",\r\n      },\r\n      cardExpiry: {\r\n        name: \"cardExpiry\",\r\n        label: \"Expiration et pictogramme\",\r\n        type: \"text\",\r\n        required: true,\r\n        placeholder: \"MM/AA\",\r\n        value: \"\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n        className: \"date-cart-payment\",\r\n        classInput: \"input-cart-payment\",\r\n      },\r\n      cardCvc: {\r\n        name: \"cardCvc\",\r\n        label: \"\",\r\n        type: \"text\",\r\n        required: true,\r\n        placeholder: \"CVC\",\r\n        value: \"\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n        className: \"cvc-cart\",\r\n        classInput: \"input-cart-payment\",\r\n      },\r\n      paymentIntent: {\r\n        name: \"paymentIntent\",\r\n        value: \"\",\r\n        type: \"text\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n        required: false,\r\n      },\r\n      clientSecret: {\r\n        name: \"clientSecret\",\r\n        value: \"\",\r\n        type: \"text\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n        required: false,\r\n      },\r\n      amount: {\r\n        name: \"amount\",\r\n        value: \"\",\r\n        type: \"text\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n        required: false,\r\n      },\r\n      rightToCancel: {\r\n        name: \"rightToCancel\",\r\n        className: \"checkboxs-accept\",\r\n        label: (\r\n          <>\r\n            Je souhaite que la prestation commandée soit réalisée avant\r\n            l’expiration du délai de rétractation de 14 jours et renonce\r\n            expressément à mon droit de rétractation\r\n          </>\r\n        ),\r\n        value: false,\r\n        error: false,\r\n        errorMessage: \"\",\r\n        required: false,\r\n      },\r\n      acceptCommercialConditions: {\r\n        name: \"acceptCommercialConditions\",\r\n        className: \"checkboxs-accept\",\r\n        label: (\r\n          <>\r\n            J'ai lu et j'accepte\r\n            <LinNavkItem\r\n              to={ROUTES.CONDITION_COMMERCIALE.url}\r\n              target=\"_blank\"\r\n              className=\"payment-conditions-commerciale\"\r\n            >\r\n              les conditions commerciales*\r\n            </LinNavkItem>\r\n          </>\r\n        ),\r\n        value: false,\r\n        error: false,\r\n        errorMessage: \"\",\r\n        required: true,\r\n      },\r\n      propulseparstripe :{\r\n        name:\"propulseparstripe\",\r\n      }\r\n    },\r\n  });\r\n  const [checkCardPayment, setCheckCardPayment] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const cpStateDelivery = { ...state.delivery };\r\n    for (const key in cpStateDelivery) {\r\n      cpStateDelivery[key].required =  !state.invoice.sameAsInvoice.value;\r\n      cpStateDelivery[key].error = false;\r\n    }\r\n    cpStateDelivery.id.required = false;\r\n    cpStateDelivery.latitude.required = false;\r\n    cpStateDelivery.longitude.required = false;\r\n    cpStateDelivery.additionalAddress.required = false;\r\n    cpStateDelivery.sameAsInvoice.required = false;\r\n    setState({...state, delivery : cpStateDelivery});\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state.invoice.sameAsInvoice.value]);\r\n\r\n  useEffect(() => {\r\n    if (auth.user) {\r\n      getUser();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [auth.user]);\r\n\r\n  useEffect(() => {\r\n    getBenefit();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (defaultCommand) {\r\n      getCommand();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [defaultCommand]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo({ top: 150, behavior: \"smooth\" });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activeIndex]);\r\n\r\n  const getCommand = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.COMMAND}/${defaultCommand}/client`,\r\n      success: (response) => {\r\n        setCommand(response.data);\r\n        setActiveIndex(2);\r\n      },\r\n      catch: (error) => {\r\n        NotificationManager.error(getMsgError(error), \"\");\r\n        history.push(ROUTES.HOME.url);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getUser = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.USER}/${auth.user.id}/client`,\r\n      success: (response) => {\r\n        setUser(response.data);\r\n      },\r\n      catch: (error) => {\r\n        NotificationManager.error(getMsgError(error), \"\");\r\n        history.push(ROUTES.HOME.url);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getBenefit = () => {\r\n    const id = slugIdBenefit.split(\"-\").pop();\r\n    if (id) {\r\n      connector({\r\n        method: \"get\",\r\n        url: `${endPoints.ANONYMOUS_BENEFIT}/${id}/details`,\r\n        success: (response) => {\r\n          const obj = response.data || {};\r\n          setBenefit(obj);\r\n          for (let i = 0; i < obj.deliveryModes.length; i++) {\r\n            if (\r\n              parseInt(obj.deliveryModes[i].id) === parseInt(idDeliveryMode)\r\n            ) {\r\n              setDeliveryMode(obj.deliveryModes[i]);\r\n              break;\r\n            }\r\n          }\r\n        },\r\n        catch: (error) => {\r\n          NotificationManager.error(getMsgError(error), \"\");\r\n        },\r\n      });\r\n    } else {\r\n      NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n      history.push(ROUTES.HOME.url);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      const invoiceAddress = user.addresses.find((a) => a.type === \"invoice\");\r\n      const cpState = { ...state };\r\n      if (invoiceAddress) {\r\n        for (const key in invoiceAddress) {\r\n          if (cpState.invoice[key]) {\r\n            if (key === \"id\") {\r\n              cpState.invoice[key].value = invoiceAddress[\"@id\"];\r\n            } else {\r\n              cpState.invoice[key].value = invoiceAddress[key];\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        cpState.invoice.firstName.value = user.firstName || \"\";\r\n        cpState.invoice.lastName.value = user.lastName || \"\";\r\n        cpState.invoice.address.value = user.address || \"\";\r\n        cpState.invoice.latitude.value = user.latitude || null;\r\n        cpState.invoice.longitude.value = user.longitude || null;\r\n      }\r\n      cpState.invoice.sameAsInvoice.value = false;\r\n\r\n      const deliveryAddress = user.addresses.find((a) => a.type === \"delivery\");\r\n      if (deliveryAddress) {\r\n        for (const key in deliveryAddress) {\r\n          if (cpState.delivery[key]) {\r\n            if (key === \"id\") {\r\n              cpState.delivery[key].value = deliveryAddress[\"@id\"];\r\n            } else {\r\n              cpState.delivery[key].value = deliveryAddress[key];\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        cpState.delivery.firstName.value = user.firstName || \"\";\r\n        cpState.delivery.lastName.value = user.lastName || \"\";\r\n        cpState.delivery.address.value = user.address || \"\";\r\n        cpState.delivery.latitude.value = user.latitude || null;\r\n        cpState.delivery.longitude.value = user.longitude || null;\r\n        cpState.delivery.postalCode.value = user.postalCode || \"\";\r\n        cpState.delivery.city.value = user.city;\r\n      }\r\n      cpState.delivery.postalCode.disabled = cpState.delivery.postalCode.value\r\n        ? true\r\n        : false;\r\n      cpState.delivery.city.disabled = cpState.delivery.city.value\r\n        ? true\r\n        : false;\r\n      setState(cpState);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user]);\r\n\r\n  const getTabs = () => {\r\n    const tabs = {};\r\n    tabs.addresse_step = (\r\n      <AdresseStep\r\n        benefit={benefit}\r\n        deliveryMode={deliveryMode}\r\n        activeIndex={activeIndex}\r\n        setActiveIndex={setActiveIndex}\r\n        state={state}\r\n        setState={setState}\r\n        isPending={isPending}\r\n        setIsPending={setIsPending}\r\n      />\r\n    );\r\n\r\n    if (benefit && benefit.typeService === \"devis\") {\r\n      tabs.infos_step = (\r\n        <InfosStep\r\n          user={user}\r\n          benefit={benefit}\r\n          deliveryMode={deliveryMode}\r\n          activeIndex={activeIndex}\r\n          setActiveIndex={setActiveIndex}\r\n          state={state}\r\n          setState={setState}\r\n          message={message}\r\n          setMessage={setMessage}\r\n          isPending={isPending}\r\n          setIsPending={setIsPending}\r\n          saveAddresses={saveAddresses}\r\n        />\r\n      );\r\n    }\r\n\r\n    if (\r\n      benefit &&\r\n      (benefit.typeService === \"forfait\" ||\r\n        (benefit.typeService === \"devis\" && benefit.priceQuote > 0) ||\r\n        defaultCommand)\r\n    ) {\r\n      tabs.payment_step = (\r\n        <PaymentStep\r\n          user={user}\r\n          benefit={benefit}\r\n          deliveryMode={deliveryMode}\r\n          activeIndex={activeIndex}\r\n          setActiveIndex={setActiveIndex}\r\n          state={state}\r\n          setState={setState}\r\n          message={message}\r\n          setMessage={setMessage}\r\n          isPending={isPending}\r\n          setIsPending={setIsPending}\r\n          saveAddresses={saveAddresses}\r\n          savePaiement={savePaiement}\r\n          command={command}\r\n          defaultCommand={defaultCommand}\r\n          checkCardPayment={checkCardPayment}\r\n          setCheckCardPayment={setCheckCardPayment}\r\n        />\r\n      );\r\n    }\r\n\r\n    tabs.confirmation_step = (\r\n      <ConfirmeStep\r\n        state={state}\r\n        setState={setState}\r\n        benefit={benefit}\r\n        command={command}\r\n        paiement={paiement}\r\n        defaultCommand={defaultCommand}\r\n      />\r\n    );\r\n    return tabs;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (deliveryMode) {\r\n      const cpState = { ...state };\r\n      cpState.invoice.sameAsInvoice.value = deliveryMode.deliveryModeType\r\n        .requireDeliveryAddress\r\n        ? false\r\n        : true;\r\n      setState(cpState);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [deliveryMode]);\r\n\r\n  const getMenus = () => {\r\n    const menu = [];\r\n    menu.push({\r\n      key: \"addresse_step\",\r\n      title: \"Adresse\",\r\n      //buttonNextText: \"Valider\",\r\n    });\r\n    if (benefit && benefit.typeService === \"devis\") {\r\n      menu.push({\r\n        key: \"infos_step\",\r\n        title: \"Informations complémentaires\",\r\n        // buttonNextText: \"Valider\",\r\n        // buttonPrevText: \"Retour\",\r\n      });\r\n    }\r\n    if (\r\n      benefit &&\r\n      (benefit.typeService === \"forfait\" ||\r\n        (benefit.typeService === \"devis\" && benefit.priceQuote > 0) ||\r\n        defaultCommand)\r\n    ) {\r\n      menu.push({\r\n        key: \"payment_step\",\r\n        title: \"Paiement\",\r\n        // buttonNextText: \"Valider\",\r\n        // buttonPrevText: \"Retour\",\r\n      });\r\n    }\r\n    menu.push({\r\n      key: \"confirmation_step\",\r\n      title: \"Confirmation\",\r\n    });\r\n    return menu;\r\n  };\r\n\r\n  const saveAddresses = (makePayment = false) => {\r\n    setIsPending(true);\r\n\r\n    if (defaultCommand) {\r\n      setCheckCardPayment(true);\r\n      return;\r\n    }\r\n\r\n    const formInvoice = validForm(state.invoice);\r\n    const formDelivery = validForm(state.delivery);\r\n    const addresses = [];\r\n    addresses.push(formInvoice.rawData);\r\n    if (formInvoice.rawData.sameAsInvoice) {\r\n      formDelivery.rawData = {\r\n        ...formInvoice.rawData,\r\n        id: formDelivery.rawData.id,\r\n        type: \"delivery\",\r\n      };\r\n    }\r\n\r\n    addresses.push(formDelivery.rawData);\r\n\r\n    if (auth.user.id) {\r\n      connector({\r\n        method: \"put\",\r\n        url: `${endPoints.USER}/${auth.user.id}/addresses`,\r\n        data: { addresses },\r\n        success: (response) => {\r\n          const unusedKeys = [\r\n            \"id\",\r\n            \"type\",\r\n            \"sameAsInvoice\",\r\n            \"latitude\",\r\n            \"longitude\",\r\n            \"placeIsSelected\",\r\n          ];\r\n          formDelivery.rawData = deleteKeys(formDelivery.rawData, unusedKeys);\r\n          formInvoice.rawData = deleteKeys(formInvoice.rawData, unusedKeys);\r\n          saveCommand(\r\n            {\r\n              ...formDelivery.rawData,\r\n              ...renameKeys(formInvoice.rawData, { suffix: \"Invoice\" }),\r\n              client: `${endPoints.USER}/${auth.user.id}`,\r\n              benefit: benefit[\"@id\"],\r\n              deliveryMode: deliveryMode[\"@id\"],\r\n              id: null,\r\n              description: state.infos.description.value,\r\n              files: state.infos.files.value,\r\n              rightToCancel: state.payment.rightToCancel.value,\r\n              noteLivreur: state.noteLivreur.value,\r\n            },\r\n            makePayment\r\n          );\r\n        },\r\n        catch: (error) => {\r\n          msgErrors({ msg: getMsgError(error) });\r\n        },\r\n      });\r\n    } else {\r\n      msgErrors({\r\n        msg: \"Vous devez être connecté pour effectuer cette opération\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveCommand = (data, makePayment) => {\r\n    if (command) {\r\n      if (makePayment) {\r\n        setCheckCardPayment(true);\r\n      }\r\n      return;\r\n    }\r\n\r\n    connector({\r\n      method: \"post\",\r\n      url: `${endPoints.COMMAND}`,\r\n      data,\r\n      success: (response) => {\r\n        const obj = response.data;\r\n        setCommand(obj);\r\n        if (makePayment) {\r\n          setCheckCardPayment(true);\r\n        } else {\r\n          msgSuccessCommand();\r\n        }\r\n      },\r\n      catch: (error) => {\r\n        console.log(\"error\");\r\n        msgErrors({ msg: getMsgError(error) });\r\n      },\r\n    });\r\n  };\r\n\r\n  const savePaiement = () => {\r\n    const form = validForm(state.payment);\r\n    connector({\r\n      method: \"post\",\r\n      url: `${endPoints.PAIEMENT}`,\r\n      data: { command: command[\"@id\"], ...form.rawData },\r\n      success: (response) => {\r\n        setPaiement(response.data);\r\n        msgSuccessCommand();\r\n      },\r\n      catch: (error) => {\r\n        msgErrors({ msg: getMsgError(error) });\r\n      },\r\n    });\r\n  };\r\n\r\n  const msgSuccessCommand = () => {\r\n    const text =\r\n      benefit.typeService === \"forfait\"\r\n        ? \"Commande enregistré avec succès.\"\r\n        : \"Devis enregistré avec succès.\";\r\n    setMessage({ text, type: \"success\" });\r\n    setIsPending(false);\r\n    scrollTop();\r\n    setActiveIndex(activeIndex + 1);\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n    setIsPending(false);\r\n    scrollTop();\r\n  };\r\n\r\n  if (!benefit) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <Base className=\"fiche-prestation-page\">\r\n      <ContentPageStyle>\r\n        <Container>\r\n          {activeIndex === 0 ? (\r\n            <BackStyle\r\n              to={`/univers/${slugIdUniverse}/${slugIdService}/${slugIdBenefit}`}\r\n            >\r\n              <BackIcon />\r\n              <span>Retour à la prestation</span>\r\n            </BackStyle>\r\n          ) : getMenus()[activeIndex].key === \"confirmation_step\" ||\r\n            defaultCommand ? null : (\r\n            <BackStyle\r\n              to={\"#\"}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setActiveIndex(activeIndex - 1);\r\n                window.scrollTo({\r\n                  top: 150,\r\n                  behavior: \"smooth\",\r\n                });\r\n              }}\r\n            >\r\n              <BackIcon />\r\n              <span>Retour à l'étape précédente</span>\r\n            </BackStyle>\r\n          )}\r\n          <TabsStep\r\n            menu={getMenus()}\r\n            tabs={getTabs()}\r\n            activeIndex={activeIndex}\r\n          />\r\n        </Container>\r\n      </ContentPageStyle>\r\n    </Base>\r\n  );\r\n}\r\n"
        }
    ]
}