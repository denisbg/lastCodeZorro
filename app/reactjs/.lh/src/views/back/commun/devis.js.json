{
    "sourceFile": "src/views/back/commun/devis.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 68,
            "patches": [
                {
                    "date": 1713801620876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713801656200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n export default withRouter(function Devis({ match }) {\r\n   const dispatch = useDispatch();\r\n   const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const perPageDesMob = isMobile ? 8 : 100;\r\n+  const perPageDesMob = isMobile ? 8 : 2;\r\n   const query = new URLSearchParams(useLocation().search);\r\n   const defaultRepairman = query.get(\"repairman\")\r\n     ? parseInt(query.get(\"repairman\"))\r\n     : false;\r\n"
                },
                {
                    "date": 1713801737109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \r\n export default withRouter(function Devis({ match }) {\r\n   const dispatch = useDispatch();\r\n   const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const perPageDesMob = isMobile ? 8 : 2;\r\n+  const perPageDesMob = isMobile ? 8 : 100;\r\n   const query = new URLSearchParams(useLocation().search);\r\n   const defaultRepairman = query.get(\"repairman\")\r\n     ? parseInt(query.get(\"repairman\"))\r\n     : false;\r\n"
                },
                {
                    "date": 1713850920477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,884 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { Link, useHistory, withRouter, useLocation } from \"react-router-dom\";\r\n+import { useDispatch, useSelector } from \"react-redux\";\r\n+import AdminBase from \"../../../theme/back/adminBase\";\r\n+import DashboardContent from \"../../../components/dashboardContent\";\r\n+import DashboardSide from \"../../../components/dashboardSide\";\r\n+import {\r\n+  BlocAdminContent,\r\n+  NoData,\r\n+} from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import IconCard from \"../../../components/devis/iconCard\";\r\n+import LabelStatus from \"../../../components/devis/labelStatus\";\r\n+import { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import Tableau from \"../../../components/ui-elements/tableau\";\r\n+import FilterDefault from \"../../../components/filterDefault\";\r\n+import Select from \"../../../components/ui-elements/select\";\r\n+import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n+import { ButtonDef, Input, SingleCheckbox } from \"../../../components/ui\";\r\n+import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n+import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n+import DsdAction from \"../../../components/devis/devis-side-details/dsdAction\";\r\n+import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n+import { DashCardsStyle } from \"../../../assets/styles/devisStyles\";\r\n+import {\r\n+  IconCardPeople,\r\n+  IconCardCheck,\r\n+  IconCardWating,\r\n+} from \"../../../assets/styles/icons\";\r\n+import connector from \"../../../connector\";\r\n+import endPoints from \"../../../config/endPoints\";\r\n+import moment from \"moment\";\r\n+import ROUTES from \"../../../config/routes\";\r\n+import { ROLES } from \"../../../vars\";\r\n+import {\r\n+  calcDevisLine,\r\n+  downloadFile,\r\n+  getPathImage,\r\n+  getUniqueItemsByProperties,\r\n+} from \"../../../helper/functions\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n+import { validForm } from \"../../../helper/form\";\r\n+import BlocAuth from \"../../../components/devis/blocks/blocAuth\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n+\r\n+export default withRouter(function Devis({ match }) {\r\n+  const dispatch = useDispatch();\r\n+  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n+  const perPageDesMob = isMobile ? 8 : 100;\r\n+  const query = new URLSearchParams(useLocation().search);\r\n+  const defaultRepairman = query.get(\"repairman\")\r\n+    ? parseInt(query.get(\"repairman\"))\r\n+    : false;\r\n+  const defaultClient = query.get(\"client\")\r\n+    ? parseInt(query.get(\"client\"))\r\n+    : false;\r\n+  const [activeDevis, setActiveDevis] = useState(\r\n+    query.get(\"id\") ? parseInt(query.get(\"id\")) : false\r\n+  );\r\n+  const auth = useSelector((state) => state.auth);\r\n+  const history = useHistory();\r\n+  const [openSide, setOpenSide] = useState(false);\r\n+  const [showModalReject, setShowModalReject] = useState(false);\r\n+  const [showModalAccept, setShowModalAccept] = useState(false);\r\n+  const [selectedRow, setSelectedRow] = useState({});\r\n+  const [countReport, setCountReport] = useState(false);\r\n+  const [totalDevis, setTotalDevis] = useState(0);\r\n+  const [perPage, setPerPage] = useState(perPageDesMob);\r\n+  const [pageIndex, setPageIndex] = useState(0);\r\n+  const [activeSort, setActiveSort] = useState(\"id\");\r\n+  const [switshSort, setSwitshSort] = useState(false);\r\n+  const [isClient] = useState(auth.roles.includes(ROLES.ROLE_CLIENT));\r\n+  const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n+  const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+\r\n+  const [filter, setFilter] = useState({\r\n+    client: {\r\n+      placeholder: \"Client\",\r\n+      isSearchable: true,\r\n+      value: defaultClient,\r\n+      options: [],\r\n+    },\r\n+    repairman: {\r\n+      placeholder: \"Réparateur\",\r\n+      isSearchable: true,\r\n+      value: defaultRepairman,\r\n+      options: [],\r\n+    },\r\n+    command: {\r\n+      placeholder: \"Id\",\r\n+      isSearchable: true,\r\n+      value: false,\r\n+      options: [],\r\n+    },\r\n+    status: {\r\n+      placeholder: \"Statut\",\r\n+      options: [\r\n+        { label: \"Tous les statuts\", value: false },\r\n+        { label: \"Nouveau\", value: 0, icon: <LabelStatus type={0} hideText /> },\r\n+        {\r\n+          label: \"En attente\",\r\n+          value: 1,\r\n+          icon: <LabelStatus type={1} hideText />,\r\n+        },\r\n+        { label: \"Accepté\", value: 2, icon: <LabelStatus type={2} hideText /> },\r\n+        { label: \"Refusé\", value: 3, icon: <LabelStatus type={3} hideText /> },\r\n+        { label: \"Annulé\", value: 4, icon: <LabelStatus type={4} hideText /> },\r\n+      ],\r\n+      value: false,\r\n+    },\r\n+  });\r\n+\r\n+  const [state, setState] = useState({\r\n+    raison: {\r\n+      label: \"Raison: \",\r\n+      as: \"textarea\",\r\n+      name: \"raison\",\r\n+      placeholder: \"\",\r\n+      value: \"\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: true,\r\n+    },\r\n+    newDevis: {\r\n+      label: \"Demander un nouveau devis \",\r\n+      name: \"newDevis\",\r\n+      value: false,\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: false,\r\n+    },\r\n+  });\r\n+  const [devis, setDevis] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    if (match.params.filter) {\r\n+      const cpFilter = { ...filter };\r\n+      cpFilter.client.value = match.params.filter;\r\n+      setFilter(cpFilter);\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [match.params.filter]);\r\n+\r\n+  useEffect(() => {\r\n+    getCountReport();\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (!isClient) {\r\n+      connector({\r\n+        url: `${endPoints.USERS_DEVIS_CLIENTS}?order[firstName]=asc&order[lastName]=asc`,\r\n+        success: (response) => {\r\n+          const cpFilters = { ...filter };\r\n+          cpFilters.client.options = response.data[\"hydra:member\"].map(\r\n+            (cl) => ({\r\n+              value: cl.id,\r\n+              label: cl.firstName + \" \" + cl.lastName,\r\n+            })\r\n+          );\r\n+          setCountReport(response.data);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+        },\r\n+      });\r\n+    }\r\n+\r\n+    if (!isRepairman) {\r\n+      connector({\r\n+        url: `${endPoints.USERS_DEVIS_REPAIRMANS}?order[enterprise]=asc`,\r\n+        success: (response) => {\r\n+          const cpFilters = { ...filter };\r\n+          cpFilters.repairman.options = response.data[\"hydra:member\"].map(\r\n+            (rep) => ({\r\n+              value: rep.id,\r\n+              label: rep.enterprise,\r\n+            })\r\n+          );\r\n+          //setCountReport(response.data);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+        },\r\n+      });\r\n+    }\r\n+\r\n+    connector({\r\n+      url: `${endPoints.DEVIS}/ids?order[id]=desc`,\r\n+      success: (response) => {\r\n+        const cpFilters = { ...filter };\r\n+        cpFilters.command.options = response.data[\"hydra:member\"].map((c) => ({\r\n+          value: c.id,\r\n+          label: c.id,\r\n+        }));\r\n+      },\r\n+      catch: (err) => {\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.role]);\r\n+\r\n+  useEffect(() => {\r\n+    let url = `${endPoints.DEVIS}?page=${pageIndex + 1}&itemsPerPage=${perPage}&order[${activeSort}]=${switshSort ? \"asc\" : \"desc\"}`;\r\n+    if(filter.client.value){\r\n+      url += `&client.id=${filter.client.value}`;\r\n+    }\r\n+    if(filter.repairman.value){\r\n+      url += `&benefit.user.id=${filter.repairman.value}`;\r\n+    }\r\n+    if(filter.status.value!== false){\r\n+      url += `&status=${filter.status.value}`;\r\n+    }\r\n+    if(filter.command.value!== false){\r\n+      url += `&id=${filter.command.value}`;\r\n+    }\r\n+    connector({\r\n+      url: url,\r\n+      success: (response) => {\r\n+        setDevis(response.data[\"hydra:member\"]);\r\n+        setTotalDevis(response.data[\"hydra:totalItems\"]);\r\n+        if (activeDevis) {\r\n+          const obj = response.data[\"hydra:member\"].find(\r\n+            (dvl) => dvl.id === activeDevis\r\n+          );\r\n+          if (obj) {\r\n+            setActiveRow(obj);\r\n+            setActiveDevis(false);\r\n+          }\r\n+        }\r\n+      },\r\n+      catch: (err) => {\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.client.value, filter.repairman.value, filter.command.value, filter.status.value, perPage, pageIndex, activeSort, switshSort]);\r\n+\r\n+  const getCountReport = () => {\r\n+    connector({\r\n+      url: `${endPoints.DEVIS}/count`,\r\n+      success: (response) => {\r\n+        setCountReport(response.data);\r\n+      },\r\n+      catch: (err) => {\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  };\r\n+\r\n+  const setActiveRow = (item = {}) => {\r\n+    if (parseInt(item.id) === parseInt(selectedRow.id)) {\r\n+      setSelectedRow({});\r\n+      setOpenSide(false);\r\n+    } else {\r\n+      setSelectedRow(item);\r\n+      setOpenSide(true);\r\n+    }\r\n+  };\r\n+\r\n+  const rowRender = (row) => (\r\n+    <div\r\n+      onClick={() => setActiveRow(row)}\r\n+      className={`divTableRow ${selectedRow.id === row.id ? \"active\" : \"\"}`}\r\n+      key={`row-${row.id}`}\r\n+    >\r\n+      {!isClient && (\r\n+        <div className=\"divTableCell\">\r\n+          {isMobile && <label> Client: </label>}\r\n+          <div>{`${row.client.firstName} ${row.client.lastName}`}</div>\r\n+        </div>\r\n+      )}\r\n+      {!isRepairman && (\r\n+        <div className=\"divTableCell\">\r\n+          {isMobile && <label> Réparateur: </label>}\r\n+          <div>{`${row.benefit.user.enterprise}`}</div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> N° du devis: </label>}\r\n+        <div>{row.id}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Nom du service: </label>}\r\n+        <div>{row.title}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Commandé le: </label>}\r\n+        <div>{moment(row.createdAt).format(\"DD/MM/YYYY\")}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Valide jusqu'au: </label>}\r\n+        <div>\r\n+          {row.validationDate\r\n+            ? moment(row.validationDate).format(\"DD/MM/YYYY\")\r\n+            : \"-\"}\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Statut: </label>}\r\n+        <div>\r\n+          <LabelStatus\r\n+            type={row.status}\r\n+            hideText={!isMobile}\r\n+            active={selectedRow.id === row.id}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+      {isMobile && (\r\n+        <div className=\"divTableCell m-action\">\r\n+          <div>\r\n+            <ButtonDef\r\n+              textButton=\"Voir le devis\"\r\n+              onClick={() => setActiveRow(row)}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+\r\n+  const setStatusReject = (e) => {\r\n+    e.preventDefault();\r\n+    const validationForm = validForm(state);\r\n+    setState(validationForm.form);\r\n+    if (!validationForm.valid) return;\r\n+    setIsPending(true);\r\n+    connector({\r\n+      url: `${endPoints.DEVIS}/reject/${selectedRow.id}`,\r\n+      method: \"PUT\",\r\n+      data: {\r\n+        rejectRaison: state.raison.value,\r\n+        newDevis: state.newDevis.value,\r\n+      },\r\n+      success: (response) => {\r\n+        setIsPending(false);\r\n+        setSelectedRow({ ...response.data });\r\n+        setDevis(\r\n+          devis.map((devi) =>\r\n+            devi.id === response.data.id ? response.data : devi\r\n+          )\r\n+        );\r\n+        NotificationManager.success(\"Devis refusé\", \"\");\r\n+        setShowModalReject(false);\r\n+        getCountReport();\r\n+      },\r\n+      catch: (err) => {\r\n+        setIsPending(false);\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+  };\r\n+\r\n+  const setStatusAccept = (e) => {\r\n+    e.preventDefault();\r\n+    const idDeliveryMode = selectedRow.deliveryMode.id;\r\n+    history.push(\r\n+      `/univers/${selectedRow.urlBenefit}/demande/${idDeliveryMode}?command=${selectedRow.id}`\r\n+    );\r\n+  };\r\n+\r\n+  const getColumns = () => {\r\n+    const columns = [];\r\n+    if (!isClient)\r\n+      columns.push({\r\n+        key: \"client.firstName\",\r\n+        text: \"Clients\",\r\n+        sort: true,\r\n+      });\r\n+    if (!isRepairman)\r\n+      columns.push({\r\n+        key: \"benefit.user.enterprise\",\r\n+        text: \"Réparateurs\",\r\n+        sort: true,\r\n+      });\r\n+    return [\r\n+      ...columns,\r\n+      { key: \"id\", text: \"N° du devis\", sort: true },\r\n+      { key: \"title\", text: \"Nom du service\", sort: true },\r\n+      { key: \"createdAt\", text: \"Commandé le\", sort: true },\r\n+      {\r\n+        key: \"validationDate\",\r\n+        text: \"Valide jusqu'au\",\r\n+        sort: true,\r\n+      },\r\n+      { key: \"status\", text: \"Statut\" },\r\n+    ];\r\n+  };\r\n+\r\n+  const closeSide = () => {\r\n+    setOpenSide(false);\r\n+    setSelectedRow({});\r\n+  };\r\n+\r\n+  const contact = () => {\r\n+    connector({\r\n+      url: endPoints.THREADS,\r\n+      method: \"post\",\r\n+      data: {\r\n+        user: isClient ? selectedRow.benefit.user.id : selectedRow.client.id,\r\n+      },\r\n+      success: (response) => {\r\n+        history.push(`${ROUTES.MESSAGERIE.url}/${response.data.id}`);\r\n+      },\r\n+      catch: (err) => console.log(err),\r\n+    });\r\n+  };\r\n+\r\n+  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n+\r\n+  const getUrlFicheBenefit = () => {\r\n+    return `/univers/${selectedRow.urlBenefit}`;\r\n+  };\r\n+\r\n+  \r\n+\r\n+  return (\r\n+    <AdminBase>\r\n+      <BlocAdminContent>\r\n+        <DashboardContent titlePage=\"Mes Devis\">\r\n+          {totalDevis || (countReport && countReport.count) ? (\r\n+            <>\r\n+              <DashCardsStyle>\r\n+                <div className=\"row\">\r\n+                  <div className=\"col-md-4\">\r\n+                    <IconCard\r\n+                      icon={<IconCardPeople />}\r\n+                      text=\"Nouvelles demandes\"\r\n+                      nbr={countReport.new_commandes || 0}\r\n+                    />\r\n+                  </div>\r\n+                  <div className=\"col-md-4\">\r\n+                    <IconCard\r\n+                      icon={<IconCardCheck />}\r\n+                      text=\"Devis acceptés\"\r\n+                      nbr={countReport.devis_accepte || 0}\r\n+                    />\r\n+                  </div>\r\n+                  <div className=\"col-md-4\">\r\n+                    <IconCard\r\n+                      icon={<IconCardWating />}\r\n+                      text=\"Devis en attente\"\r\n+                      nbr={countReport.devis_en_attente || 0}\r\n+                    />\r\n+                  </div>\r\n+                </div>\r\n+              </DashCardsStyle>\r\n+\r\n+              <FilterDefault\r\n+                className=\"services-filter\"\r\n+                formItems={\r\n+                  <>\r\n+                    {!isClient && (\r\n+                      <Select\r\n+                        {...filter.client}\r\n+                        options={getUniqueItemsByProperties(\r\n+                          [\r\n+                            {\r\n+                              label: \"Tous les clients\",\r\n+                              value: false,\r\n+                            },\r\n+                            ...filter.client.options,\r\n+                          ],\r\n+                          [\"value\", \"label\"]\r\n+                        )}\r\n+                        onChange={(e) => {\r\n+                          const cpFilter = { ...filter };\r\n+                          cpFilter.client.value = e.value;\r\n+                          setFilter(cpFilter);\r\n+                          setPageIndex(0);\r\n+                        }}\r\n+                      />\r\n+                    )}\r\n+                    {!isRepairman && (\r\n+                      <Select\r\n+                        {...filter.repairman}\r\n+                        options={getUniqueItemsByProperties(\r\n+                          [\r\n+                            {\r\n+                              label: \"Tous les réparateurs\",\r\n+                              value: false,\r\n+                            },\r\n+                            ...filter.repairman.options,\r\n+                          ],\r\n+                          [\"value\", \"label\"]\r\n+                        )}\r\n+                        onChange={(e) => {\r\n+                          const cpFilter = { ...filter };\r\n+                          cpFilter.repairman.value = e.value;\r\n+                          setFilter(cpFilter);\r\n+                          setPageIndex(0);\r\n+                        }}\r\n+                      />\r\n+                    )}\r\n+\r\n+                    <Select\r\n+                      {...filter.command}\r\n+                      options={getUniqueItemsByProperties(\r\n+                        [\r\n+                          {\r\n+                            label: \"Tous les N° de devis\",\r\n+                            value: false,\r\n+                          },\r\n+                          ...filter.command.options,\r\n+                        ],\r\n+                        [\"value\", \"label\"]\r\n+                      )}\r\n+                      onChange={(e) => {\r\n+                        const cpFilter = { ...filter };\r\n+                        cpFilter.command.value = e.value;\r\n+                        setFilter(cpFilter);\r\n+                        setPageIndex(0);\r\n+                      }}\r\n+                    />\r\n+\r\n+                    <Select\r\n+                      {...filter.status}\r\n+                      onChange={(e) => {\r\n+                        const cpFilter = { ...filter };\r\n+                        cpFilter.status.value = e.value;\r\n+                        setFilter(cpFilter);\r\n+                        setPageIndex(0);\r\n+                      }}\r\n+                    />\r\n+                  </>\r\n+                }\r\n+              />\r\n+\r\n+              <ServicesTableStyle>\r\n+                <Tableau\r\n+                  columns={getColumns()}\r\n+                  perPage={perPage}\r\n+                  setPerPage={setPerPage}\r\n+                  pageIndex={pageIndex}\r\n+                  setPageIndex={setPageIndex}\r\n+                  activeSort={activeSort}\r\n+                  setActiveSort={setActiveSort}\r\n+                  switshSort={switshSort}\r\n+                  setSwitshSort={setSwitshSort}\r\n+                  pagination={true}\r\n+                  totalItemsLength={totalDevis}\r\n+                  data={devis}\r\n+                  rowRender={rowRender}\r\n+                />\r\n+              </ServicesTableStyle>\r\n+\r\n+              <div className=\"my-3 devis-actions\">\r\n+                <LabelStatus type={0} />\r\n+                <LabelStatus type={3} customText=\"Refusé, Annulé\" />\r\n+                <LabelStatus type={1} />\r\n+                <LabelStatus type={2} />\r\n+                {/* <LabelStatus type={4} /> */}\r\n+              </div>\r\n+            </>\r\n+          ) : (\r\n+            <NoData>Aucun devis</NoData>\r\n+          )}\r\n+        </DashboardContent>\r\n+\r\n+        {openSide ? (\r\n+          <DashboardSide className=\"devis-side\">\r\n+            <DevisSideDetail>\r\n+              {isMobile && (\r\n+                <>\r\n+                  <CloseButton\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      closeSide();\r\n+                    }}\r\n+                  />\r\n+                </>\r\n+              )}\r\n+              <DsdHeader\r\n+                title={\"Devis #\" + selectedRow.id}\r\n+                statusType={selectedRow.status}\r\n+              />\r\n+              <DsdContent>\r\n+                <Link to={isAdmin ? `${getUrlFicheBenefit()}` : \"#\"}>\r\n+                  <h2\r\n+                    className=\"content-title\"\r\n+                    style={isAdmin ? { textDecoration: \"underline\" } : {}}\r\n+                  >\r\n+                    {selectedRow.title}\r\n+                  </h2>\r\n+                </Link>\r\n+\r\n+                {!isRepairman && (\r\n+                  <BlocAuth\r\n+                    imgUrl={getPathImage(selectedRow.benefit.user.picture)}\r\n+                    imgAlt={`${selectedRow.benefit.user.enterprise}`}\r\n+                    name={\r\n+                      <Link\r\n+                        style={\r\n+                          isAdmin\r\n+                            ? {\r\n+                                textDecoration: \"underline\",\r\n+                                color: \"#000\",\r\n+                                fontWeight: \"600\",\r\n+                              }\r\n+                            : {\r\n+                                textDecoration: \"none\",\r\n+                                color: \"#000\",\r\n+                                fontWeight: \"600\",\r\n+                              }\r\n+                        }\r\n+                        to={\r\n+                          isAdmin\r\n+                            ? `${ROUTES.REPARATEURS.url}?user=${selectedRow.benefit.user.id}`\r\n+                            : \"#\"\r\n+                        }\r\n+                      >\r\n+                        {selectedRow.benefit.user.enterprise}\r\n+                      </Link>\r\n+                    }\r\n+                  />\r\n+                )}\r\n+\r\n+                {!isClient && (\r\n+                  <BlocInfo>\r\n+                    <h3>\r\n+                      {isAdmin ? (\r\n+                        <>\r\n+                          Client:{\" \"}\r\n+                          <Link\r\n+                            to={`${ROUTES.CLIENTS.url}?idclient=${selectedRow.client.id}`}\r\n+                          >{`${selectedRow.client.firstName} ${selectedRow.client.lastName}`}</Link>{\" \"}\r\n+                        </>\r\n+                      ) : (\r\n+                        `${selectedRow.client.firstName} ${selectedRow.client.lastName}`\r\n+                      )}\r\n+                    </h3>\r\n+                    <span>\r\n+                      Devis demandé le{\" \"}\r\n+                      {moment(selectedRow.createdAt).format(\"DD/MM/YYYY\")}\r\n+                    </span>\r\n+                  </BlocInfo>\r\n+                )}\r\n+\r\n+                <BlocInfo>\r\n+                  <h4 className=\"success-style\">\r\n+                    Mode de délivrance souhaité :\r\n+                  </h4>\r\n+                  <p>{selectedRow.deliveryMode.deliveryModeType.name}</p>\r\n+                </BlocInfo>\r\n+                {selectedRow.deliveryMode.deliveryModeType\r\n+                  .requireDeliveryAddress && (\r\n+                  <BlocInfo>\r\n+                    <h4 className=\"success-style\">Adresse de livraison :</h4>\r\n+                    <p>\r\n+                      {selectedRow.address}, {selectedRow.additionalAddress},{\" \"}\r\n+                      {selectedRow.postalCode}, {selectedRow.city}\r\n+                    </p>\r\n+                  </BlocInfo>\r\n+                )}\r\n+                <BlocInfo withBorder>\r\n+                  {!!selectedRow?.title?.length && (\r\n+                    <h4 className=\"warning-style w-lg\">\r\n+                      Titre du devis : {selectedRow.title}\r\n+                    </h4>\r\n+                  )}\r\n+                  {selectedRow.dateSend ? (\r\n+                    <p>\r\n+                      Emis le:{\" \"}\r\n+                      {moment(selectedRow.dateSend).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.validationDate ? (\r\n+                    <p>\r\n+                      Valide jusqu’au:{\" \"}\r\n+                      {moment(selectedRow.validationDate).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.acceptanceDate &&\r\n+                  selectedRow.status != 3 &&\r\n+                  selectedRow.status != 4 ? (\r\n+                    <p>\r\n+                      Accepté le :{\" \"}\r\n+                      {moment(selectedRow.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.rejectionDate ? (\r\n+                    <p>\r\n+                      Refusé le:{\" \"}\r\n+                      {moment(selectedRow.rejectionDate).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.cancellationDate ? (\r\n+                    <p>\r\n+                      Annulé le:{\" \"}\r\n+                      {moment(selectedRow.cancellationDate).format(\r\n+                        \"DD/MM/YYYY\"\r\n+                      )}\r\n+                      {selectedRow.updatedBy && (\r\n+                        <>\r\n+                          {\" \"}\r\n+                          par\r\n+                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_CLIENT) &&\r\n+                            ` le client ${selectedRow.updatedBy.firstName} ${selectedRow.updatedBy.lastName}`}\r\n+                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_REPAIRMAN) &&\r\n+                            ` le réparateur ${selectedRow.updatedBy.enterprise}`}\r\n+                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_ADMIN) && ` l'administrateur du site`}\r\n+                        </>\r\n+                      ) }\r\n+                    </p>\r\n+                  ) : null}\r\n+\r\n+                  {selectedRow.rejectRaison && <p>{selectedRow.rejectRaison}</p>}\r\n+                </BlocInfo>\r\n+                {!!selectedRow.total && !!selectedRow.benefit.priceQuote && (\r\n+                  <BlocInfo>\r\n+                    <h4 className=\"success-style\">Prix du devis : </h4>\r\n+                    <p>\r\n+                      {selectedRow.benefit.priceQuote?.toFixed(2)} € TTC\r\n+                      {selectedRow.adjuste ? \"(réglé)\" : \"\"}\r\n+                    </p>\r\n+                  </BlocInfo>\r\n+                )}\r\n+\r\n+                {!!selectedRow.devisLines.length && (\r\n+                  <BlocInfo withBorder>\r\n+                    <h3 className=\"success-style w-lg\">\r\n+                      Montant TTC :{\" \"}\r\n+                      {ifNegatifReturn0(\r\n+                        selectedRow.devisLines\r\n+                          .map(\r\n+                            (dl) =>\r\n+                              calcDevisLine(\r\n+                                dl.qte,\r\n+                                dl.unityPrice,\r\n+                                dl.reduction,\r\n+                                dl.tva\r\n+                              ).priceTotalTtc\r\n+                          )\r\n+                          .reduce((a, b) => a + b, 0)\r\n+                      ).toFixed(2)}\r\n+                      €\r\n+                    </h3>\r\n+                    <h4 className=\"warning-style w-lg\">\r\n+                      Montant HT :{\" \"}\r\n+                      {ifNegatifReturn0(\r\n+                        selectedRow.devisLines\r\n+                          .map(\r\n+                            (dl) =>\r\n+                              calcDevisLine(\r\n+                                dl.qte,\r\n+                                dl.unityPrice,\r\n+                                dl.reduction,\r\n+                                dl.tva\r\n+                              ).priceTotalHt\r\n+                          )\r\n+                          .reduce((a, b) => a + b, 0)\r\n+                      ).toFixed(2)}\r\n+                      €\r\n+                    </h4>\r\n+                    <ButtonDef\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setIsLoading(true);\r\n+                        downloadFile(\r\n+                          `${endPoints.EXPORT_DEVIS}/${selectedRow.id}`,\r\n+                          `Devis#${selectedRow.id}.pdf`,\r\n+                           setIsLoading\r\n+                        );\r\n+                      }}\r\n+                      className=\"link-download-btn\"\r\n+                      spinner={isLoading}\r\n+                      textButton=\"Télécharger le devis\"\r\n+                    />\r\n+                  </BlocInfo>\r\n+                )}\r\n+              </DsdContent>\r\n+              {!isAdmin && (\r\n+                <DsdAction>\r\n+                  <ButtonDef\r\n+                    className=\"btn-light\"\r\n+                    onClick={contact}\r\n+                    textButton=\"Contacter\"\r\n+                  />\r\n+                  {isClient && selectedRow.status === 1 && (\r\n+                    <>\r\n+                      <ButtonDef\r\n+                        className=\"btn-orange\"\r\n+                        textButton=\"Refuser le devis\"\r\n+                        spinner={isPending}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setShowModalReject(true);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        textButton=\"Accepter le devis\"\r\n+                        spinner={isPending}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setShowModalAccept(true);\r\n+                        }}\r\n+                      />\r\n+                    </>\r\n+                  )}\r\n+                  {isRepairman && (\r\n+                    <ButtonDef\r\n+                      textButton=\"Editer le devis\"\r\n+                      onClick={(e) => {\r\n+                        history.push(\r\n+                          `${ROUTES.REPA_CREATE_DEVIS.url}/${selectedRow.id}`\r\n+                        );\r\n+                      }}\r\n+                    />\r\n+                  )}\r\n+                </DsdAction>\r\n+              )}\r\n+            </DevisSideDetail>\r\n+          </DashboardSide>\r\n+        ) : null}\r\n+\r\n+        <PopinModal\r\n+          show={showModalReject}\r\n+          handleClose={() => {\r\n+            setShowModalReject(false);\r\n+          }}\r\n+          title={`Refuser le devis#${selectedRow.id}`}\r\n+        >\r\n+          <form onSubmit={setStatusReject}>\r\n+            <Input\r\n+              {...state.raison}\r\n+              onChange={(e) => {\r\n+                const cpState = { ...state };\r\n+                cpState.raison.value = e.target.value;\r\n+                setState(cpState);\r\n+              }}\r\n+            />\r\n+            <SingleCheckbox\r\n+              {...state.newDevis}\r\n+              onChange={(e) => {\r\n+                const cpState = { ...state };\r\n+                cpState.newDevis.value = e.target.checked;\r\n+                setState(cpState);\r\n+              }}\r\n+            />\r\n+            <DsdAction>\r\n+              <ButtonDef\r\n+                textButton=\"Annuler\"\r\n+                className=\"btn-light\"\r\n+                spinner={isPending}\r\n+                onClick={(e) => {\r\n+                  e.preventDefault();\r\n+                  setShowModalReject(false);\r\n+                }}\r\n+              />\r\n+              <ButtonDef textButton=\"Confirmer le refus\" spinner={isPending} />\r\n+            </DsdAction>\r\n+          </form>\r\n+        </PopinModal>\r\n+        <PopinModal\r\n+          show={showModalAccept}\r\n+          handleClose={() => {\r\n+            setShowModalAccept(false);\r\n+          }}\r\n+          title={`Accepter le devis#${selectedRow.id} et régler la prestation`}\r\n+        >\r\n+          <form onSubmit={setStatusAccept}>\r\n+            <DsdAction>\r\n+              <ButtonDef\r\n+                textButton=\"Annuler\"\r\n+                className=\"btn-light\"\r\n+                spinner={isPending}\r\n+                onClick={(e) => {\r\n+                  e.preventDefault();\r\n+                  setShowModalAccept(false);\r\n+                }}\r\n+              />\r\n+              <ButtonDef textButton=\"Confirmer\" spinner={isPending} />\r\n+            </DsdAction>\r\n+          </form>\r\n+        </PopinModal>\r\n+      </BlocAdminContent>\r\n+    </AdminBase>\r\n+  );\r\n+});\r\n"
                },
                {
                    "date": 1713850940982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n               value: rep.id,\r\n               label: rep.enterprise,\r\n             })\r\n           );\r\n-          //setCountReport(response.data);\r\n+          setCountReport(response.data);\r\n         },\r\n         catch: (err) => {\r\n           console.log(err);\r\n         },\r\n@@ -881,888 +881,4 @@\n       </BlocAdminContent>\r\n     </AdminBase>\r\n   );\r\n });\r\n-import React, { useState, useEffect } from \"react\";\r\n-import { Link, useHistory, withRouter, useLocation } from \"react-router-dom\";\r\n-import { useDispatch, useSelector } from \"react-redux\";\r\n-import AdminBase from \"../../../theme/back/adminBase\";\r\n-import DashboardContent from \"../../../components/dashboardContent\";\r\n-import DashboardSide from \"../../../components/dashboardSide\";\r\n-import {\r\n-  BlocAdminContent,\r\n-  NoData,\r\n-} from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import IconCard from \"../../../components/devis/iconCard\";\r\n-import LabelStatus from \"../../../components/devis/labelStatus\";\r\n-import { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import Tableau from \"../../../components/ui-elements/tableau\";\r\n-import FilterDefault from \"../../../components/filterDefault\";\r\n-import Select from \"../../../components/ui-elements/select\";\r\n-import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n-import { ButtonDef, Input, SingleCheckbox } from \"../../../components/ui\";\r\n-import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n-import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n-import DsdAction from \"../../../components/devis/devis-side-details/dsdAction\";\r\n-import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n-import { DashCardsStyle } from \"../../../assets/styles/devisStyles\";\r\n-import {\r\n-  IconCardPeople,\r\n-  IconCardCheck,\r\n-  IconCardWating,\r\n-} from \"../../../assets/styles/icons\";\r\n-import connector from \"../../../connector\";\r\n-import endPoints from \"../../../config/endPoints\";\r\n-import moment from \"moment\";\r\n-import ROUTES from \"../../../config/routes\";\r\n-import { ROLES } from \"../../../vars\";\r\n-import {\r\n-  calcDevisLine,\r\n-  downloadFile,\r\n-  getPathImage,\r\n-  getUniqueItemsByProperties,\r\n-} from \"../../../helper/functions\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n-import { validForm } from \"../../../helper/form\";\r\n-import BlocAuth from \"../../../components/devis/blocks/blocAuth\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n-\r\n-export default withRouter(function Devis({ match }) {\r\n-  const dispatch = useDispatch();\r\n-  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const perPageDesMob = isMobile ? 8 : 100;\r\n-  const query = new URLSearchParams(useLocation().search);\r\n-  const defaultRepairman = query.get(\"repairman\")\r\n-    ? parseInt(query.get(\"repairman\"))\r\n-    : false;\r\n-  const defaultClient = query.get(\"client\")\r\n-    ? parseInt(query.get(\"client\"))\r\n-    : false;\r\n-  const [activeDevis, setActiveDevis] = useState(\r\n-    query.get(\"id\") ? parseInt(query.get(\"id\")) : false\r\n-  );\r\n-  const auth = useSelector((state) => state.auth);\r\n-  const history = useHistory();\r\n-  const [openSide, setOpenSide] = useState(false);\r\n-  const [showModalReject, setShowModalReject] = useState(false);\r\n-  const [showModalAccept, setShowModalAccept] = useState(false);\r\n-  const [selectedRow, setSelectedRow] = useState({});\r\n-  const [countReport, setCountReport] = useState(false);\r\n-  const [totalDevis, setTotalDevis] = useState(0);\r\n-  const [perPage, setPerPage] = useState(perPageDesMob);\r\n-  const [pageIndex, setPageIndex] = useState(0);\r\n-  const [activeSort, setActiveSort] = useState(\"id\");\r\n-  const [switshSort, setSwitshSort] = useState(false);\r\n-  const [isClient] = useState(auth.roles.includes(ROLES.ROLE_CLIENT));\r\n-  const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n-  const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n-  const [isPending, setIsPending] = useState(false);\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-\r\n-  const [filter, setFilter] = useState({\r\n-    client: {\r\n-      placeholder: \"Client\",\r\n-      isSearchable: true,\r\n-      value: defaultClient,\r\n-      options: [],\r\n-    },\r\n-    repairman: {\r\n-      placeholder: \"Réparateur\",\r\n-      isSearchable: true,\r\n-      value: defaultRepairman,\r\n-      options: [],\r\n-    },\r\n-    command: {\r\n-      placeholder: \"Id\",\r\n-      isSearchable: true,\r\n-      value: false,\r\n-      options: [],\r\n-    },\r\n-    status: {\r\n-      placeholder: \"Statut\",\r\n-      options: [\r\n-        { label: \"Tous les statuts\", value: false },\r\n-        { label: \"Nouveau\", value: 0, icon: <LabelStatus type={0} hideText /> },\r\n-        {\r\n-          label: \"En attente\",\r\n-          value: 1,\r\n-          icon: <LabelStatus type={1} hideText />,\r\n-        },\r\n-        { label: \"Accepté\", value: 2, icon: <LabelStatus type={2} hideText /> },\r\n-        { label: \"Refusé\", value: 3, icon: <LabelStatus type={3} hideText /> },\r\n-        { label: \"Annulé\", value: 4, icon: <LabelStatus type={4} hideText /> },\r\n-      ],\r\n-      value: false,\r\n-    },\r\n-  });\r\n-\r\n-  const [state, setState] = useState({\r\n-    raison: {\r\n-      label: \"Raison: \",\r\n-      as: \"textarea\",\r\n-      name: \"raison\",\r\n-      placeholder: \"\",\r\n-      value: \"\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: true,\r\n-    },\r\n-    newDevis: {\r\n-      label: \"Demander un nouveau devis \",\r\n-      name: \"newDevis\",\r\n-      value: false,\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: false,\r\n-    },\r\n-  });\r\n-  const [devis, setDevis] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    if (match.params.filter) {\r\n-      const cpFilter = { ...filter };\r\n-      cpFilter.client.value = match.params.filter;\r\n-      setFilter(cpFilter);\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [match.params.filter]);\r\n-\r\n-  useEffect(() => {\r\n-    getCountReport();\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (!isClient) {\r\n-      connector({\r\n-        url: `${endPoints.USERS_DEVIS_CLIENTS}?order[firstName]=asc&order[lastName]=asc`,\r\n-        success: (response) => {\r\n-          const cpFilters = { ...filter };\r\n-          cpFilters.client.options = response.data[\"hydra:member\"].map(\r\n-            (cl) => ({\r\n-              value: cl.id,\r\n-              label: cl.firstName + \" \" + cl.lastName,\r\n-            })\r\n-          );\r\n-          //setCountReport(response.data);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-        },\r\n-      });\r\n-    }\r\n-\r\n-    if (!isRepairman) {\r\n-      connector({\r\n-        url: `${endPoints.USERS_DEVIS_REPAIRMANS}?order[enterprise]=asc`,\r\n-        success: (response) => {\r\n-          const cpFilters = { ...filter };\r\n-          cpFilters.repairman.options = response.data[\"hydra:member\"].map(\r\n-            (rep) => ({\r\n-              value: rep.id,\r\n-              label: rep.enterprise,\r\n-            })\r\n-          );\r\n-          //setCountReport(response.data);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-        },\r\n-      });\r\n-    }\r\n-\r\n-    connector({\r\n-      url: `${endPoints.DEVIS}/ids?order[id]=desc`,\r\n-      success: (response) => {\r\n-        const cpFilters = { ...filter };\r\n-        cpFilters.command.options = response.data[\"hydra:member\"].map((c) => ({\r\n-          value: c.id,\r\n-          label: c.id,\r\n-        }));\r\n-      },\r\n-      catch: (err) => {\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.role]);\r\n-\r\n-  useEffect(() => {\r\n-    let url = `${endPoints.DEVIS}?page=${pageIndex + 1}&itemsPerPage=${perPage}&order[${activeSort}]=${switshSort ? \"asc\" : \"desc\"}`;\r\n-    if(filter.client.value){\r\n-      url += `&client.id=${filter.client.value}`;\r\n-    }\r\n-    if(filter.repairman.value){\r\n-      url += `&benefit.user.id=${filter.repairman.value}`;\r\n-    }\r\n-    if(filter.status.value!== false){\r\n-      url += `&status=${filter.status.value}`;\r\n-    }\r\n-    if(filter.command.value!== false){\r\n-      url += `&id=${filter.command.value}`;\r\n-    }\r\n-    connector({\r\n-      url: url,\r\n-      success: (response) => {\r\n-        setDevis(response.data[\"hydra:member\"]);\r\n-        setTotalDevis(response.data[\"hydra:totalItems\"]);\r\n-        if (activeDevis) {\r\n-          const obj = response.data[\"hydra:member\"].find(\r\n-            (dvl) => dvl.id === activeDevis\r\n-          );\r\n-          if (obj) {\r\n-            setActiveRow(obj);\r\n-            setActiveDevis(false);\r\n-          }\r\n-        }\r\n-      },\r\n-      catch: (err) => {\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.client.value, filter.repairman.value, filter.command.value, filter.status.value, perPage, pageIndex, activeSort, switshSort]);\r\n-\r\n-  const getCountReport = () => {\r\n-    connector({\r\n-      url: `${endPoints.DEVIS}/count`,\r\n-      success: (response) => {\r\n-        setCountReport(response.data);\r\n-      },\r\n-      catch: (err) => {\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  };\r\n-\r\n-  const setActiveRow = (item = {}) => {\r\n-    if (parseInt(item.id) === parseInt(selectedRow.id)) {\r\n-      setSelectedRow({});\r\n-      setOpenSide(false);\r\n-    } else {\r\n-      setSelectedRow(item);\r\n-      setOpenSide(true);\r\n-    }\r\n-  };\r\n-\r\n-  const rowRender = (row) => (\r\n-    <div\r\n-      onClick={() => setActiveRow(row)}\r\n-      className={`divTableRow ${selectedRow.id === row.id ? \"active\" : \"\"}`}\r\n-      key={`row-${row.id}`}\r\n-    >\r\n-      {!isClient && (\r\n-        <div className=\"divTableCell\">\r\n-          {isMobile && <label> Client: </label>}\r\n-          <div>{`${row.client.firstName} ${row.client.lastName}`}</div>\r\n-        </div>\r\n-      )}\r\n-      {!isRepairman && (\r\n-        <div className=\"divTableCell\">\r\n-          {isMobile && <label> Réparateur: </label>}\r\n-          <div>{`${row.benefit.user.enterprise}`}</div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> N° du devis: </label>}\r\n-        <div>{row.id}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Nom du service: </label>}\r\n-        <div>{row.title}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Commandé le: </label>}\r\n-        <div>{moment(row.createdAt).format(\"DD/MM/YYYY\")}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Valide jusqu'au: </label>}\r\n-        <div>\r\n-          {row.validationDate\r\n-            ? moment(row.validationDate).format(\"DD/MM/YYYY\")\r\n-            : \"-\"}\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Statut: </label>}\r\n-        <div>\r\n-          <LabelStatus\r\n-            type={row.status}\r\n-            hideText={!isMobile}\r\n-            active={selectedRow.id === row.id}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-      {isMobile && (\r\n-        <div className=\"divTableCell m-action\">\r\n-          <div>\r\n-            <ButtonDef\r\n-              textButton=\"Voir le devis\"\r\n-              onClick={() => setActiveRow(row)}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-\r\n-  const setStatusReject = (e) => {\r\n-    e.preventDefault();\r\n-    const validationForm = validForm(state);\r\n-    setState(validationForm.form);\r\n-    if (!validationForm.valid) return;\r\n-    setIsPending(true);\r\n-    connector({\r\n-      url: `${endPoints.DEVIS}/reject/${selectedRow.id}`,\r\n-      method: \"PUT\",\r\n-      data: {\r\n-        rejectRaison: state.raison.value,\r\n-        newDevis: state.newDevis.value,\r\n-      },\r\n-      success: (response) => {\r\n-        setIsPending(false);\r\n-        setSelectedRow({ ...response.data });\r\n-        setDevis(\r\n-          devis.map((devi) =>\r\n-            devi.id === response.data.id ? response.data : devi\r\n-          )\r\n-        );\r\n-        NotificationManager.success(\"Devis refusé\", \"\");\r\n-        setShowModalReject(false);\r\n-        getCountReport();\r\n-      },\r\n-      catch: (err) => {\r\n-        setIsPending(false);\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-  };\r\n-\r\n-  const setStatusAccept = (e) => {\r\n-    e.preventDefault();\r\n-    const idDeliveryMode = selectedRow.deliveryMode.id;\r\n-    history.push(\r\n-      `/univers/${selectedRow.urlBenefit}/demande/${idDeliveryMode}?command=${selectedRow.id}`\r\n-    );\r\n-  };\r\n-\r\n-  const getColumns = () => {\r\n-    const columns = [];\r\n-    if (!isClient)\r\n-      columns.push({\r\n-        key: \"client.firstName\",\r\n-        text: \"Clients\",\r\n-        sort: true,\r\n-      });\r\n-    if (!isRepairman)\r\n-      columns.push({\r\n-        key: \"benefit.user.enterprise\",\r\n-        text: \"Réparateurs\",\r\n-        sort: true,\r\n-      });\r\n-    return [\r\n-      ...columns,\r\n-      { key: \"id\", text: \"N° du devis\", sort: true },\r\n-      { key: \"title\", text: \"Nom du service\", sort: true },\r\n-      { key: \"createdAt\", text: \"Commandé le\", sort: true },\r\n-      {\r\n-        key: \"validationDate\",\r\n-        text: \"Valide jusqu'au\",\r\n-        sort: true,\r\n-      },\r\n-      { key: \"status\", text: \"Statut\" },\r\n-    ];\r\n-  };\r\n-\r\n-  const closeSide = () => {\r\n-    setOpenSide(false);\r\n-    setSelectedRow({});\r\n-  };\r\n-\r\n-  const contact = () => {\r\n-    connector({\r\n-      url: endPoints.THREADS,\r\n-      method: \"post\",\r\n-      data: {\r\n-        user: isClient ? selectedRow.benefit.user.id : selectedRow.client.id,\r\n-      },\r\n-      success: (response) => {\r\n-        history.push(`${ROUTES.MESSAGERIE.url}/${response.data.id}`);\r\n-      },\r\n-      catch: (err) => console.log(err),\r\n-    });\r\n-  };\r\n-\r\n-  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n-\r\n-  const getUrlFicheBenefit = () => {\r\n-    return `/univers/${selectedRow.urlBenefit}`;\r\n-  };\r\n-\r\n-  \r\n-\r\n-  return (\r\n-    <AdminBase>\r\n-      <BlocAdminContent>\r\n-        <DashboardContent titlePage=\"Mes Devis\">\r\n-          {totalDevis || (countReport && countReport.count) ? (\r\n-            <>\r\n-              <DashCardsStyle>\r\n-                <div className=\"row\">\r\n-                  <div className=\"col-md-4\">\r\n-                    <IconCard\r\n-                      icon={<IconCardPeople />}\r\n-                      text=\"Nouvelles demandes\"\r\n-                      nbr={countReport.new_commandes || 0}\r\n-                    />\r\n-                  </div>\r\n-                  <div className=\"col-md-4\">\r\n-                    <IconCard\r\n-                      icon={<IconCardCheck />}\r\n-                      text=\"Devis acceptés\"\r\n-                      nbr={countReport.devis_accepte || 0}\r\n-                    />\r\n-                  </div>\r\n-                  <div className=\"col-md-4\">\r\n-                    <IconCard\r\n-                      icon={<IconCardWating />}\r\n-                      text=\"Devis en attente\"\r\n-                      nbr={countReport.devis_en_attente || 0}\r\n-                    />\r\n-                  </div>\r\n-                </div>\r\n-              </DashCardsStyle>\r\n-\r\n-              <FilterDefault\r\n-                className=\"services-filter\"\r\n-                formItems={\r\n-                  <>\r\n-                    {!isClient && (\r\n-                      <Select\r\n-                        {...filter.client}\r\n-                        options={getUniqueItemsByProperties(\r\n-                          [\r\n-                            {\r\n-                              label: \"Tous les clients\",\r\n-                              value: false,\r\n-                            },\r\n-                            ...filter.client.options,\r\n-                          ],\r\n-                          [\"value\", \"label\"]\r\n-                        )}\r\n-                        onChange={(e) => {\r\n-                          const cpFilter = { ...filter };\r\n-                          cpFilter.client.value = e.value;\r\n-                          setFilter(cpFilter);\r\n-                          setPageIndex(0);\r\n-                        }}\r\n-                      />\r\n-                    )}\r\n-                    {!isRepairman && (\r\n-                      <Select\r\n-                        {...filter.repairman}\r\n-                        options={getUniqueItemsByProperties(\r\n-                          [\r\n-                            {\r\n-                              label: \"Tous les réparateurs\",\r\n-                              value: false,\r\n-                            },\r\n-                            ...filter.repairman.options,\r\n-                          ],\r\n-                          [\"value\", \"label\"]\r\n-                        )}\r\n-                        onChange={(e) => {\r\n-                          const cpFilter = { ...filter };\r\n-                          cpFilter.repairman.value = e.value;\r\n-                          setFilter(cpFilter);\r\n-                          setPageIndex(0);\r\n-                        }}\r\n-                      />\r\n-                    )}\r\n-\r\n-                    <Select\r\n-                      {...filter.command}\r\n-                      options={getUniqueItemsByProperties(\r\n-                        [\r\n-                          {\r\n-                            label: \"Tous les N° de devis\",\r\n-                            value: false,\r\n-                          },\r\n-                          ...filter.command.options,\r\n-                        ],\r\n-                        [\"value\", \"label\"]\r\n-                      )}\r\n-                      onChange={(e) => {\r\n-                        const cpFilter = { ...filter };\r\n-                        cpFilter.command.value = e.value;\r\n-                        setFilter(cpFilter);\r\n-                        setPageIndex(0);\r\n-                      }}\r\n-                    />\r\n-\r\n-                    <Select\r\n-                      {...filter.status}\r\n-                      onChange={(e) => {\r\n-                        const cpFilter = { ...filter };\r\n-                        cpFilter.status.value = e.value;\r\n-                        setFilter(cpFilter);\r\n-                        setPageIndex(0);\r\n-                      }}\r\n-                    />\r\n-                  </>\r\n-                }\r\n-              />\r\n-\r\n-              <ServicesTableStyle>\r\n-                <Tableau\r\n-                  columns={getColumns()}\r\n-                  perPage={perPage}\r\n-                  setPerPage={setPerPage}\r\n-                  pageIndex={pageIndex}\r\n-                  setPageIndex={setPageIndex}\r\n-                  activeSort={activeSort}\r\n-                  setActiveSort={setActiveSort}\r\n-                  switshSort={switshSort}\r\n-                  setSwitshSort={setSwitshSort}\r\n-                  pagination={true}\r\n-                  totalItemsLength={totalDevis}\r\n-                  data={devis}\r\n-                  rowRender={rowRender}\r\n-                />\r\n-              </ServicesTableStyle>\r\n-\r\n-              <div className=\"my-3 devis-actions\">\r\n-                <LabelStatus type={0} />\r\n-                <LabelStatus type={3} customText=\"Refusé, Annulé\" />\r\n-                <LabelStatus type={1} />\r\n-                <LabelStatus type={2} />\r\n-                {/* <LabelStatus type={4} /> */}\r\n-              </div>\r\n-            </>\r\n-          ) : (\r\n-            <NoData>Aucun devis</NoData>\r\n-          )}\r\n-        </DashboardContent>\r\n-\r\n-        {openSide ? (\r\n-          <DashboardSide className=\"devis-side\">\r\n-            <DevisSideDetail>\r\n-              {isMobile && (\r\n-                <>\r\n-                  <CloseButton\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      closeSide();\r\n-                    }}\r\n-                  />\r\n-                </>\r\n-              )}\r\n-              <DsdHeader\r\n-                title={\"Devis #\" + selectedRow.id}\r\n-                statusType={selectedRow.status}\r\n-              />\r\n-              <DsdContent>\r\n-                <Link to={isAdmin ? `${getUrlFicheBenefit()}` : \"#\"}>\r\n-                  <h2\r\n-                    className=\"content-title\"\r\n-                    style={isAdmin ? { textDecoration: \"underline\" } : {}}\r\n-                  >\r\n-                    {selectedRow.title}\r\n-                  </h2>\r\n-                </Link>\r\n-\r\n-                {!isRepairman && (\r\n-                  <BlocAuth\r\n-                    imgUrl={getPathImage(selectedRow.benefit.user.picture)}\r\n-                    imgAlt={`${selectedRow.benefit.user.enterprise}`}\r\n-                    name={\r\n-                      <Link\r\n-                        style={\r\n-                          isAdmin\r\n-                            ? {\r\n-                                textDecoration: \"underline\",\r\n-                                color: \"#000\",\r\n-                                fontWeight: \"600\",\r\n-                              }\r\n-                            : {\r\n-                                textDecoration: \"none\",\r\n-                                color: \"#000\",\r\n-                                fontWeight: \"600\",\r\n-                              }\r\n-                        }\r\n-                        to={\r\n-                          isAdmin\r\n-                            ? `${ROUTES.REPARATEURS.url}?user=${selectedRow.benefit.user.id}`\r\n-                            : \"#\"\r\n-                        }\r\n-                      >\r\n-                        {selectedRow.benefit.user.enterprise}\r\n-                      </Link>\r\n-                    }\r\n-                  />\r\n-                )}\r\n-\r\n-                {!isClient && (\r\n-                  <BlocInfo>\r\n-                    <h3>\r\n-                      {isAdmin ? (\r\n-                        <>\r\n-                          Client:{\" \"}\r\n-                          <Link\r\n-                            to={`${ROUTES.CLIENTS.url}?idclient=${selectedRow.client.id}`}\r\n-                          >{`${selectedRow.client.firstName} ${selectedRow.client.lastName}`}</Link>{\" \"}\r\n-                        </>\r\n-                      ) : (\r\n-                        `${selectedRow.client.firstName} ${selectedRow.client.lastName}`\r\n-                      )}\r\n-                    </h3>\r\n-                    <span>\r\n-                      Devis demandé le{\" \"}\r\n-                      {moment(selectedRow.createdAt).format(\"DD/MM/YYYY\")}\r\n-                    </span>\r\n-                  </BlocInfo>\r\n-                )}\r\n-\r\n-                <BlocInfo>\r\n-                  <h4 className=\"success-style\">\r\n-                    Mode de délivrance souhaité :\r\n-                  </h4>\r\n-                  <p>{selectedRow.deliveryMode.deliveryModeType.name}</p>\r\n-                </BlocInfo>\r\n-                {selectedRow.deliveryMode.deliveryModeType\r\n-                  .requireDeliveryAddress && (\r\n-                  <BlocInfo>\r\n-                    <h4 className=\"success-style\">Adresse de livraison :</h4>\r\n-                    <p>\r\n-                      {selectedRow.address}, {selectedRow.additionalAddress},{\" \"}\r\n-                      {selectedRow.postalCode}, {selectedRow.city}\r\n-                    </p>\r\n-                  </BlocInfo>\r\n-                )}\r\n-                <BlocInfo withBorder>\r\n-                  {!!selectedRow?.title?.length && (\r\n-                    <h4 className=\"warning-style w-lg\">\r\n-                      Titre du devis : {selectedRow.title}\r\n-                    </h4>\r\n-                  )}\r\n-                  {selectedRow.dateSend ? (\r\n-                    <p>\r\n-                      Emis le:{\" \"}\r\n-                      {moment(selectedRow.dateSend).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.validationDate ? (\r\n-                    <p>\r\n-                      Valide jusqu’au:{\" \"}\r\n-                      {moment(selectedRow.validationDate).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.acceptanceDate &&\r\n-                  selectedRow.status != 3 &&\r\n-                  selectedRow.status != 4 ? (\r\n-                    <p>\r\n-                      Accepté le :{\" \"}\r\n-                      {moment(selectedRow.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.rejectionDate ? (\r\n-                    <p>\r\n-                      Refusé le:{\" \"}\r\n-                      {moment(selectedRow.rejectionDate).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.cancellationDate ? (\r\n-                    <p>\r\n-                      Annulé le:{\" \"}\r\n-                      {moment(selectedRow.cancellationDate).format(\r\n-                        \"DD/MM/YYYY\"\r\n-                      )}\r\n-                      {selectedRow.updatedBy && (\r\n-                        <>\r\n-                          {\" \"}\r\n-                          par\r\n-                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_CLIENT) &&\r\n-                            ` le client ${selectedRow.updatedBy.firstName} ${selectedRow.updatedBy.lastName}`}\r\n-                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_REPAIRMAN) &&\r\n-                            ` le réparateur ${selectedRow.updatedBy.enterprise}`}\r\n-                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_ADMIN) && ` l'administrateur du site`}\r\n-                        </>\r\n-                      ) }\r\n-                    </p>\r\n-                  ) : null}\r\n-\r\n-                  {selectedRow.rejectRaison && <p>{selectedRow.rejectRaison}</p>}\r\n-                </BlocInfo>\r\n-                {!!selectedRow.total && !!selectedRow.benefit.priceQuote && (\r\n-                  <BlocInfo>\r\n-                    <h4 className=\"success-style\">Prix du devis : </h4>\r\n-                    <p>\r\n-                      {selectedRow.benefit.priceQuote?.toFixed(2)} € TTC\r\n-                      {selectedRow.adjuste ? \"(réglé)\" : \"\"}\r\n-                    </p>\r\n-                  </BlocInfo>\r\n-                )}\r\n-\r\n-                {!!selectedRow.devisLines.length && (\r\n-                  <BlocInfo withBorder>\r\n-                    <h3 className=\"success-style w-lg\">\r\n-                      Montant TTC :{\" \"}\r\n-                      {ifNegatifReturn0(\r\n-                        selectedRow.devisLines\r\n-                          .map(\r\n-                            (dl) =>\r\n-                              calcDevisLine(\r\n-                                dl.qte,\r\n-                                dl.unityPrice,\r\n-                                dl.reduction,\r\n-                                dl.tva\r\n-                              ).priceTotalTtc\r\n-                          )\r\n-                          .reduce((a, b) => a + b, 0)\r\n-                      ).toFixed(2)}\r\n-                      €\r\n-                    </h3>\r\n-                    <h4 className=\"warning-style w-lg\">\r\n-                      Montant HT :{\" \"}\r\n-                      {ifNegatifReturn0(\r\n-                        selectedRow.devisLines\r\n-                          .map(\r\n-                            (dl) =>\r\n-                              calcDevisLine(\r\n-                                dl.qte,\r\n-                                dl.unityPrice,\r\n-                                dl.reduction,\r\n-                                dl.tva\r\n-                              ).priceTotalHt\r\n-                          )\r\n-                          .reduce((a, b) => a + b, 0)\r\n-                      ).toFixed(2)}\r\n-                      €\r\n-                    </h4>\r\n-                    <ButtonDef\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setIsLoading(true);\r\n-                        downloadFile(\r\n-                          `${endPoints.EXPORT_DEVIS}/${selectedRow.id}`,\r\n-                          `Devis#${selectedRow.id}.pdf`,\r\n-                           setIsLoading\r\n-                        );\r\n-                      }}\r\n-                      className=\"link-download-btn\"\r\n-                      spinner={isLoading}\r\n-                      textButton=\"Télécharger le devis\"\r\n-                    />\r\n-                  </BlocInfo>\r\n-                )}\r\n-              </DsdContent>\r\n-              {!isAdmin && (\r\n-                <DsdAction>\r\n-                  <ButtonDef\r\n-                    className=\"btn-light\"\r\n-                    onClick={contact}\r\n-                    textButton=\"Contacter\"\r\n-                  />\r\n-                  {isClient && selectedRow.status === 1 && (\r\n-                    <>\r\n-                      <ButtonDef\r\n-                        className=\"btn-orange\"\r\n-                        textButton=\"Refuser le devis\"\r\n-                        spinner={isPending}\r\n-                        onClick={(e) => {\r\n-                          e.preventDefault();\r\n-                          setShowModalReject(true);\r\n-                        }}\r\n-                      />\r\n-                      <ButtonDef\r\n-                        textButton=\"Accepter le devis\"\r\n-                        spinner={isPending}\r\n-                        onClick={(e) => {\r\n-                          e.preventDefault();\r\n-                          setShowModalAccept(true);\r\n-                        }}\r\n-                      />\r\n-                    </>\r\n-                  )}\r\n-                  {isRepairman && (\r\n-                    <ButtonDef\r\n-                      textButton=\"Editer le devis\"\r\n-                      onClick={(e) => {\r\n-                        history.push(\r\n-                          `${ROUTES.REPA_CREATE_DEVIS.url}/${selectedRow.id}`\r\n-                        );\r\n-                      }}\r\n-                    />\r\n-                  )}\r\n-                </DsdAction>\r\n-              )}\r\n-            </DevisSideDetail>\r\n-          </DashboardSide>\r\n-        ) : null}\r\n-\r\n-        <PopinModal\r\n-          show={showModalReject}\r\n-          handleClose={() => {\r\n-            setShowModalReject(false);\r\n-          }}\r\n-          title={`Refuser le devis#${selectedRow.id}`}\r\n-        >\r\n-          <form onSubmit={setStatusReject}>\r\n-            <Input\r\n-              {...state.raison}\r\n-              onChange={(e) => {\r\n-                const cpState = { ...state };\r\n-                cpState.raison.value = e.target.value;\r\n-                setState(cpState);\r\n-              }}\r\n-            />\r\n-            <SingleCheckbox\r\n-              {...state.newDevis}\r\n-              onChange={(e) => {\r\n-                const cpState = { ...state };\r\n-                cpState.newDevis.value = e.target.checked;\r\n-                setState(cpState);\r\n-              }}\r\n-            />\r\n-            <DsdAction>\r\n-              <ButtonDef\r\n-                textButton=\"Annuler\"\r\n-                className=\"btn-light\"\r\n-                spinner={isPending}\r\n-                onClick={(e) => {\r\n-                  e.preventDefault();\r\n-                  setShowModalReject(false);\r\n-                }}\r\n-              />\r\n-              <ButtonDef textButton=\"Confirmer le refus\" spinner={isPending} />\r\n-            </DsdAction>\r\n-          </form>\r\n-        </PopinModal>\r\n-        <PopinModal\r\n-          show={showModalAccept}\r\n-          handleClose={() => {\r\n-            setShowModalAccept(false);\r\n-          }}\r\n-          title={`Accepter le devis#${selectedRow.id} et régler la prestation`}\r\n-        >\r\n-          <form onSubmit={setStatusAccept}>\r\n-            <DsdAction>\r\n-              <ButtonDef\r\n-                textButton=\"Annuler\"\r\n-                className=\"btn-light\"\r\n-                spinner={isPending}\r\n-                onClick={(e) => {\r\n-                  e.preventDefault();\r\n-                  setShowModalAccept(false);\r\n-                }}\r\n-              />\r\n-              <ButtonDef textButton=\"Confirmer\" spinner={isPending} />\r\n-            </DsdAction>\r\n-          </form>\r\n-        </PopinModal>\r\n-      </BlocAdminContent>\r\n-    </AdminBase>\r\n-  );\r\n-});\r\n"
                },
                {
                    "date": 1713850977659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n               value: cl.id,\r\n               label: cl.firstName + \" \" + cl.lastName,\r\n             })\r\n           );\r\n-          setCountReport(response.data);\r\n+          //setCountReport(response.data);\r\n         },\r\n         catch: (err) => {\r\n           console.log(err);\r\n         },\r\n@@ -178,9 +178,9 @@\n               value: rep.id,\r\n               label: rep.enterprise,\r\n             })\r\n           );\r\n-          setCountReport(response.data);\r\n+          //setCountReport(response.data);\r\n         },\r\n         catch: (err) => {\r\n           console.log(err);\r\n         },\r\n"
                },
                {
                    "date": 1713876509482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,8 +216,9 @@\n     }\r\n     if(filter.command.value!== false){\r\n       url += `&id=${filter.command.value}`;\r\n     }\r\n+\r\n     connector({\r\n       url: url,\r\n       success: (response) => {\r\n         setDevis(response.data[\"hydra:member\"]);\r\n"
                },
                {
                    "date": 1719993335510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   IconCardWating,\r\n } from \"../../../assets/styles/icons\";\r\n import connector from \"../../../connector\";\r\n import endPoints from \"../../../config/endPoints\";\r\n-import moment from \"moment\";\r\n+import moment, { now } from \"moment\";\r\n import ROUTES from \"../../../config/routes\";\r\n import { ROLES } from \"../../../vars\";\r\n import {\r\n   calcDevisLine,\r\n@@ -74,8 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n+  const [dateNewVersion, setDateNewVersion] = useState(new Date(2024,7,1));\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n@@ -757,8 +758,9 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n+                    {selectedRow.createdAt > dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n                         setIsLoading(true);\r\n@@ -770,9 +772,11 @@\n                       }}\r\n                       className=\"link-download-btn\"\r\n                       spinner={isLoading}\r\n                       textButton=\"Télécharger le devis\"\r\n-                    />\r\n+                      \r\n+                    /> )\r\n+} \r\n                   </BlocInfo>\r\n                 )}\r\n               </DsdContent>\r\n               {!isAdmin && (\r\n"
                },
                {
                    "date": 1719993368324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const [dateNewVersion, setDateNewVersion] = useState(new Date(2024,7,1));\r\n+  const [dateNewVersion, setDateNewVersion] = useState(new Date(2023,7,1));\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719993424686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const [dateNewVersion, setDateNewVersion] = useState(new Date(2023,7,1));\r\n+  const [dateNewVersion, setDateNewVersion] = useState(new Date(2025,7,1));\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719993469252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,9 +758,9 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n-                    {selectedRow.createdAt > dateNewVersion && (\r\n+                    {true && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n                         setIsLoading(true);\r\n"
                },
                {
                    "date": 1719993477203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,9 +758,9 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n-                    {true && (\r\n+                    {selectedRow.createdAt > dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n                         setIsLoading(true);\r\n"
                },
                {
                    "date": 1719993497218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,9 +758,9 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n-                    {selectedRow.createdAt > dateNewVersion && (\r\n+                    {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n                         setIsLoading(true);\r\n"
                },
                {
                    "date": 1719993569648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,8 +758,9 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA : </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993593729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,9 +758,9 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA : </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA : {selectedRow.createdAt} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993648096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,9 +758,10 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA : {selectedRow.createdAt} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993687230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const [dateNewVersion, setDateNewVersion] = useState(new Date(2025,7,1));\r\n+  const dateNewVersion = new Date(2025,7,1));\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719993702715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const dateNewVersion = new Date(2025,7,1));\r\n+  const dateNewVersion = new Date(2025,7,1);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719993721605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  const dateNewVersion = new Date(2025,7,1);\r\n+  var dateNewVersion = new Date(2025,7,1);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719993760875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {{dateNewVersion}} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993772270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {{dateNewVersion}} </h4>\r\n+\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993843423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993868461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {{dateNewVersion}} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993901624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2025,7,1);\r\n+  var dateNewVersion = \"10\";\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719993922922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {{dateNewVersion}} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719993959926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = \"10\";\r\n+  var dateNewVersion = new Date(2029,2,10);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719994012113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2029,2,10);\r\n+  var dateNewVersion = new Date(2029,2,10).getDate();\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719994114227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2029,2,10).getDate();\r\n+  var dateNewVersion = new Date(2029,2,10).getUTCDate;\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719994122961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2029,2,10).getUTCDate;\r\n+  var dateNewVersion = new Date(2029,2,10).getUTCDate();\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719994225799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2029,2,10).getUTCDate();\r\n+  var dateNewVersion = new Date(2024,7,10);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toDateString} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994239032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toDateString} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toDateString()} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994264789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toDateString()} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toUTCString()} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994318400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toUTCString()} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toLocaleDateString()} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994358617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toLocaleDateString()} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toString()} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994387695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -759,9 +759,9 @@\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toString()} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994470512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,7,10);\r\n+  var dateNewVersion = new Date(2024,7,10,0,0,0);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719994483539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,7,10,0,0,0);\r\n+  var dateNewVersion = new Date(2024,7,10,0,0,0,0);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719994577982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,8 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: {dateNewVersion.toISOString()>selectedRow.createdAt} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994613426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: {dateNewVersion.toISOString()>selectedRow.createdAt} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: {dateNewVersion.toISOString() === selectedRow.createdAt} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994653377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: {dateNewVersion.toISOString() === selectedRow.createdAt} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: {(dateNewVersion.toISOString() === selectedRow.createdAt)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994745012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,892 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { Link, useHistory, withRouter, useLocation } from \"react-router-dom\";\r\n+import { useDispatch, useSelector } from \"react-redux\";\r\n+import AdminBase from \"../../../theme/back/adminBase\";\r\n+import DashboardContent from \"../../../components/dashboardContent\";\r\n+import DashboardSide from \"../../../components/dashboardSide\";\r\n+import {\r\n+  BlocAdminContent,\r\n+  NoData,\r\n+} from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import IconCard from \"../../../components/devis/iconCard\";\r\n+import LabelStatus from \"../../../components/devis/labelStatus\";\r\n+import { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import Tableau from \"../../../components/ui-elements/tableau\";\r\n+import FilterDefault from \"../../../components/filterDefault\";\r\n+import Select from \"../../../components/ui-elements/select\";\r\n+import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n+import { ButtonDef, Input, SingleCheckbox } from \"../../../components/ui\";\r\n+import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n+import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n+import DsdAction from \"../../../components/devis/devis-side-details/dsdAction\";\r\n+import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n+import { DashCardsStyle } from \"../../../assets/styles/devisStyles\";\r\n+import {\r\n+  IconCardPeople,\r\n+  IconCardCheck,\r\n+  IconCardWating,\r\n+} from \"../../../assets/styles/icons\";\r\n+import connector from \"../../../connector\";\r\n+import endPoints from \"../../../config/endPoints\";\r\n+import moment, { now } from \"moment\";\r\n+import ROUTES from \"../../../config/routes\";\r\n+import { ROLES } from \"../../../vars\";\r\n+import {\r\n+  calcDevisLine,\r\n+  downloadFile,\r\n+  getPathImage,\r\n+  getUniqueItemsByProperties,\r\n+} from \"../../../helper/functions\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n+import { validForm } from \"../../../helper/form\";\r\n+import BlocAuth from \"../../../components/devis/blocks/blocAuth\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n+\r\n+export default withRouter(function Devis({ match }) {\r\n+  const dispatch = useDispatch();\r\n+  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n+  const perPageDesMob = isMobile ? 8 : 100;\r\n+  const query = new URLSearchParams(useLocation().search);\r\n+  const defaultRepairman = query.get(\"repairman\")\r\n+    ? parseInt(query.get(\"repairman\"))\r\n+    : false;\r\n+  const defaultClient = query.get(\"client\")\r\n+    ? parseInt(query.get(\"client\"))\r\n+    : false;\r\n+  const [activeDevis, setActiveDevis] = useState(\r\n+    query.get(\"id\") ? parseInt(query.get(\"id\")) : false\r\n+  );\r\n+  const auth = useSelector((state) => state.auth);\r\n+  const history = useHistory();\r\n+  const [openSide, setOpenSide] = useState(false);\r\n+  const [showModalReject, setShowModalReject] = useState(false);\r\n+  const [showModalAccept, setShowModalAccept] = useState(false);\r\n+  const [selectedRow, setSelectedRow] = useState({});\r\n+  const [countReport, setCountReport] = useState(false);\r\n+  const [totalDevis, setTotalDevis] = useState(0);\r\n+  const [perPage, setPerPage] = useState(perPageDesMob);\r\n+  const [pageIndex, setPageIndex] = useState(0);\r\n+  const [activeSort, setActiveSort] = useState(\"id\");\r\n+  const [switshSort, setSwitshSort] = useState(false);\r\n+  const [isClient] = useState(auth.roles.includes(ROLES.ROLE_CLIENT));\r\n+  const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n+  const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+  var dateNewVersion = new Date(2024,7,10,0,0,0,0);\r\n+\r\n+  const [filter, setFilter] = useState({\r\n+    client: {\r\n+      placeholder: \"Client\",\r\n+      isSearchable: true,\r\n+      value: defaultClient,\r\n+      options: [],\r\n+    },\r\n+    repairman: {\r\n+      placeholder: \"Réparateur\",\r\n+      isSearchable: true,\r\n+      value: defaultRepairman,\r\n+      options: [],\r\n+    },\r\n+    command: {\r\n+      placeholder: \"Id\",\r\n+      isSearchable: true,\r\n+      value: false,\r\n+      options: [],\r\n+    },\r\n+    status: {\r\n+      placeholder: \"Statut\",\r\n+      options: [\r\n+        { label: \"Tous les statuts\", value: false },\r\n+        { label: \"Nouveau\", value: 0, icon: <LabelStatus type={0} hideText /> },\r\n+        {\r\n+          label: \"En attente\",\r\n+          value: 1,\r\n+          icon: <LabelStatus type={1} hideText />,\r\n+        },\r\n+        { label: \"Accepté\", value: 2, icon: <LabelStatus type={2} hideText /> },\r\n+        { label: \"Refusé\", value: 3, icon: <LabelStatus type={3} hideText /> },\r\n+        { label: \"Annulé\", value: 4, icon: <LabelStatus type={4} hideText /> },\r\n+      ],\r\n+      value: false,\r\n+    },\r\n+  });\r\n+\r\n+  const [state, setState] = useState({\r\n+    raison: {\r\n+      label: \"Raison: \",\r\n+      as: \"textarea\",\r\n+      name: \"raison\",\r\n+      placeholder: \"\",\r\n+      value: \"\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: true,\r\n+    },\r\n+    newDevis: {\r\n+      label: \"Demander un nouveau devis \",\r\n+      name: \"newDevis\",\r\n+      value: false,\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: false,\r\n+    },\r\n+  });\r\n+  const [devis, setDevis] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    if (match.params.filter) {\r\n+      const cpFilter = { ...filter };\r\n+      cpFilter.client.value = match.params.filter;\r\n+      setFilter(cpFilter);\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [match.params.filter]);\r\n+\r\n+  useEffect(() => {\r\n+    getCountReport();\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (!isClient) {\r\n+      connector({\r\n+        url: `${endPoints.USERS_DEVIS_CLIENTS}?order[firstName]=asc&order[lastName]=asc`,\r\n+        success: (response) => {\r\n+          const cpFilters = { ...filter };\r\n+          cpFilters.client.options = response.data[\"hydra:member\"].map(\r\n+            (cl) => ({\r\n+              value: cl.id,\r\n+              label: cl.firstName + \" \" + cl.lastName,\r\n+            })\r\n+          );\r\n+          //setCountReport(response.data);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+        },\r\n+      });\r\n+    }\r\n+\r\n+    if (!isRepairman) {\r\n+      connector({\r\n+        url: `${endPoints.USERS_DEVIS_REPAIRMANS}?order[enterprise]=asc`,\r\n+        success: (response) => {\r\n+          const cpFilters = { ...filter };\r\n+          cpFilters.repairman.options = response.data[\"hydra:member\"].map(\r\n+            (rep) => ({\r\n+              value: rep.id,\r\n+              label: rep.enterprise,\r\n+            })\r\n+          );\r\n+          //setCountReport(response.data);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+        },\r\n+      });\r\n+    }\r\n+\r\n+    connector({\r\n+      url: `${endPoints.DEVIS}/ids?order[id]=desc`,\r\n+      success: (response) => {\r\n+        const cpFilters = { ...filter };\r\n+        cpFilters.command.options = response.data[\"hydra:member\"].map((c) => ({\r\n+          value: c.id,\r\n+          label: c.id,\r\n+        }));\r\n+      },\r\n+      catch: (err) => {\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.role]);\r\n+\r\n+  useEffect(() => {\r\n+    let url = `${endPoints.DEVIS}?page=${pageIndex + 1}&itemsPerPage=${perPage}&order[${activeSort}]=${switshSort ? \"asc\" : \"desc\"}`;\r\n+    if(filter.client.value){\r\n+      url += `&client.id=${filter.client.value}`;\r\n+    }\r\n+    if(filter.repairman.value){\r\n+      url += `&benefit.user.id=${filter.repairman.value}`;\r\n+    }\r\n+    if(filter.status.value!== false){\r\n+      url += `&status=${filter.status.value}`;\r\n+    }\r\n+    if(filter.command.value!== false){\r\n+      url += `&id=${filter.command.value}`;\r\n+    }\r\n+\r\n+    connector({\r\n+      url: url,\r\n+      success: (response) => {\r\n+        setDevis(response.data[\"hydra:member\"]);\r\n+        setTotalDevis(response.data[\"hydra:totalItems\"]);\r\n+        if (activeDevis) {\r\n+          const obj = response.data[\"hydra:member\"].find(\r\n+            (dvl) => dvl.id === activeDevis\r\n+          );\r\n+          if (obj) {\r\n+            setActiveRow(obj);\r\n+            setActiveDevis(false);\r\n+          }\r\n+        }\r\n+      },\r\n+      catch: (err) => {\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter.client.value, filter.repairman.value, filter.command.value, filter.status.value, perPage, pageIndex, activeSort, switshSort]);\r\n+\r\n+  const getCountReport = () => {\r\n+    connector({\r\n+      url: `${endPoints.DEVIS}/count`,\r\n+      success: (response) => {\r\n+        setCountReport(response.data);\r\n+      },\r\n+      catch: (err) => {\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  };\r\n+\r\n+  const setActiveRow = (item = {}) => {\r\n+    if (parseInt(item.id) === parseInt(selectedRow.id)) {\r\n+      setSelectedRow({});\r\n+      setOpenSide(false);\r\n+    } else {\r\n+      setSelectedRow(item);\r\n+      setOpenSide(true);\r\n+    }\r\n+  };\r\n+\r\n+  const rowRender = (row) => (\r\n+    <div\r\n+      onClick={() => setActiveRow(row)}\r\n+      className={`divTableRow ${selectedRow.id === row.id ? \"active\" : \"\"}`}\r\n+      key={`row-${row.id}`}\r\n+    >\r\n+      {!isClient && (\r\n+        <div className=\"divTableCell\">\r\n+          {isMobile && <label> Client: </label>}\r\n+          <div>{`${row.client.firstName} ${row.client.lastName}`}</div>\r\n+        </div>\r\n+      )}\r\n+      {!isRepairman && (\r\n+        <div className=\"divTableCell\">\r\n+          {isMobile && <label> Réparateur: </label>}\r\n+          <div>{`${row.benefit.user.enterprise}`}</div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> N° du devis: </label>}\r\n+        <div>{row.id}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Nom du service: </label>}\r\n+        <div>{row.title}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Commandé le: </label>}\r\n+        <div>{moment(row.createdAt).format(\"DD/MM/YYYY\")}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Valide jusqu'au: </label>}\r\n+        <div>\r\n+          {row.validationDate\r\n+            ? moment(row.validationDate).format(\"DD/MM/YYYY\")\r\n+            : \"-\"}\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Statut: </label>}\r\n+        <div>\r\n+          <LabelStatus\r\n+            type={row.status}\r\n+            hideText={!isMobile}\r\n+            active={selectedRow.id === row.id}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+      {isMobile && (\r\n+        <div className=\"divTableCell m-action\">\r\n+          <div>\r\n+            <ButtonDef\r\n+              textButton=\"Voir le devis\"\r\n+              onClick={() => setActiveRow(row)}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+\r\n+  const setStatusReject = (e) => {\r\n+    e.preventDefault();\r\n+    const validationForm = validForm(state);\r\n+    setState(validationForm.form);\r\n+    if (!validationForm.valid) return;\r\n+    setIsPending(true);\r\n+    connector({\r\n+      url: `${endPoints.DEVIS}/reject/${selectedRow.id}`,\r\n+      method: \"PUT\",\r\n+      data: {\r\n+        rejectRaison: state.raison.value,\r\n+        newDevis: state.newDevis.value,\r\n+      },\r\n+      success: (response) => {\r\n+        setIsPending(false);\r\n+        setSelectedRow({ ...response.data });\r\n+        setDevis(\r\n+          devis.map((devi) =>\r\n+            devi.id === response.data.id ? response.data : devi\r\n+          )\r\n+        );\r\n+        NotificationManager.success(\"Devis refusé\", \"\");\r\n+        setShowModalReject(false);\r\n+        getCountReport();\r\n+      },\r\n+      catch: (err) => {\r\n+        setIsPending(false);\r\n+        console.log(err);\r\n+      },\r\n+    });\r\n+  };\r\n+\r\n+  const setStatusAccept = (e) => {\r\n+    e.preventDefault();\r\n+    const idDeliveryMode = selectedRow.deliveryMode.id;\r\n+    history.push(\r\n+      `/univers/${selectedRow.urlBenefit}/demande/${idDeliveryMode}?command=${selectedRow.id}`\r\n+    );\r\n+  };\r\n+\r\n+  const getColumns = () => {\r\n+    const columns = [];\r\n+    if (!isClient)\r\n+      columns.push({\r\n+        key: \"client.firstName\",\r\n+        text: \"Clients\",\r\n+        sort: true,\r\n+      });\r\n+    if (!isRepairman)\r\n+      columns.push({\r\n+        key: \"benefit.user.enterprise\",\r\n+        text: \"Réparateurs\",\r\n+        sort: true,\r\n+      });\r\n+    return [\r\n+      ...columns,\r\n+      { key: \"id\", text: \"N° du devis\", sort: true },\r\n+      { key: \"title\", text: \"Nom du service\", sort: true },\r\n+      { key: \"createdAt\", text: \"Commandé le\", sort: true },\r\n+      {\r\n+        key: \"validationDate\",\r\n+        text: \"Valide jusqu'au\",\r\n+        sort: true,\r\n+      },\r\n+      { key: \"status\", text: \"Statut\" },\r\n+    ];\r\n+  };\r\n+\r\n+  const closeSide = () => {\r\n+    setOpenSide(false);\r\n+    setSelectedRow({});\r\n+  };\r\n+\r\n+  const contact = () => {\r\n+    connector({\r\n+      url: endPoints.THREADS,\r\n+      method: \"post\",\r\n+      data: {\r\n+        user: isClient ? selectedRow.benefit.user.id : selectedRow.client.id,\r\n+      },\r\n+      success: (response) => {\r\n+        history.push(`${ROUTES.MESSAGERIE.url}/${response.data.id}`);\r\n+      },\r\n+      catch: (err) => console.log(err),\r\n+    });\r\n+  };\r\n+\r\n+  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n+\r\n+  const getUrlFicheBenefit = () => {\r\n+    return `/univers/${selectedRow.urlBenefit}`;\r\n+  };\r\n+\r\n+  \r\n+\r\n+  return (\r\n+    <AdminBase>\r\n+      <BlocAdminContent>\r\n+        <DashboardContent titlePage=\"Mes Devis\">\r\n+          {totalDevis || (countReport && countReport.count) ? (\r\n+            <>\r\n+              <DashCardsStyle>\r\n+                <div className=\"row\">\r\n+                  <div className=\"col-md-4\">\r\n+                    <IconCard\r\n+                      icon={<IconCardPeople />}\r\n+                      text=\"Nouvelles demandes\"\r\n+                      nbr={countReport.new_commandes || 0}\r\n+                    />\r\n+                  </div>\r\n+                  <div className=\"col-md-4\">\r\n+                    <IconCard\r\n+                      icon={<IconCardCheck />}\r\n+                      text=\"Devis acceptés\"\r\n+                      nbr={countReport.devis_accepte || 0}\r\n+                    />\r\n+                  </div>\r\n+                  <div className=\"col-md-4\">\r\n+                    <IconCard\r\n+                      icon={<IconCardWating />}\r\n+                      text=\"Devis en attente\"\r\n+                      nbr={countReport.devis_en_attente || 0}\r\n+                    />\r\n+                  </div>\r\n+                </div>\r\n+              </DashCardsStyle>\r\n+\r\n+              <FilterDefault\r\n+                className=\"services-filter\"\r\n+                formItems={\r\n+                  <>\r\n+                    {!isClient && (\r\n+                      <Select\r\n+                        {...filter.client}\r\n+                        options={getUniqueItemsByProperties(\r\n+                          [\r\n+                            {\r\n+                              label: \"Tous les clients\",\r\n+                              value: false,\r\n+                            },\r\n+                            ...filter.client.options,\r\n+                          ],\r\n+                          [\"value\", \"label\"]\r\n+                        )}\r\n+                        onChange={(e) => {\r\n+                          const cpFilter = { ...filter };\r\n+                          cpFilter.client.value = e.value;\r\n+                          setFilter(cpFilter);\r\n+                          setPageIndex(0);\r\n+                        }}\r\n+                      />\r\n+                    )}\r\n+                    {!isRepairman && (\r\n+                      <Select\r\n+                        {...filter.repairman}\r\n+                        options={getUniqueItemsByProperties(\r\n+                          [\r\n+                            {\r\n+                              label: \"Tous les réparateurs\",\r\n+                              value: false,\r\n+                            },\r\n+                            ...filter.repairman.options,\r\n+                          ],\r\n+                          [\"value\", \"label\"]\r\n+                        )}\r\n+                        onChange={(e) => {\r\n+                          const cpFilter = { ...filter };\r\n+                          cpFilter.repairman.value = e.value;\r\n+                          setFilter(cpFilter);\r\n+                          setPageIndex(0);\r\n+                        }}\r\n+                      />\r\n+                    )}\r\n+\r\n+                    <Select\r\n+                      {...filter.command}\r\n+                      options={getUniqueItemsByProperties(\r\n+                        [\r\n+                          {\r\n+                            label: \"Tous les N° de devis\",\r\n+                            value: false,\r\n+                          },\r\n+                          ...filter.command.options,\r\n+                        ],\r\n+                        [\"value\", \"label\"]\r\n+                      )}\r\n+                      onChange={(e) => {\r\n+                        const cpFilter = { ...filter };\r\n+                        cpFilter.command.value = e.value;\r\n+                        setFilter(cpFilter);\r\n+                        setPageIndex(0);\r\n+                      }}\r\n+                    />\r\n+\r\n+                    <Select\r\n+                      {...filter.status}\r\n+                      onChange={(e) => {\r\n+                        const cpFilter = { ...filter };\r\n+                        cpFilter.status.value = e.value;\r\n+                        setFilter(cpFilter);\r\n+                        setPageIndex(0);\r\n+                      }}\r\n+                    />\r\n+                  </>\r\n+                }\r\n+              />\r\n+\r\n+              <ServicesTableStyle>\r\n+                <Tableau\r\n+                  columns={getColumns()}\r\n+                  perPage={perPage}\r\n+                  setPerPage={setPerPage}\r\n+                  pageIndex={pageIndex}\r\n+                  setPageIndex={setPageIndex}\r\n+                  activeSort={activeSort}\r\n+                  setActiveSort={setActiveSort}\r\n+                  switshSort={switshSort}\r\n+                  setSwitshSort={setSwitshSort}\r\n+                  pagination={true}\r\n+                  totalItemsLength={totalDevis}\r\n+                  data={devis}\r\n+                  rowRender={rowRender}\r\n+                />\r\n+              </ServicesTableStyle>\r\n+\r\n+              <div className=\"my-3 devis-actions\">\r\n+                <LabelStatus type={0} />\r\n+                <LabelStatus type={3} customText=\"Refusé, Annulé\" />\r\n+                <LabelStatus type={1} />\r\n+                <LabelStatus type={2} />\r\n+                {/* <LabelStatus type={4} /> */}\r\n+              </div>\r\n+            </>\r\n+          ) : (\r\n+            <NoData>Aucun devis</NoData>\r\n+          )}\r\n+        </DashboardContent>\r\n+\r\n+        {openSide ? (\r\n+          <DashboardSide className=\"devis-side\">\r\n+            <DevisSideDetail>\r\n+              {isMobile && (\r\n+                <>\r\n+                  <CloseButton\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      closeSide();\r\n+                    }}\r\n+                  />\r\n+                </>\r\n+              )}\r\n+              <DsdHeader\r\n+                title={\"Devis #\" + selectedRow.id}\r\n+                statusType={selectedRow.status}\r\n+              />\r\n+              <DsdContent>\r\n+                <Link to={isAdmin ? `${getUrlFicheBenefit()}` : \"#\"}>\r\n+                  <h2\r\n+                    className=\"content-title\"\r\n+                    style={isAdmin ? { textDecoration: \"underline\" } : {}}\r\n+                  >\r\n+                    {selectedRow.title}\r\n+                  </h2>\r\n+                </Link>\r\n+\r\n+                {!isRepairman && (\r\n+                  <BlocAuth\r\n+                    imgUrl={getPathImage(selectedRow.benefit.user.picture)}\r\n+                    imgAlt={`${selectedRow.benefit.user.enterprise}`}\r\n+                    name={\r\n+                      <Link\r\n+                        style={\r\n+                          isAdmin\r\n+                            ? {\r\n+                                textDecoration: \"underline\",\r\n+                                color: \"#000\",\r\n+                                fontWeight: \"600\",\r\n+                              }\r\n+                            : {\r\n+                                textDecoration: \"none\",\r\n+                                color: \"#000\",\r\n+                                fontWeight: \"600\",\r\n+                              }\r\n+                        }\r\n+                        to={\r\n+                          isAdmin\r\n+                            ? `${ROUTES.REPARATEURS.url}?user=${selectedRow.benefit.user.id}`\r\n+                            : \"#\"\r\n+                        }\r\n+                      >\r\n+                        {selectedRow.benefit.user.enterprise}\r\n+                      </Link>\r\n+                    }\r\n+                  />\r\n+                )}\r\n+\r\n+                {!isClient && (\r\n+                  <BlocInfo>\r\n+                    <h3>\r\n+                      {isAdmin ? (\r\n+                        <>\r\n+                          Client:{\" \"}\r\n+                          <Link\r\n+                            to={`${ROUTES.CLIENTS.url}?idclient=${selectedRow.client.id}`}\r\n+                          >{`${selectedRow.client.firstName} ${selectedRow.client.lastName}`}</Link>{\" \"}\r\n+                        </>\r\n+                      ) : (\r\n+                        `${selectedRow.client.firstName} ${selectedRow.client.lastName}`\r\n+                      )}\r\n+                    </h3>\r\n+                    <span>\r\n+                      Devis demandé le{\" \"}\r\n+                      {moment(selectedRow.createdAt).format(\"DD/MM/YYYY\")}\r\n+                    </span>\r\n+                  </BlocInfo>\r\n+                )}\r\n+\r\n+                <BlocInfo>\r\n+                  <h4 className=\"success-style\">\r\n+                    Mode de délivrance souhaité :\r\n+                  </h4>\r\n+                  <p>{selectedRow.deliveryMode.deliveryModeType.name}</p>\r\n+                </BlocInfo>\r\n+                {selectedRow.deliveryMode.deliveryModeType\r\n+                  .requireDeliveryAddress && (\r\n+                  <BlocInfo>\r\n+                    <h4 className=\"success-style\">Adresse de livraison :</h4>\r\n+                    <p>\r\n+                      {selectedRow.address}, {selectedRow.additionalAddress},{\" \"}\r\n+                      {selectedRow.postalCode}, {selectedRow.city}\r\n+                    </p>\r\n+                  </BlocInfo>\r\n+                )}\r\n+                <BlocInfo withBorder>\r\n+                  {!!selectedRow?.title?.length && (\r\n+                    <h4 className=\"warning-style w-lg\">\r\n+                      Titre du devis : {selectedRow.title}\r\n+                    </h4>\r\n+                  )}\r\n+                  {selectedRow.dateSend ? (\r\n+                    <p>\r\n+                      Emis le:{\" \"}\r\n+                      {moment(selectedRow.dateSend).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.validationDate ? (\r\n+                    <p>\r\n+                      Valide jusqu’au:{\" \"}\r\n+                      {moment(selectedRow.validationDate).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.acceptanceDate &&\r\n+                  selectedRow.status != 3 &&\r\n+                  selectedRow.status != 4 ? (\r\n+                    <p>\r\n+                      Accepté le :{\" \"}\r\n+                      {moment(selectedRow.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.rejectionDate ? (\r\n+                    <p>\r\n+                      Refusé le:{\" \"}\r\n+                      {moment(selectedRow.rejectionDate).format(\"DD/MM/YYYY\")}\r\n+                    </p>\r\n+                  ) : null}\r\n+                  {selectedRow.cancellationDate ? (\r\n+                    <p>\r\n+                      Annulé le:{\" \"}\r\n+                      {moment(selectedRow.cancellationDate).format(\r\n+                        \"DD/MM/YYYY\"\r\n+                      )}\r\n+                      {selectedRow.updatedBy && (\r\n+                        <>\r\n+                          {\" \"}\r\n+                          par\r\n+                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_CLIENT) &&\r\n+                            ` le client ${selectedRow.updatedBy.firstName} ${selectedRow.updatedBy.lastName}`}\r\n+                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_REPAIRMAN) &&\r\n+                            ` le réparateur ${selectedRow.updatedBy.enterprise}`}\r\n+                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_ADMIN) && ` l'administrateur du site`}\r\n+                        </>\r\n+                      ) }\r\n+                    </p>\r\n+                  ) : null}\r\n+\r\n+                  {selectedRow.rejectRaison && <p>{selectedRow.rejectRaison}</p>}\r\n+                </BlocInfo>\r\n+                {!!selectedRow.total && !!selectedRow.benefit.priceQuote && (\r\n+                  <BlocInfo>\r\n+                    <h4 className=\"success-style\">Prix du devis : </h4>\r\n+                    <p>\r\n+                      {selectedRow.benefit.priceQuote?.toFixed(2)} € TTC\r\n+                      {selectedRow.adjuste ? \"(réglé)\" : \"\"}\r\n+                    </p>\r\n+                  </BlocInfo>\r\n+                )}\r\n+\r\n+                {!!selectedRow.devisLines.length && (\r\n+                  <BlocInfo withBorder>\r\n+                    <h3 className=\"success-style w-lg\">\r\n+                      Montant TTC :{\" \"}\r\n+                      {ifNegatifReturn0(\r\n+                        selectedRow.devisLines\r\n+                          .map(\r\n+                            (dl) =>\r\n+                              calcDevisLine(\r\n+                                dl.qte,\r\n+                                dl.unityPrice,\r\n+                                dl.reduction,\r\n+                                dl.tva\r\n+                              ).priceTotalTtc\r\n+                          )\r\n+                          .reduce((a, b) => a + b, 0)\r\n+                      ).toFixed(2)}\r\n+                      €\r\n+                    </h3>\r\n+                    <h4 className=\"warning-style w-lg\">\r\n+                      Montant HT :{\" \"}\r\n+                      {ifNegatifReturn0(\r\n+                        selectedRow.devisLines\r\n+                          .map(\r\n+                            (dl) =>\r\n+                              calcDevisLine(\r\n+                                dl.qte,\r\n+                                dl.unityPrice,\r\n+                                dl.reduction,\r\n+                                dl.tva\r\n+                              ).priceTotalHt\r\n+                          )\r\n+                          .reduce((a, b) => a + b, 0)\r\n+                      ).toFixed(2)}\r\n+                      €\r\n+                    </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: { dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    {selectedRow.createdAt < dateNewVersion && (\r\n+                    <ButtonDef\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setIsLoading(true);\r\n+                        downloadFile(\r\n+                          `${endPoints.EXPORT_DEVIS}/${selectedRow.id}`,\r\n+                          `Devis#${selectedRow.id}.pdf`,\r\n+                           setIsLoading\r\n+                        );\r\n+                      }}\r\n+                      className=\"link-download-btn\"\r\n+                      spinner={isLoading}\r\n+                      textButton=\"Télécharger le devis\"\r\n+                      \r\n+                    /> )\r\n+} \r\n+                  </BlocInfo>\r\n+                )}\r\n+              </DsdContent>\r\n+              {!isAdmin && (\r\n+                <DsdAction>\r\n+                  <ButtonDef\r\n+                    className=\"btn-light\"\r\n+                    onClick={contact}\r\n+                    textButton=\"Contacter\"\r\n+                  />\r\n+                  {isClient && selectedRow.status === 1 && (\r\n+                    <>\r\n+                      <ButtonDef\r\n+                        className=\"btn-orange\"\r\n+                        textButton=\"Refuser le devis\"\r\n+                        spinner={isPending}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setShowModalReject(true);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        textButton=\"Accepter le devis\"\r\n+                        spinner={isPending}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setShowModalAccept(true);\r\n+                        }}\r\n+                      />\r\n+                    </>\r\n+                  )}\r\n+                  {isRepairman && (\r\n+                    <ButtonDef\r\n+                      textButton=\"Editer le devis\"\r\n+                      onClick={(e) => {\r\n+                        history.push(\r\n+                          `${ROUTES.REPA_CREATE_DEVIS.url}/${selectedRow.id}`\r\n+                        );\r\n+                      }}\r\n+                    />\r\n+                  )}\r\n+                </DsdAction>\r\n+              )}\r\n+            </DevisSideDetail>\r\n+          </DashboardSide>\r\n+        ) : null}\r\n+\r\n+        <PopinModal\r\n+          show={showModalReject}\r\n+          handleClose={() => {\r\n+            setShowModalReject(false);\r\n+          }}\r\n+          title={`Refuser le devis#${selectedRow.id}`}\r\n+        >\r\n+          <form onSubmit={setStatusReject}>\r\n+            <Input\r\n+              {...state.raison}\r\n+              onChange={(e) => {\r\n+                const cpState = { ...state };\r\n+                cpState.raison.value = e.target.value;\r\n+                setState(cpState);\r\n+              }}\r\n+            />\r\n+            <SingleCheckbox\r\n+              {...state.newDevis}\r\n+              onChange={(e) => {\r\n+                const cpState = { ...state };\r\n+                cpState.newDevis.value = e.target.checked;\r\n+                setState(cpState);\r\n+              }}\r\n+            />\r\n+            <DsdAction>\r\n+              <ButtonDef\r\n+                textButton=\"Annuler\"\r\n+                className=\"btn-light\"\r\n+                spinner={isPending}\r\n+                onClick={(e) => {\r\n+                  e.preventDefault();\r\n+                  setShowModalReject(false);\r\n+                }}\r\n+              />\r\n+              <ButtonDef textButton=\"Confirmer le refus\" spinner={isPending} />\r\n+            </DsdAction>\r\n+          </form>\r\n+        </PopinModal>\r\n+        <PopinModal\r\n+          show={showModalAccept}\r\n+          handleClose={() => {\r\n+            setShowModalAccept(false);\r\n+          }}\r\n+          title={`Accepter le devis#${selectedRow.id} et régler la prestation`}\r\n+        >\r\n+          <form onSubmit={setStatusAccept}>\r\n+            <DsdAction>\r\n+              <ButtonDef\r\n+                textButton=\"Annuler\"\r\n+                className=\"btn-light\"\r\n+                spinner={isPending}\r\n+                onClick={(e) => {\r\n+                  e.preventDefault();\r\n+                  setShowModalAccept(false);\r\n+                }}\r\n+              />\r\n+              <ButtonDef textButton=\"Confirmer\" spinner={isPending} />\r\n+            </DsdAction>\r\n+          </form>\r\n+        </PopinModal>\r\n+      </BlocAdminContent>\r\n+    </AdminBase>\r\n+  );\r\n+});\r\n"
                },
                {
                    "date": 1719994760021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: { dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() === selectedRow.createdAt{ dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n@@ -889,896 +889,4 @@\n       </BlocAdminContent>\r\n     </AdminBase>\r\n   );\r\n });\r\n-import React, { useState, useEffect } from \"react\";\r\n-import { Link, useHistory, withRouter, useLocation } from \"react-router-dom\";\r\n-import { useDispatch, useSelector } from \"react-redux\";\r\n-import AdminBase from \"../../../theme/back/adminBase\";\r\n-import DashboardContent from \"../../../components/dashboardContent\";\r\n-import DashboardSide from \"../../../components/dashboardSide\";\r\n-import {\r\n-  BlocAdminContent,\r\n-  NoData,\r\n-} from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import IconCard from \"../../../components/devis/iconCard\";\r\n-import LabelStatus from \"../../../components/devis/labelStatus\";\r\n-import { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import Tableau from \"../../../components/ui-elements/tableau\";\r\n-import FilterDefault from \"../../../components/filterDefault\";\r\n-import Select from \"../../../components/ui-elements/select\";\r\n-import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n-import { ButtonDef, Input, SingleCheckbox } from \"../../../components/ui\";\r\n-import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n-import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n-import DsdAction from \"../../../components/devis/devis-side-details/dsdAction\";\r\n-import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n-import { DashCardsStyle } from \"../../../assets/styles/devisStyles\";\r\n-import {\r\n-  IconCardPeople,\r\n-  IconCardCheck,\r\n-  IconCardWating,\r\n-} from \"../../../assets/styles/icons\";\r\n-import connector from \"../../../connector\";\r\n-import endPoints from \"../../../config/endPoints\";\r\n-import moment, { now } from \"moment\";\r\n-import ROUTES from \"../../../config/routes\";\r\n-import { ROLES } from \"../../../vars\";\r\n-import {\r\n-  calcDevisLine,\r\n-  downloadFile,\r\n-  getPathImage,\r\n-  getUniqueItemsByProperties,\r\n-} from \"../../../helper/functions\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n-import { validForm } from \"../../../helper/form\";\r\n-import BlocAuth from \"../../../components/devis/blocks/blocAuth\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n-\r\n-export default withRouter(function Devis({ match }) {\r\n-  const dispatch = useDispatch();\r\n-  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const perPageDesMob = isMobile ? 8 : 100;\r\n-  const query = new URLSearchParams(useLocation().search);\r\n-  const defaultRepairman = query.get(\"repairman\")\r\n-    ? parseInt(query.get(\"repairman\"))\r\n-    : false;\r\n-  const defaultClient = query.get(\"client\")\r\n-    ? parseInt(query.get(\"client\"))\r\n-    : false;\r\n-  const [activeDevis, setActiveDevis] = useState(\r\n-    query.get(\"id\") ? parseInt(query.get(\"id\")) : false\r\n-  );\r\n-  const auth = useSelector((state) => state.auth);\r\n-  const history = useHistory();\r\n-  const [openSide, setOpenSide] = useState(false);\r\n-  const [showModalReject, setShowModalReject] = useState(false);\r\n-  const [showModalAccept, setShowModalAccept] = useState(false);\r\n-  const [selectedRow, setSelectedRow] = useState({});\r\n-  const [countReport, setCountReport] = useState(false);\r\n-  const [totalDevis, setTotalDevis] = useState(0);\r\n-  const [perPage, setPerPage] = useState(perPageDesMob);\r\n-  const [pageIndex, setPageIndex] = useState(0);\r\n-  const [activeSort, setActiveSort] = useState(\"id\");\r\n-  const [switshSort, setSwitshSort] = useState(false);\r\n-  const [isClient] = useState(auth.roles.includes(ROLES.ROLE_CLIENT));\r\n-  const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n-  const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n-  const [isPending, setIsPending] = useState(false);\r\n-  const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,7,10,0,0,0,0);\r\n-\r\n-  const [filter, setFilter] = useState({\r\n-    client: {\r\n-      placeholder: \"Client\",\r\n-      isSearchable: true,\r\n-      value: defaultClient,\r\n-      options: [],\r\n-    },\r\n-    repairman: {\r\n-      placeholder: \"Réparateur\",\r\n-      isSearchable: true,\r\n-      value: defaultRepairman,\r\n-      options: [],\r\n-    },\r\n-    command: {\r\n-      placeholder: \"Id\",\r\n-      isSearchable: true,\r\n-      value: false,\r\n-      options: [],\r\n-    },\r\n-    status: {\r\n-      placeholder: \"Statut\",\r\n-      options: [\r\n-        { label: \"Tous les statuts\", value: false },\r\n-        { label: \"Nouveau\", value: 0, icon: <LabelStatus type={0} hideText /> },\r\n-        {\r\n-          label: \"En attente\",\r\n-          value: 1,\r\n-          icon: <LabelStatus type={1} hideText />,\r\n-        },\r\n-        { label: \"Accepté\", value: 2, icon: <LabelStatus type={2} hideText /> },\r\n-        { label: \"Refusé\", value: 3, icon: <LabelStatus type={3} hideText /> },\r\n-        { label: \"Annulé\", value: 4, icon: <LabelStatus type={4} hideText /> },\r\n-      ],\r\n-      value: false,\r\n-    },\r\n-  });\r\n-\r\n-  const [state, setState] = useState({\r\n-    raison: {\r\n-      label: \"Raison: \",\r\n-      as: \"textarea\",\r\n-      name: \"raison\",\r\n-      placeholder: \"\",\r\n-      value: \"\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: true,\r\n-    },\r\n-    newDevis: {\r\n-      label: \"Demander un nouveau devis \",\r\n-      name: \"newDevis\",\r\n-      value: false,\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: false,\r\n-    },\r\n-  });\r\n-  const [devis, setDevis] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    if (match.params.filter) {\r\n-      const cpFilter = { ...filter };\r\n-      cpFilter.client.value = match.params.filter;\r\n-      setFilter(cpFilter);\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [match.params.filter]);\r\n-\r\n-  useEffect(() => {\r\n-    getCountReport();\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (!isClient) {\r\n-      connector({\r\n-        url: `${endPoints.USERS_DEVIS_CLIENTS}?order[firstName]=asc&order[lastName]=asc`,\r\n-        success: (response) => {\r\n-          const cpFilters = { ...filter };\r\n-          cpFilters.client.options = response.data[\"hydra:member\"].map(\r\n-            (cl) => ({\r\n-              value: cl.id,\r\n-              label: cl.firstName + \" \" + cl.lastName,\r\n-            })\r\n-          );\r\n-          //setCountReport(response.data);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-        },\r\n-      });\r\n-    }\r\n-\r\n-    if (!isRepairman) {\r\n-      connector({\r\n-        url: `${endPoints.USERS_DEVIS_REPAIRMANS}?order[enterprise]=asc`,\r\n-        success: (response) => {\r\n-          const cpFilters = { ...filter };\r\n-          cpFilters.repairman.options = response.data[\"hydra:member\"].map(\r\n-            (rep) => ({\r\n-              value: rep.id,\r\n-              label: rep.enterprise,\r\n-            })\r\n-          );\r\n-          //setCountReport(response.data);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-        },\r\n-      });\r\n-    }\r\n-\r\n-    connector({\r\n-      url: `${endPoints.DEVIS}/ids?order[id]=desc`,\r\n-      success: (response) => {\r\n-        const cpFilters = { ...filter };\r\n-        cpFilters.command.options = response.data[\"hydra:member\"].map((c) => ({\r\n-          value: c.id,\r\n-          label: c.id,\r\n-        }));\r\n-      },\r\n-      catch: (err) => {\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [auth.role]);\r\n-\r\n-  useEffect(() => {\r\n-    let url = `${endPoints.DEVIS}?page=${pageIndex + 1}&itemsPerPage=${perPage}&order[${activeSort}]=${switshSort ? \"asc\" : \"desc\"}`;\r\n-    if(filter.client.value){\r\n-      url += `&client.id=${filter.client.value}`;\r\n-    }\r\n-    if(filter.repairman.value){\r\n-      url += `&benefit.user.id=${filter.repairman.value}`;\r\n-    }\r\n-    if(filter.status.value!== false){\r\n-      url += `&status=${filter.status.value}`;\r\n-    }\r\n-    if(filter.command.value!== false){\r\n-      url += `&id=${filter.command.value}`;\r\n-    }\r\n-\r\n-    connector({\r\n-      url: url,\r\n-      success: (response) => {\r\n-        setDevis(response.data[\"hydra:member\"]);\r\n-        setTotalDevis(response.data[\"hydra:totalItems\"]);\r\n-        if (activeDevis) {\r\n-          const obj = response.data[\"hydra:member\"].find(\r\n-            (dvl) => dvl.id === activeDevis\r\n-          );\r\n-          if (obj) {\r\n-            setActiveRow(obj);\r\n-            setActiveDevis(false);\r\n-          }\r\n-        }\r\n-      },\r\n-      catch: (err) => {\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter.client.value, filter.repairman.value, filter.command.value, filter.status.value, perPage, pageIndex, activeSort, switshSort]);\r\n-\r\n-  const getCountReport = () => {\r\n-    connector({\r\n-      url: `${endPoints.DEVIS}/count`,\r\n-      success: (response) => {\r\n-        setCountReport(response.data);\r\n-      },\r\n-      catch: (err) => {\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  };\r\n-\r\n-  const setActiveRow = (item = {}) => {\r\n-    if (parseInt(item.id) === parseInt(selectedRow.id)) {\r\n-      setSelectedRow({});\r\n-      setOpenSide(false);\r\n-    } else {\r\n-      setSelectedRow(item);\r\n-      setOpenSide(true);\r\n-    }\r\n-  };\r\n-\r\n-  const rowRender = (row) => (\r\n-    <div\r\n-      onClick={() => setActiveRow(row)}\r\n-      className={`divTableRow ${selectedRow.id === row.id ? \"active\" : \"\"}`}\r\n-      key={`row-${row.id}`}\r\n-    >\r\n-      {!isClient && (\r\n-        <div className=\"divTableCell\">\r\n-          {isMobile && <label> Client: </label>}\r\n-          <div>{`${row.client.firstName} ${row.client.lastName}`}</div>\r\n-        </div>\r\n-      )}\r\n-      {!isRepairman && (\r\n-        <div className=\"divTableCell\">\r\n-          {isMobile && <label> Réparateur: </label>}\r\n-          <div>{`${row.benefit.user.enterprise}`}</div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> N° du devis: </label>}\r\n-        <div>{row.id}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Nom du service: </label>}\r\n-        <div>{row.title}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Commandé le: </label>}\r\n-        <div>{moment(row.createdAt).format(\"DD/MM/YYYY\")}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Valide jusqu'au: </label>}\r\n-        <div>\r\n-          {row.validationDate\r\n-            ? moment(row.validationDate).format(\"DD/MM/YYYY\")\r\n-            : \"-\"}\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Statut: </label>}\r\n-        <div>\r\n-          <LabelStatus\r\n-            type={row.status}\r\n-            hideText={!isMobile}\r\n-            active={selectedRow.id === row.id}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-      {isMobile && (\r\n-        <div className=\"divTableCell m-action\">\r\n-          <div>\r\n-            <ButtonDef\r\n-              textButton=\"Voir le devis\"\r\n-              onClick={() => setActiveRow(row)}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-\r\n-  const setStatusReject = (e) => {\r\n-    e.preventDefault();\r\n-    const validationForm = validForm(state);\r\n-    setState(validationForm.form);\r\n-    if (!validationForm.valid) return;\r\n-    setIsPending(true);\r\n-    connector({\r\n-      url: `${endPoints.DEVIS}/reject/${selectedRow.id}`,\r\n-      method: \"PUT\",\r\n-      data: {\r\n-        rejectRaison: state.raison.value,\r\n-        newDevis: state.newDevis.value,\r\n-      },\r\n-      success: (response) => {\r\n-        setIsPending(false);\r\n-        setSelectedRow({ ...response.data });\r\n-        setDevis(\r\n-          devis.map((devi) =>\r\n-            devi.id === response.data.id ? response.data : devi\r\n-          )\r\n-        );\r\n-        NotificationManager.success(\"Devis refusé\", \"\");\r\n-        setShowModalReject(false);\r\n-        getCountReport();\r\n-      },\r\n-      catch: (err) => {\r\n-        setIsPending(false);\r\n-        console.log(err);\r\n-      },\r\n-    });\r\n-  };\r\n-\r\n-  const setStatusAccept = (e) => {\r\n-    e.preventDefault();\r\n-    const idDeliveryMode = selectedRow.deliveryMode.id;\r\n-    history.push(\r\n-      `/univers/${selectedRow.urlBenefit}/demande/${idDeliveryMode}?command=${selectedRow.id}`\r\n-    );\r\n-  };\r\n-\r\n-  const getColumns = () => {\r\n-    const columns = [];\r\n-    if (!isClient)\r\n-      columns.push({\r\n-        key: \"client.firstName\",\r\n-        text: \"Clients\",\r\n-        sort: true,\r\n-      });\r\n-    if (!isRepairman)\r\n-      columns.push({\r\n-        key: \"benefit.user.enterprise\",\r\n-        text: \"Réparateurs\",\r\n-        sort: true,\r\n-      });\r\n-    return [\r\n-      ...columns,\r\n-      { key: \"id\", text: \"N° du devis\", sort: true },\r\n-      { key: \"title\", text: \"Nom du service\", sort: true },\r\n-      { key: \"createdAt\", text: \"Commandé le\", sort: true },\r\n-      {\r\n-        key: \"validationDate\",\r\n-        text: \"Valide jusqu'au\",\r\n-        sort: true,\r\n-      },\r\n-      { key: \"status\", text: \"Statut\" },\r\n-    ];\r\n-  };\r\n-\r\n-  const closeSide = () => {\r\n-    setOpenSide(false);\r\n-    setSelectedRow({});\r\n-  };\r\n-\r\n-  const contact = () => {\r\n-    connector({\r\n-      url: endPoints.THREADS,\r\n-      method: \"post\",\r\n-      data: {\r\n-        user: isClient ? selectedRow.benefit.user.id : selectedRow.client.id,\r\n-      },\r\n-      success: (response) => {\r\n-        history.push(`${ROUTES.MESSAGERIE.url}/${response.data.id}`);\r\n-      },\r\n-      catch: (err) => console.log(err),\r\n-    });\r\n-  };\r\n-\r\n-  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n-\r\n-  const getUrlFicheBenefit = () => {\r\n-    return `/univers/${selectedRow.urlBenefit}`;\r\n-  };\r\n-\r\n-  \r\n-\r\n-  return (\r\n-    <AdminBase>\r\n-      <BlocAdminContent>\r\n-        <DashboardContent titlePage=\"Mes Devis\">\r\n-          {totalDevis || (countReport && countReport.count) ? (\r\n-            <>\r\n-              <DashCardsStyle>\r\n-                <div className=\"row\">\r\n-                  <div className=\"col-md-4\">\r\n-                    <IconCard\r\n-                      icon={<IconCardPeople />}\r\n-                      text=\"Nouvelles demandes\"\r\n-                      nbr={countReport.new_commandes || 0}\r\n-                    />\r\n-                  </div>\r\n-                  <div className=\"col-md-4\">\r\n-                    <IconCard\r\n-                      icon={<IconCardCheck />}\r\n-                      text=\"Devis acceptés\"\r\n-                      nbr={countReport.devis_accepte || 0}\r\n-                    />\r\n-                  </div>\r\n-                  <div className=\"col-md-4\">\r\n-                    <IconCard\r\n-                      icon={<IconCardWating />}\r\n-                      text=\"Devis en attente\"\r\n-                      nbr={countReport.devis_en_attente || 0}\r\n-                    />\r\n-                  </div>\r\n-                </div>\r\n-              </DashCardsStyle>\r\n-\r\n-              <FilterDefault\r\n-                className=\"services-filter\"\r\n-                formItems={\r\n-                  <>\r\n-                    {!isClient && (\r\n-                      <Select\r\n-                        {...filter.client}\r\n-                        options={getUniqueItemsByProperties(\r\n-                          [\r\n-                            {\r\n-                              label: \"Tous les clients\",\r\n-                              value: false,\r\n-                            },\r\n-                            ...filter.client.options,\r\n-                          ],\r\n-                          [\"value\", \"label\"]\r\n-                        )}\r\n-                        onChange={(e) => {\r\n-                          const cpFilter = { ...filter };\r\n-                          cpFilter.client.value = e.value;\r\n-                          setFilter(cpFilter);\r\n-                          setPageIndex(0);\r\n-                        }}\r\n-                      />\r\n-                    )}\r\n-                    {!isRepairman && (\r\n-                      <Select\r\n-                        {...filter.repairman}\r\n-                        options={getUniqueItemsByProperties(\r\n-                          [\r\n-                            {\r\n-                              label: \"Tous les réparateurs\",\r\n-                              value: false,\r\n-                            },\r\n-                            ...filter.repairman.options,\r\n-                          ],\r\n-                          [\"value\", \"label\"]\r\n-                        )}\r\n-                        onChange={(e) => {\r\n-                          const cpFilter = { ...filter };\r\n-                          cpFilter.repairman.value = e.value;\r\n-                          setFilter(cpFilter);\r\n-                          setPageIndex(0);\r\n-                        }}\r\n-                      />\r\n-                    )}\r\n-\r\n-                    <Select\r\n-                      {...filter.command}\r\n-                      options={getUniqueItemsByProperties(\r\n-                        [\r\n-                          {\r\n-                            label: \"Tous les N° de devis\",\r\n-                            value: false,\r\n-                          },\r\n-                          ...filter.command.options,\r\n-                        ],\r\n-                        [\"value\", \"label\"]\r\n-                      )}\r\n-                      onChange={(e) => {\r\n-                        const cpFilter = { ...filter };\r\n-                        cpFilter.command.value = e.value;\r\n-                        setFilter(cpFilter);\r\n-                        setPageIndex(0);\r\n-                      }}\r\n-                    />\r\n-\r\n-                    <Select\r\n-                      {...filter.status}\r\n-                      onChange={(e) => {\r\n-                        const cpFilter = { ...filter };\r\n-                        cpFilter.status.value = e.value;\r\n-                        setFilter(cpFilter);\r\n-                        setPageIndex(0);\r\n-                      }}\r\n-                    />\r\n-                  </>\r\n-                }\r\n-              />\r\n-\r\n-              <ServicesTableStyle>\r\n-                <Tableau\r\n-                  columns={getColumns()}\r\n-                  perPage={perPage}\r\n-                  setPerPage={setPerPage}\r\n-                  pageIndex={pageIndex}\r\n-                  setPageIndex={setPageIndex}\r\n-                  activeSort={activeSort}\r\n-                  setActiveSort={setActiveSort}\r\n-                  switshSort={switshSort}\r\n-                  setSwitshSort={setSwitshSort}\r\n-                  pagination={true}\r\n-                  totalItemsLength={totalDevis}\r\n-                  data={devis}\r\n-                  rowRender={rowRender}\r\n-                />\r\n-              </ServicesTableStyle>\r\n-\r\n-              <div className=\"my-3 devis-actions\">\r\n-                <LabelStatus type={0} />\r\n-                <LabelStatus type={3} customText=\"Refusé, Annulé\" />\r\n-                <LabelStatus type={1} />\r\n-                <LabelStatus type={2} />\r\n-                {/* <LabelStatus type={4} /> */}\r\n-              </div>\r\n-            </>\r\n-          ) : (\r\n-            <NoData>Aucun devis</NoData>\r\n-          )}\r\n-        </DashboardContent>\r\n-\r\n-        {openSide ? (\r\n-          <DashboardSide className=\"devis-side\">\r\n-            <DevisSideDetail>\r\n-              {isMobile && (\r\n-                <>\r\n-                  <CloseButton\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      closeSide();\r\n-                    }}\r\n-                  />\r\n-                </>\r\n-              )}\r\n-              <DsdHeader\r\n-                title={\"Devis #\" + selectedRow.id}\r\n-                statusType={selectedRow.status}\r\n-              />\r\n-              <DsdContent>\r\n-                <Link to={isAdmin ? `${getUrlFicheBenefit()}` : \"#\"}>\r\n-                  <h2\r\n-                    className=\"content-title\"\r\n-                    style={isAdmin ? { textDecoration: \"underline\" } : {}}\r\n-                  >\r\n-                    {selectedRow.title}\r\n-                  </h2>\r\n-                </Link>\r\n-\r\n-                {!isRepairman && (\r\n-                  <BlocAuth\r\n-                    imgUrl={getPathImage(selectedRow.benefit.user.picture)}\r\n-                    imgAlt={`${selectedRow.benefit.user.enterprise}`}\r\n-                    name={\r\n-                      <Link\r\n-                        style={\r\n-                          isAdmin\r\n-                            ? {\r\n-                                textDecoration: \"underline\",\r\n-                                color: \"#000\",\r\n-                                fontWeight: \"600\",\r\n-                              }\r\n-                            : {\r\n-                                textDecoration: \"none\",\r\n-                                color: \"#000\",\r\n-                                fontWeight: \"600\",\r\n-                              }\r\n-                        }\r\n-                        to={\r\n-                          isAdmin\r\n-                            ? `${ROUTES.REPARATEURS.url}?user=${selectedRow.benefit.user.id}`\r\n-                            : \"#\"\r\n-                        }\r\n-                      >\r\n-                        {selectedRow.benefit.user.enterprise}\r\n-                      </Link>\r\n-                    }\r\n-                  />\r\n-                )}\r\n-\r\n-                {!isClient && (\r\n-                  <BlocInfo>\r\n-                    <h3>\r\n-                      {isAdmin ? (\r\n-                        <>\r\n-                          Client:{\" \"}\r\n-                          <Link\r\n-                            to={`${ROUTES.CLIENTS.url}?idclient=${selectedRow.client.id}`}\r\n-                          >{`${selectedRow.client.firstName} ${selectedRow.client.lastName}`}</Link>{\" \"}\r\n-                        </>\r\n-                      ) : (\r\n-                        `${selectedRow.client.firstName} ${selectedRow.client.lastName}`\r\n-                      )}\r\n-                    </h3>\r\n-                    <span>\r\n-                      Devis demandé le{\" \"}\r\n-                      {moment(selectedRow.createdAt).format(\"DD/MM/YYYY\")}\r\n-                    </span>\r\n-                  </BlocInfo>\r\n-                )}\r\n-\r\n-                <BlocInfo>\r\n-                  <h4 className=\"success-style\">\r\n-                    Mode de délivrance souhaité :\r\n-                  </h4>\r\n-                  <p>{selectedRow.deliveryMode.deliveryModeType.name}</p>\r\n-                </BlocInfo>\r\n-                {selectedRow.deliveryMode.deliveryModeType\r\n-                  .requireDeliveryAddress && (\r\n-                  <BlocInfo>\r\n-                    <h4 className=\"success-style\">Adresse de livraison :</h4>\r\n-                    <p>\r\n-                      {selectedRow.address}, {selectedRow.additionalAddress},{\" \"}\r\n-                      {selectedRow.postalCode}, {selectedRow.city}\r\n-                    </p>\r\n-                  </BlocInfo>\r\n-                )}\r\n-                <BlocInfo withBorder>\r\n-                  {!!selectedRow?.title?.length && (\r\n-                    <h4 className=\"warning-style w-lg\">\r\n-                      Titre du devis : {selectedRow.title}\r\n-                    </h4>\r\n-                  )}\r\n-                  {selectedRow.dateSend ? (\r\n-                    <p>\r\n-                      Emis le:{\" \"}\r\n-                      {moment(selectedRow.dateSend).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.validationDate ? (\r\n-                    <p>\r\n-                      Valide jusqu’au:{\" \"}\r\n-                      {moment(selectedRow.validationDate).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.acceptanceDate &&\r\n-                  selectedRow.status != 3 &&\r\n-                  selectedRow.status != 4 ? (\r\n-                    <p>\r\n-                      Accepté le :{\" \"}\r\n-                      {moment(selectedRow.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.rejectionDate ? (\r\n-                    <p>\r\n-                      Refusé le:{\" \"}\r\n-                      {moment(selectedRow.rejectionDate).format(\"DD/MM/YYYY\")}\r\n-                    </p>\r\n-                  ) : null}\r\n-                  {selectedRow.cancellationDate ? (\r\n-                    <p>\r\n-                      Annulé le:{\" \"}\r\n-                      {moment(selectedRow.cancellationDate).format(\r\n-                        \"DD/MM/YYYY\"\r\n-                      )}\r\n-                      {selectedRow.updatedBy && (\r\n-                        <>\r\n-                          {\" \"}\r\n-                          par\r\n-                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_CLIENT) &&\r\n-                            ` le client ${selectedRow.updatedBy.firstName} ${selectedRow.updatedBy.lastName}`}\r\n-                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_REPAIRMAN) &&\r\n-                            ` le réparateur ${selectedRow.updatedBy.enterprise}`}\r\n-                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_ADMIN) && ` l'administrateur du site`}\r\n-                        </>\r\n-                      ) }\r\n-                    </p>\r\n-                  ) : null}\r\n-\r\n-                  {selectedRow.rejectRaison && <p>{selectedRow.rejectRaison}</p>}\r\n-                </BlocInfo>\r\n-                {!!selectedRow.total && !!selectedRow.benefit.priceQuote && (\r\n-                  <BlocInfo>\r\n-                    <h4 className=\"success-style\">Prix du devis : </h4>\r\n-                    <p>\r\n-                      {selectedRow.benefit.priceQuote?.toFixed(2)} € TTC\r\n-                      {selectedRow.adjuste ? \"(réglé)\" : \"\"}\r\n-                    </p>\r\n-                  </BlocInfo>\r\n-                )}\r\n-\r\n-                {!!selectedRow.devisLines.length && (\r\n-                  <BlocInfo withBorder>\r\n-                    <h3 className=\"success-style w-lg\">\r\n-                      Montant TTC :{\" \"}\r\n-                      {ifNegatifReturn0(\r\n-                        selectedRow.devisLines\r\n-                          .map(\r\n-                            (dl) =>\r\n-                              calcDevisLine(\r\n-                                dl.qte,\r\n-                                dl.unityPrice,\r\n-                                dl.reduction,\r\n-                                dl.tva\r\n-                              ).priceTotalTtc\r\n-                          )\r\n-                          .reduce((a, b) => a + b, 0)\r\n-                      ).toFixed(2)}\r\n-                      €\r\n-                    </h3>\r\n-                    <h4 className=\"warning-style w-lg\">\r\n-                      Montant HT :{\" \"}\r\n-                      {ifNegatifReturn0(\r\n-                        selectedRow.devisLines\r\n-                          .map(\r\n-                            (dl) =>\r\n-                              calcDevisLine(\r\n-                                dl.qte,\r\n-                                dl.unityPrice,\r\n-                                dl.reduction,\r\n-                                dl.tva\r\n-                              ).priceTotalHt\r\n-                          )\r\n-                          .reduce((a, b) => a + b, 0)\r\n-                      ).toFixed(2)}\r\n-                      €\r\n-                    </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON: {(dateNewVersion.toISOString() === selectedRow.createdAt)} </h4>\r\n-                    {selectedRow.createdAt < dateNewVersion && (\r\n-                    <ButtonDef\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        setIsLoading(true);\r\n-                        downloadFile(\r\n-                          `${endPoints.EXPORT_DEVIS}/${selectedRow.id}`,\r\n-                          `Devis#${selectedRow.id}.pdf`,\r\n-                           setIsLoading\r\n-                        );\r\n-                      }}\r\n-                      className=\"link-download-btn\"\r\n-                      spinner={isLoading}\r\n-                      textButton=\"Télécharger le devis\"\r\n-                      \r\n-                    /> )\r\n-} \r\n-                  </BlocInfo>\r\n-                )}\r\n-              </DsdContent>\r\n-              {!isAdmin && (\r\n-                <DsdAction>\r\n-                  <ButtonDef\r\n-                    className=\"btn-light\"\r\n-                    onClick={contact}\r\n-                    textButton=\"Contacter\"\r\n-                  />\r\n-                  {isClient && selectedRow.status === 1 && (\r\n-                    <>\r\n-                      <ButtonDef\r\n-                        className=\"btn-orange\"\r\n-                        textButton=\"Refuser le devis\"\r\n-                        spinner={isPending}\r\n-                        onClick={(e) => {\r\n-                          e.preventDefault();\r\n-                          setShowModalReject(true);\r\n-                        }}\r\n-                      />\r\n-                      <ButtonDef\r\n-                        textButton=\"Accepter le devis\"\r\n-                        spinner={isPending}\r\n-                        onClick={(e) => {\r\n-                          e.preventDefault();\r\n-                          setShowModalAccept(true);\r\n-                        }}\r\n-                      />\r\n-                    </>\r\n-                  )}\r\n-                  {isRepairman && (\r\n-                    <ButtonDef\r\n-                      textButton=\"Editer le devis\"\r\n-                      onClick={(e) => {\r\n-                        history.push(\r\n-                          `${ROUTES.REPA_CREATE_DEVIS.url}/${selectedRow.id}`\r\n-                        );\r\n-                      }}\r\n-                    />\r\n-                  )}\r\n-                </DsdAction>\r\n-              )}\r\n-            </DevisSideDetail>\r\n-          </DashboardSide>\r\n-        ) : null}\r\n-\r\n-        <PopinModal\r\n-          show={showModalReject}\r\n-          handleClose={() => {\r\n-            setShowModalReject(false);\r\n-          }}\r\n-          title={`Refuser le devis#${selectedRow.id}`}\r\n-        >\r\n-          <form onSubmit={setStatusReject}>\r\n-            <Input\r\n-              {...state.raison}\r\n-              onChange={(e) => {\r\n-                const cpState = { ...state };\r\n-                cpState.raison.value = e.target.value;\r\n-                setState(cpState);\r\n-              }}\r\n-            />\r\n-            <SingleCheckbox\r\n-              {...state.newDevis}\r\n-              onChange={(e) => {\r\n-                const cpState = { ...state };\r\n-                cpState.newDevis.value = e.target.checked;\r\n-                setState(cpState);\r\n-              }}\r\n-            />\r\n-            <DsdAction>\r\n-              <ButtonDef\r\n-                textButton=\"Annuler\"\r\n-                className=\"btn-light\"\r\n-                spinner={isPending}\r\n-                onClick={(e) => {\r\n-                  e.preventDefault();\r\n-                  setShowModalReject(false);\r\n-                }}\r\n-              />\r\n-              <ButtonDef textButton=\"Confirmer le refus\" spinner={isPending} />\r\n-            </DsdAction>\r\n-          </form>\r\n-        </PopinModal>\r\n-        <PopinModal\r\n-          show={showModalAccept}\r\n-          handleClose={() => {\r\n-            setShowModalAccept(false);\r\n-          }}\r\n-          title={`Accepter le devis#${selectedRow.id} et régler la prestation`}\r\n-        >\r\n-          <form onSubmit={setStatusAccept}>\r\n-            <DsdAction>\r\n-              <ButtonDef\r\n-                textButton=\"Annuler\"\r\n-                className=\"btn-light\"\r\n-                spinner={isPending}\r\n-                onClick={(e) => {\r\n-                  e.preventDefault();\r\n-                  setShowModalAccept(false);\r\n-                }}\r\n-              />\r\n-              <ButtonDef textButton=\"Confirmer\" spinner={isPending} />\r\n-            </DsdAction>\r\n-          </form>\r\n-        </PopinModal>\r\n-      </BlocAdminContent>\r\n-    </AdminBase>\r\n-  );\r\n-});\r\n"
                },
                {
                    "date": 1719994771325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() === selectedRow.createdAt{ dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() === selectedRow.createdAt  { dateNewVersion.toISOString() > selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994828411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() === selectedRow.createdAt  { dateNewVersion.toISOString() > selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() === selectedRow.createdAt  { (dateNewVersion.toISOString() > selectedRow.createdAt) ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994840568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() === selectedRow.createdAt  { (dateNewVersion.toISOString() > selectedRow.createdAt) ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() > selectedRow.createdAt  { (dateNewVersion.toISOString() > selectedRow.createdAt) ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994858540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() > selectedRow.createdAt  { (dateNewVersion.toISOString() > selectedRow.createdAt) ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { (dateNewVersion.toISOString() < selectedRow.createdAt) ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994876742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { (dateNewVersion.toISOString() < selectedRow.createdAt) ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { (dateNewVersion.toISOString() <= selectedRow.createdAt) ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994907859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { (dateNewVersion.toISOString() <= selectedRow.createdAt) ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { (dateNewVersion.toISOString() === selectedRow.createdAt) ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994936671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { (dateNewVersion.toISOString() === selectedRow.createdAt) ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994970905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() < selectedRow.createdAt  { dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() less selectedRow.createdAt  { dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719994992218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() less selectedRow.createdAt  { dateNewVersion.toISOString() === selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() less selectedRow.createdAt  { dateNewVersion.toISOString() > selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719995011638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() less selectedRow.createdAt  { dateNewVersion.toISOString() > selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() > selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719995028429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -760,9 +760,9 @@\n                       €\r\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n-                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() > selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() < selectedRow.createdAt ? (1):(0)} </h4>\r\n                     {selectedRow.createdAt < dateNewVersion && (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719995119302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -761,9 +761,9 @@\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() < selectedRow.createdAt ? (1):(0)} </h4>\r\n-                    {selectedRow.createdAt < dateNewVersion && (\r\n+                    {dateNewVersion.toISOString() > selectedRow.createdAt ? (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n                         setIsLoading(true);\r\n@@ -776,9 +776,9 @@\n                       className=\"link-download-btn\"\r\n                       spinner={isLoading}\r\n                       textButton=\"Télécharger le devis\"\r\n                       \r\n-                    /> )\r\n+                    /> ) :( \"\" )\r\n } \r\n                   </BlocInfo>\r\n                 )}\r\n               </DsdContent>\r\n"
                },
                {
                    "date": 1719995151932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -761,9 +761,9 @@\n                     </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() < selectedRow.createdAt ? (1):(0)} </h4>\r\n-                    {dateNewVersion.toISOString() > selectedRow.createdAt ? (\r\n+                    {dateNewVersion.toISOString() < selectedRow.createdAt ? (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n                         setIsLoading(true);\r\n"
                },
                {
                    "date": 1719995177945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,7,10,0,0,0,0);\r\n+  var dateNewVersion = new Date(2024,7,1,0,0,0,0);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995345225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,7,1,0,0,0,0);\r\n+  var dateNewVersion = new Date(2024,6,30);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995549007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,30);\r\n+  var dateNewVersion = new Date(2024,6,1);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995592414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,1);\r\n+  var dateNewVersion = new Date(2024,5,1);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995611406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,5,1);\r\n+  var dateNewVersion = new Date(2024,6,1);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995642869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,1);\r\n+  var dateNewVersion = new Date(2024,6,0);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995652872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,0);\r\n+  var dateNewVersion = new Date(2024,6,-10);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995663923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,-10);\r\n+  var dateNewVersion = new Date(2024,6,+5);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995672748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,+5);\r\n+  var dateNewVersion = new Date(2024,6,+2);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995719038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,+2);\r\n+  var dateNewVersion = new Date(2024,6,+4);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995752841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,+4);\r\n+  var dateNewVersion = new Date(2024,6,+1);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995760757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n   const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n   const [isPending, setIsPending] = useState(false);\r\n   const [isLoading, setIsLoading] = useState(false);\r\n-  var dateNewVersion = new Date(2024,6,+1);\r\n+  var dateNewVersion = new Date(2024,6,+2);\r\n \r\n   const [filter, setFilter] = useState({\r\n     client: {\r\n       placeholder: \"Client\",\r\n"
                },
                {
                    "date": 1719995807141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -758,11 +758,13 @@\n                           .reduce((a, b) => a + b, 0)\r\n                       ).toFixed(2)}\r\n                       €\r\n                     </h4>\r\n+                    {/*\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() < selectedRow.createdAt ? (1):(0)} </h4>\r\n+                    /}\r\n                     {dateNewVersion.toISOString() < selectedRow.createdAt ? (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                },
                {
                    "date": 1719995821416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -762,9 +762,9 @@\n                     {/*\r\n                     <h4 className=\"success-style\">IS TELECJA CREATED AT: {selectedRow.createdAt} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA DATE NEW VERSIO: {dateNewVersion.toISOString()} </h4>\r\n                     <h4 className=\"success-style\">IS TELECJA COMPARAISON:  dateNewVersion.toISOString() greater selectedRow.createdAt  { dateNewVersion.toISOString() < selectedRow.createdAt ? (1):(0)} </h4>\r\n-                    /}\r\n+                    */}\r\n                     {dateNewVersion.toISOString() < selectedRow.createdAt ? (\r\n                     <ButtonDef\r\n                       onClick={(e) => {\r\n                         e.preventDefault();\r\n"
                }
            ],
            "date": 1713801620876,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, withRouter, useLocation } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AdminBase from \"../../../theme/back/adminBase\";\r\nimport DashboardContent from \"../../../components/dashboardContent\";\r\nimport DashboardSide from \"../../../components/dashboardSide\";\r\nimport {\r\n  BlocAdminContent,\r\n  NoData,\r\n} from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport IconCard from \"../../../components/devis/iconCard\";\r\nimport LabelStatus from \"../../../components/devis/labelStatus\";\r\nimport { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport Tableau from \"../../../components/ui-elements/tableau\";\r\nimport FilterDefault from \"../../../components/filterDefault\";\r\nimport Select from \"../../../components/ui-elements/select\";\r\nimport DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\nimport { ButtonDef, Input, SingleCheckbox } from \"../../../components/ui\";\r\nimport DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\nimport DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\nimport DsdAction from \"../../../components/devis/devis-side-details/dsdAction\";\r\nimport BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\nimport { DashCardsStyle } from \"../../../assets/styles/devisStyles\";\r\nimport {\r\n  IconCardPeople,\r\n  IconCardCheck,\r\n  IconCardWating,\r\n} from \"../../../assets/styles/icons\";\r\nimport connector from \"../../../connector\";\r\nimport endPoints from \"../../../config/endPoints\";\r\nimport moment from \"moment\";\r\nimport ROUTES from \"../../../config/routes\";\r\nimport { ROLES } from \"../../../vars\";\r\nimport {\r\n  calcDevisLine,\r\n  downloadFile,\r\n  getPathImage,\r\n  getUniqueItemsByProperties,\r\n} from \"../../../helper/functions\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport PopinModal from \"../../../components/ui-elements/popinModal\";\r\nimport { validForm } from \"../../../helper/form\";\r\nimport BlocAuth from \"../../../components/devis/blocks/blocAuth\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport CloseButton from \"../../../components/ui-elements/closeButton\";\r\n\r\nexport default withRouter(function Devis({ match }) {\r\n  const dispatch = useDispatch();\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const perPageDesMob = isMobile ? 8 : 100;\r\n  const query = new URLSearchParams(useLocation().search);\r\n  const defaultRepairman = query.get(\"repairman\")\r\n    ? parseInt(query.get(\"repairman\"))\r\n    : false;\r\n  const defaultClient = query.get(\"client\")\r\n    ? parseInt(query.get(\"client\"))\r\n    : false;\r\n  const [activeDevis, setActiveDevis] = useState(\r\n    query.get(\"id\") ? parseInt(query.get(\"id\")) : false\r\n  );\r\n  const auth = useSelector((state) => state.auth);\r\n  const history = useHistory();\r\n  const [openSide, setOpenSide] = useState(false);\r\n  const [showModalReject, setShowModalReject] = useState(false);\r\n  const [showModalAccept, setShowModalAccept] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState({});\r\n  const [countReport, setCountReport] = useState(false);\r\n  const [totalDevis, setTotalDevis] = useState(0);\r\n  const [perPage, setPerPage] = useState(perPageDesMob);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [activeSort, setActiveSort] = useState(\"id\");\r\n  const [switshSort, setSwitshSort] = useState(false);\r\n  const [isClient] = useState(auth.roles.includes(ROLES.ROLE_CLIENT));\r\n  const [isAdmin] = useState(auth.roles.includes(ROLES.ROLE_ADMIN));\r\n  const [isRepairman] = useState(auth.roles.includes(ROLES.ROLE_REPAIRMAN));\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [filter, setFilter] = useState({\r\n    client: {\r\n      placeholder: \"Client\",\r\n      isSearchable: true,\r\n      value: defaultClient,\r\n      options: [],\r\n    },\r\n    repairman: {\r\n      placeholder: \"Réparateur\",\r\n      isSearchable: true,\r\n      value: defaultRepairman,\r\n      options: [],\r\n    },\r\n    command: {\r\n      placeholder: \"Id\",\r\n      isSearchable: true,\r\n      value: false,\r\n      options: [],\r\n    },\r\n    status: {\r\n      placeholder: \"Statut\",\r\n      options: [\r\n        { label: \"Tous les statuts\", value: false },\r\n        { label: \"Nouveau\", value: 0, icon: <LabelStatus type={0} hideText /> },\r\n        {\r\n          label: \"En attente\",\r\n          value: 1,\r\n          icon: <LabelStatus type={1} hideText />,\r\n        },\r\n        { label: \"Accepté\", value: 2, icon: <LabelStatus type={2} hideText /> },\r\n        { label: \"Refusé\", value: 3, icon: <LabelStatus type={3} hideText /> },\r\n        { label: \"Annulé\", value: 4, icon: <LabelStatus type={4} hideText /> },\r\n      ],\r\n      value: false,\r\n    },\r\n  });\r\n\r\n  const [state, setState] = useState({\r\n    raison: {\r\n      label: \"Raison: \",\r\n      as: \"textarea\",\r\n      name: \"raison\",\r\n      placeholder: \"\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n    },\r\n    newDevis: {\r\n      label: \"Demander un nouveau devis \",\r\n      name: \"newDevis\",\r\n      value: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n    },\r\n  });\r\n  const [devis, setDevis] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (match.params.filter) {\r\n      const cpFilter = { ...filter };\r\n      cpFilter.client.value = match.params.filter;\r\n      setFilter(cpFilter);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [match.params.filter]);\r\n\r\n  useEffect(() => {\r\n    getCountReport();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      connector({\r\n        url: `${endPoints.USERS_DEVIS_CLIENTS}?order[firstName]=asc&order[lastName]=asc`,\r\n        success: (response) => {\r\n          const cpFilters = { ...filter };\r\n          cpFilters.client.options = response.data[\"hydra:member\"].map(\r\n            (cl) => ({\r\n              value: cl.id,\r\n              label: cl.firstName + \" \" + cl.lastName,\r\n            })\r\n          );\r\n          //setCountReport(response.data);\r\n        },\r\n        catch: (err) => {\r\n          console.log(err);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (!isRepairman) {\r\n      connector({\r\n        url: `${endPoints.USERS_DEVIS_REPAIRMANS}?order[enterprise]=asc`,\r\n        success: (response) => {\r\n          const cpFilters = { ...filter };\r\n          cpFilters.repairman.options = response.data[\"hydra:member\"].map(\r\n            (rep) => ({\r\n              value: rep.id,\r\n              label: rep.enterprise,\r\n            })\r\n          );\r\n          //setCountReport(response.data);\r\n        },\r\n        catch: (err) => {\r\n          console.log(err);\r\n        },\r\n      });\r\n    }\r\n\r\n    connector({\r\n      url: `${endPoints.DEVIS}/ids?order[id]=desc`,\r\n      success: (response) => {\r\n        const cpFilters = { ...filter };\r\n        cpFilters.command.options = response.data[\"hydra:member\"].map((c) => ({\r\n          value: c.id,\r\n          label: c.id,\r\n        }));\r\n      },\r\n      catch: (err) => {\r\n        console.log(err);\r\n      },\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [auth.role]);\r\n\r\n  useEffect(() => {\r\n    let url = `${endPoints.DEVIS}?page=${pageIndex + 1}&itemsPerPage=${perPage}&order[${activeSort}]=${switshSort ? \"asc\" : \"desc\"}`;\r\n    if(filter.client.value){\r\n      url += `&client.id=${filter.client.value}`;\r\n    }\r\n    if(filter.repairman.value){\r\n      url += `&benefit.user.id=${filter.repairman.value}`;\r\n    }\r\n    if(filter.status.value!== false){\r\n      url += `&status=${filter.status.value}`;\r\n    }\r\n    if(filter.command.value!== false){\r\n      url += `&id=${filter.command.value}`;\r\n    }\r\n    connector({\r\n      url: url,\r\n      success: (response) => {\r\n        setDevis(response.data[\"hydra:member\"]);\r\n        setTotalDevis(response.data[\"hydra:totalItems\"]);\r\n        if (activeDevis) {\r\n          const obj = response.data[\"hydra:member\"].find(\r\n            (dvl) => dvl.id === activeDevis\r\n          );\r\n          if (obj) {\r\n            setActiveRow(obj);\r\n            setActiveDevis(false);\r\n          }\r\n        }\r\n      },\r\n      catch: (err) => {\r\n        console.log(err);\r\n      },\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filter.client.value, filter.repairman.value, filter.command.value, filter.status.value, perPage, pageIndex, activeSort, switshSort]);\r\n\r\n  const getCountReport = () => {\r\n    connector({\r\n      url: `${endPoints.DEVIS}/count`,\r\n      success: (response) => {\r\n        setCountReport(response.data);\r\n      },\r\n      catch: (err) => {\r\n        console.log(err);\r\n      },\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n\r\n  const setActiveRow = (item = {}) => {\r\n    if (parseInt(item.id) === parseInt(selectedRow.id)) {\r\n      setSelectedRow({});\r\n      setOpenSide(false);\r\n    } else {\r\n      setSelectedRow(item);\r\n      setOpenSide(true);\r\n    }\r\n  };\r\n\r\n  const rowRender = (row) => (\r\n    <div\r\n      onClick={() => setActiveRow(row)}\r\n      className={`divTableRow ${selectedRow.id === row.id ? \"active\" : \"\"}`}\r\n      key={`row-${row.id}`}\r\n    >\r\n      {!isClient && (\r\n        <div className=\"divTableCell\">\r\n          {isMobile && <label> Client: </label>}\r\n          <div>{`${row.client.firstName} ${row.client.lastName}`}</div>\r\n        </div>\r\n      )}\r\n      {!isRepairman && (\r\n        <div className=\"divTableCell\">\r\n          {isMobile && <label> Réparateur: </label>}\r\n          <div>{`${row.benefit.user.enterprise}`}</div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> N° du devis: </label>}\r\n        <div>{row.id}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Nom du service: </label>}\r\n        <div>{row.title}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Commandé le: </label>}\r\n        <div>{moment(row.createdAt).format(\"DD/MM/YYYY\")}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Valide jusqu'au: </label>}\r\n        <div>\r\n          {row.validationDate\r\n            ? moment(row.validationDate).format(\"DD/MM/YYYY\")\r\n            : \"-\"}\r\n        </div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Statut: </label>}\r\n        <div>\r\n          <LabelStatus\r\n            type={row.status}\r\n            hideText={!isMobile}\r\n            active={selectedRow.id === row.id}\r\n          />\r\n        </div>\r\n      </div>\r\n      {isMobile && (\r\n        <div className=\"divTableCell m-action\">\r\n          <div>\r\n            <ButtonDef\r\n              textButton=\"Voir le devis\"\r\n              onClick={() => setActiveRow(row)}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const setStatusReject = (e) => {\r\n    e.preventDefault();\r\n    const validationForm = validForm(state);\r\n    setState(validationForm.form);\r\n    if (!validationForm.valid) return;\r\n    setIsPending(true);\r\n    connector({\r\n      url: `${endPoints.DEVIS}/reject/${selectedRow.id}`,\r\n      method: \"PUT\",\r\n      data: {\r\n        rejectRaison: state.raison.value,\r\n        newDevis: state.newDevis.value,\r\n      },\r\n      success: (response) => {\r\n        setIsPending(false);\r\n        setSelectedRow({ ...response.data });\r\n        setDevis(\r\n          devis.map((devi) =>\r\n            devi.id === response.data.id ? response.data : devi\r\n          )\r\n        );\r\n        NotificationManager.success(\"Devis refusé\", \"\");\r\n        setShowModalReject(false);\r\n        getCountReport();\r\n      },\r\n      catch: (err) => {\r\n        setIsPending(false);\r\n        console.log(err);\r\n      },\r\n    });\r\n  };\r\n\r\n  const setStatusAccept = (e) => {\r\n    e.preventDefault();\r\n    const idDeliveryMode = selectedRow.deliveryMode.id;\r\n    history.push(\r\n      `/univers/${selectedRow.urlBenefit}/demande/${idDeliveryMode}?command=${selectedRow.id}`\r\n    );\r\n  };\r\n\r\n  const getColumns = () => {\r\n    const columns = [];\r\n    if (!isClient)\r\n      columns.push({\r\n        key: \"client.firstName\",\r\n        text: \"Clients\",\r\n        sort: true,\r\n      });\r\n    if (!isRepairman)\r\n      columns.push({\r\n        key: \"benefit.user.enterprise\",\r\n        text: \"Réparateurs\",\r\n        sort: true,\r\n      });\r\n    return [\r\n      ...columns,\r\n      { key: \"id\", text: \"N° du devis\", sort: true },\r\n      { key: \"title\", text: \"Nom du service\", sort: true },\r\n      { key: \"createdAt\", text: \"Commandé le\", sort: true },\r\n      {\r\n        key: \"validationDate\",\r\n        text: \"Valide jusqu'au\",\r\n        sort: true,\r\n      },\r\n      { key: \"status\", text: \"Statut\" },\r\n    ];\r\n  };\r\n\r\n  const closeSide = () => {\r\n    setOpenSide(false);\r\n    setSelectedRow({});\r\n  };\r\n\r\n  const contact = () => {\r\n    connector({\r\n      url: endPoints.THREADS,\r\n      method: \"post\",\r\n      data: {\r\n        user: isClient ? selectedRow.benefit.user.id : selectedRow.client.id,\r\n      },\r\n      success: (response) => {\r\n        history.push(`${ROUTES.MESSAGERIE.url}/${response.data.id}`);\r\n      },\r\n      catch: (err) => console.log(err),\r\n    });\r\n  };\r\n\r\n  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n\r\n  const getUrlFicheBenefit = () => {\r\n    return `/univers/${selectedRow.urlBenefit}`;\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <AdminBase>\r\n      <BlocAdminContent>\r\n        <DashboardContent titlePage=\"Mes Devis\">\r\n          {totalDevis || (countReport && countReport.count) ? (\r\n            <>\r\n              <DashCardsStyle>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-4\">\r\n                    <IconCard\r\n                      icon={<IconCardPeople />}\r\n                      text=\"Nouvelles demandes\"\r\n                      nbr={countReport.new_commandes || 0}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-4\">\r\n                    <IconCard\r\n                      icon={<IconCardCheck />}\r\n                      text=\"Devis acceptés\"\r\n                      nbr={countReport.devis_accepte || 0}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-md-4\">\r\n                    <IconCard\r\n                      icon={<IconCardWating />}\r\n                      text=\"Devis en attente\"\r\n                      nbr={countReport.devis_en_attente || 0}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </DashCardsStyle>\r\n\r\n              <FilterDefault\r\n                className=\"services-filter\"\r\n                formItems={\r\n                  <>\r\n                    {!isClient && (\r\n                      <Select\r\n                        {...filter.client}\r\n                        options={getUniqueItemsByProperties(\r\n                          [\r\n                            {\r\n                              label: \"Tous les clients\",\r\n                              value: false,\r\n                            },\r\n                            ...filter.client.options,\r\n                          ],\r\n                          [\"value\", \"label\"]\r\n                        )}\r\n                        onChange={(e) => {\r\n                          const cpFilter = { ...filter };\r\n                          cpFilter.client.value = e.value;\r\n                          setFilter(cpFilter);\r\n                          setPageIndex(0);\r\n                        }}\r\n                      />\r\n                    )}\r\n                    {!isRepairman && (\r\n                      <Select\r\n                        {...filter.repairman}\r\n                        options={getUniqueItemsByProperties(\r\n                          [\r\n                            {\r\n                              label: \"Tous les réparateurs\",\r\n                              value: false,\r\n                            },\r\n                            ...filter.repairman.options,\r\n                          ],\r\n                          [\"value\", \"label\"]\r\n                        )}\r\n                        onChange={(e) => {\r\n                          const cpFilter = { ...filter };\r\n                          cpFilter.repairman.value = e.value;\r\n                          setFilter(cpFilter);\r\n                          setPageIndex(0);\r\n                        }}\r\n                      />\r\n                    )}\r\n\r\n                    <Select\r\n                      {...filter.command}\r\n                      options={getUniqueItemsByProperties(\r\n                        [\r\n                          {\r\n                            label: \"Tous les N° de devis\",\r\n                            value: false,\r\n                          },\r\n                          ...filter.command.options,\r\n                        ],\r\n                        [\"value\", \"label\"]\r\n                      )}\r\n                      onChange={(e) => {\r\n                        const cpFilter = { ...filter };\r\n                        cpFilter.command.value = e.value;\r\n                        setFilter(cpFilter);\r\n                        setPageIndex(0);\r\n                      }}\r\n                    />\r\n\r\n                    <Select\r\n                      {...filter.status}\r\n                      onChange={(e) => {\r\n                        const cpFilter = { ...filter };\r\n                        cpFilter.status.value = e.value;\r\n                        setFilter(cpFilter);\r\n                        setPageIndex(0);\r\n                      }}\r\n                    />\r\n                  </>\r\n                }\r\n              />\r\n\r\n              <ServicesTableStyle>\r\n                <Tableau\r\n                  columns={getColumns()}\r\n                  perPage={perPage}\r\n                  setPerPage={setPerPage}\r\n                  pageIndex={pageIndex}\r\n                  setPageIndex={setPageIndex}\r\n                  activeSort={activeSort}\r\n                  setActiveSort={setActiveSort}\r\n                  switshSort={switshSort}\r\n                  setSwitshSort={setSwitshSort}\r\n                  pagination={true}\r\n                  totalItemsLength={totalDevis}\r\n                  data={devis}\r\n                  rowRender={rowRender}\r\n                />\r\n              </ServicesTableStyle>\r\n\r\n              <div className=\"my-3 devis-actions\">\r\n                <LabelStatus type={0} />\r\n                <LabelStatus type={3} customText=\"Refusé, Annulé\" />\r\n                <LabelStatus type={1} />\r\n                <LabelStatus type={2} />\r\n                {/* <LabelStatus type={4} /> */}\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <NoData>Aucun devis</NoData>\r\n          )}\r\n        </DashboardContent>\r\n\r\n        {openSide ? (\r\n          <DashboardSide className=\"devis-side\">\r\n            <DevisSideDetail>\r\n              {isMobile && (\r\n                <>\r\n                  <CloseButton\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      closeSide();\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n              <DsdHeader\r\n                title={\"Devis #\" + selectedRow.id}\r\n                statusType={selectedRow.status}\r\n              />\r\n              <DsdContent>\r\n                <Link to={isAdmin ? `${getUrlFicheBenefit()}` : \"#\"}>\r\n                  <h2\r\n                    className=\"content-title\"\r\n                    style={isAdmin ? { textDecoration: \"underline\" } : {}}\r\n                  >\r\n                    {selectedRow.title}\r\n                  </h2>\r\n                </Link>\r\n\r\n                {!isRepairman && (\r\n                  <BlocAuth\r\n                    imgUrl={getPathImage(selectedRow.benefit.user.picture)}\r\n                    imgAlt={`${selectedRow.benefit.user.enterprise}`}\r\n                    name={\r\n                      <Link\r\n                        style={\r\n                          isAdmin\r\n                            ? {\r\n                                textDecoration: \"underline\",\r\n                                color: \"#000\",\r\n                                fontWeight: \"600\",\r\n                              }\r\n                            : {\r\n                                textDecoration: \"none\",\r\n                                color: \"#000\",\r\n                                fontWeight: \"600\",\r\n                              }\r\n                        }\r\n                        to={\r\n                          isAdmin\r\n                            ? `${ROUTES.REPARATEURS.url}?user=${selectedRow.benefit.user.id}`\r\n                            : \"#\"\r\n                        }\r\n                      >\r\n                        {selectedRow.benefit.user.enterprise}\r\n                      </Link>\r\n                    }\r\n                  />\r\n                )}\r\n\r\n                {!isClient && (\r\n                  <BlocInfo>\r\n                    <h3>\r\n                      {isAdmin ? (\r\n                        <>\r\n                          Client:{\" \"}\r\n                          <Link\r\n                            to={`${ROUTES.CLIENTS.url}?idclient=${selectedRow.client.id}`}\r\n                          >{`${selectedRow.client.firstName} ${selectedRow.client.lastName}`}</Link>{\" \"}\r\n                        </>\r\n                      ) : (\r\n                        `${selectedRow.client.firstName} ${selectedRow.client.lastName}`\r\n                      )}\r\n                    </h3>\r\n                    <span>\r\n                      Devis demandé le{\" \"}\r\n                      {moment(selectedRow.createdAt).format(\"DD/MM/YYYY\")}\r\n                    </span>\r\n                  </BlocInfo>\r\n                )}\r\n\r\n                <BlocInfo>\r\n                  <h4 className=\"success-style\">\r\n                    Mode de délivrance souhaité :\r\n                  </h4>\r\n                  <p>{selectedRow.deliveryMode.deliveryModeType.name}</p>\r\n                </BlocInfo>\r\n                {selectedRow.deliveryMode.deliveryModeType\r\n                  .requireDeliveryAddress && (\r\n                  <BlocInfo>\r\n                    <h4 className=\"success-style\">Adresse de livraison :</h4>\r\n                    <p>\r\n                      {selectedRow.address}, {selectedRow.additionalAddress},{\" \"}\r\n                      {selectedRow.postalCode}, {selectedRow.city}\r\n                    </p>\r\n                  </BlocInfo>\r\n                )}\r\n                <BlocInfo withBorder>\r\n                  {!!selectedRow?.title?.length && (\r\n                    <h4 className=\"warning-style w-lg\">\r\n                      Titre du devis : {selectedRow.title}\r\n                    </h4>\r\n                  )}\r\n                  {selectedRow.dateSend ? (\r\n                    <p>\r\n                      Emis le:{\" \"}\r\n                      {moment(selectedRow.dateSend).format(\"DD/MM/YYYY\")}\r\n                    </p>\r\n                  ) : null}\r\n                  {selectedRow.validationDate ? (\r\n                    <p>\r\n                      Valide jusqu’au:{\" \"}\r\n                      {moment(selectedRow.validationDate).format(\"DD/MM/YYYY\")}\r\n                    </p>\r\n                  ) : null}\r\n                  {selectedRow.acceptanceDate &&\r\n                  selectedRow.status != 3 &&\r\n                  selectedRow.status != 4 ? (\r\n                    <p>\r\n                      Accepté le :{\" \"}\r\n                      {moment(selectedRow.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n                    </p>\r\n                  ) : null}\r\n                  {selectedRow.rejectionDate ? (\r\n                    <p>\r\n                      Refusé le:{\" \"}\r\n                      {moment(selectedRow.rejectionDate).format(\"DD/MM/YYYY\")}\r\n                    </p>\r\n                  ) : null}\r\n                  {selectedRow.cancellationDate ? (\r\n                    <p>\r\n                      Annulé le:{\" \"}\r\n                      {moment(selectedRow.cancellationDate).format(\r\n                        \"DD/MM/YYYY\"\r\n                      )}\r\n                      {selectedRow.updatedBy && (\r\n                        <>\r\n                          {\" \"}\r\n                          par\r\n                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_CLIENT) &&\r\n                            ` le client ${selectedRow.updatedBy.firstName} ${selectedRow.updatedBy.lastName}`}\r\n                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_REPAIRMAN) &&\r\n                            ` le réparateur ${selectedRow.updatedBy.enterprise}`}\r\n                          {selectedRow.updatedBy.roles.includes(ROLES.ROLE_ADMIN) && ` l'administrateur du site`}\r\n                        </>\r\n                      ) }\r\n                    </p>\r\n                  ) : null}\r\n\r\n                  {selectedRow.rejectRaison && <p>{selectedRow.rejectRaison}</p>}\r\n                </BlocInfo>\r\n                {!!selectedRow.total && !!selectedRow.benefit.priceQuote && (\r\n                  <BlocInfo>\r\n                    <h4 className=\"success-style\">Prix du devis : </h4>\r\n                    <p>\r\n                      {selectedRow.benefit.priceQuote?.toFixed(2)} € TTC\r\n                      {selectedRow.adjuste ? \"(réglé)\" : \"\"}\r\n                    </p>\r\n                  </BlocInfo>\r\n                )}\r\n\r\n                {!!selectedRow.devisLines.length && (\r\n                  <BlocInfo withBorder>\r\n                    <h3 className=\"success-style w-lg\">\r\n                      Montant TTC :{\" \"}\r\n                      {ifNegatifReturn0(\r\n                        selectedRow.devisLines\r\n                          .map(\r\n                            (dl) =>\r\n                              calcDevisLine(\r\n                                dl.qte,\r\n                                dl.unityPrice,\r\n                                dl.reduction,\r\n                                dl.tva\r\n                              ).priceTotalTtc\r\n                          )\r\n                          .reduce((a, b) => a + b, 0)\r\n                      ).toFixed(2)}\r\n                      €\r\n                    </h3>\r\n                    <h4 className=\"warning-style w-lg\">\r\n                      Montant HT :{\" \"}\r\n                      {ifNegatifReturn0(\r\n                        selectedRow.devisLines\r\n                          .map(\r\n                            (dl) =>\r\n                              calcDevisLine(\r\n                                dl.qte,\r\n                                dl.unityPrice,\r\n                                dl.reduction,\r\n                                dl.tva\r\n                              ).priceTotalHt\r\n                          )\r\n                          .reduce((a, b) => a + b, 0)\r\n                      ).toFixed(2)}\r\n                      €\r\n                    </h4>\r\n                    <ButtonDef\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setIsLoading(true);\r\n                        downloadFile(\r\n                          `${endPoints.EXPORT_DEVIS}/${selectedRow.id}`,\r\n                          `Devis#${selectedRow.id}.pdf`,\r\n                           setIsLoading\r\n                        );\r\n                      }}\r\n                      className=\"link-download-btn\"\r\n                      spinner={isLoading}\r\n                      textButton=\"Télécharger le devis\"\r\n                    />\r\n                  </BlocInfo>\r\n                )}\r\n              </DsdContent>\r\n              {!isAdmin && (\r\n                <DsdAction>\r\n                  <ButtonDef\r\n                    className=\"btn-light\"\r\n                    onClick={contact}\r\n                    textButton=\"Contacter\"\r\n                  />\r\n                  {isClient && selectedRow.status === 1 && (\r\n                    <>\r\n                      <ButtonDef\r\n                        className=\"btn-orange\"\r\n                        textButton=\"Refuser le devis\"\r\n                        spinner={isPending}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          setShowModalReject(true);\r\n                        }}\r\n                      />\r\n                      <ButtonDef\r\n                        textButton=\"Accepter le devis\"\r\n                        spinner={isPending}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          setShowModalAccept(true);\r\n                        }}\r\n                      />\r\n                    </>\r\n                  )}\r\n                  {isRepairman && (\r\n                    <ButtonDef\r\n                      textButton=\"Editer le devis\"\r\n                      onClick={(e) => {\r\n                        history.push(\r\n                          `${ROUTES.REPA_CREATE_DEVIS.url}/${selectedRow.id}`\r\n                        );\r\n                      }}\r\n                    />\r\n                  )}\r\n                </DsdAction>\r\n              )}\r\n            </DevisSideDetail>\r\n          </DashboardSide>\r\n        ) : null}\r\n\r\n        <PopinModal\r\n          show={showModalReject}\r\n          handleClose={() => {\r\n            setShowModalReject(false);\r\n          }}\r\n          title={`Refuser le devis#${selectedRow.id}`}\r\n        >\r\n          <form onSubmit={setStatusReject}>\r\n            <Input\r\n              {...state.raison}\r\n              onChange={(e) => {\r\n                const cpState = { ...state };\r\n                cpState.raison.value = e.target.value;\r\n                setState(cpState);\r\n              }}\r\n            />\r\n            <SingleCheckbox\r\n              {...state.newDevis}\r\n              onChange={(e) => {\r\n                const cpState = { ...state };\r\n                cpState.newDevis.value = e.target.checked;\r\n                setState(cpState);\r\n              }}\r\n            />\r\n            <DsdAction>\r\n              <ButtonDef\r\n                textButton=\"Annuler\"\r\n                className=\"btn-light\"\r\n                spinner={isPending}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setShowModalReject(false);\r\n                }}\r\n              />\r\n              <ButtonDef textButton=\"Confirmer le refus\" spinner={isPending} />\r\n            </DsdAction>\r\n          </form>\r\n        </PopinModal>\r\n        <PopinModal\r\n          show={showModalAccept}\r\n          handleClose={() => {\r\n            setShowModalAccept(false);\r\n          }}\r\n          title={`Accepter le devis#${selectedRow.id} et régler la prestation`}\r\n        >\r\n          <form onSubmit={setStatusAccept}>\r\n            <DsdAction>\r\n              <ButtonDef\r\n                textButton=\"Annuler\"\r\n                className=\"btn-light\"\r\n                spinner={isPending}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setShowModalAccept(false);\r\n                }}\r\n              />\r\n              <ButtonDef textButton=\"Confirmer\" spinner={isPending} />\r\n            </DsdAction>\r\n          </form>\r\n        </PopinModal>\r\n      </BlocAdminContent>\r\n    </AdminBase>\r\n  );\r\n});\r\n"
        }
    ]
}