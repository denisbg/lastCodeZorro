{
    "sourceFile": "src/views/back/repairman/create-devis.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1714720608072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1714720669176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,24 +316,9 @@\n           </span>\r\n         </div>\r\n       </div>\r\n       <div className=\"table-cell\">\r\n-        {{/*\r\n-        <div className=\"m-full\">\r\n-          {isMobile && <span>TTC:</span>}\r\n-          <span>\r\n-            {(\r\n-              calcDevisLine(\r\n-                state.devis[index].qte.value,\r\n-                state.devis[index].unityPrice.value,\r\n-                state.devis[index].reduction.value,\r\n-                state.devis[index].tva.value\r\n-              ).priceTotalTtc ?? 0\r\n-            ).toFixed(2)}\r\n-            €\r\n-          </span>\r\n-        </div>\r\n-          */}}\r\n+      \r\n         <Input\r\n           {...row.totalTTC}\r\n           label={isMobile ? \"Total TTC\" : \"\"}\r\n           onChange={(e) => {\r\n"
                },
                {
                    "date": 1714720691261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,24 @@\n           </span>\r\n         </div>\r\n       </div>\r\n       <div className=\"table-cell\">\r\n-      \r\n+        {/*\r\n+        <div className=\"m-full\">\r\n+          {isMobile && <span>TTC:</span>}\r\n+          <span>\r\n+            {(\r\n+              calcDevisLine(\r\n+                state.devis[index].qte.value,\r\n+                state.devis[index].unityPrice.value,\r\n+                state.devis[index].reduction.value,\r\n+                state.devis[index].tva.value\r\n+              ).priceTotalTtc ?? 0\r\n+            ).toFixed(2)}\r\n+            €\r\n+          </span>\r\n+        </div>\r\n+          */}\r\n         <Input\r\n           {...row.totalTTC}\r\n           label={isMobile ? \"Total TTC\" : \"\"}\r\n           onChange={(e) => {\r\n"
                },
                {
                    "date": 1714720770208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,17 @@\n       empty: true,\r\n       className: \"tva-devis\",\r\n       isNumber: true,\r\n     },\r\n+    totalTTC: {\r\n+      type: \"number\",\r\n+      name: \"totalTTC\",\r\n+      value: 0,\r\n+      max: 9999,\r\n+      empty: true,\r\n+      isNumber: true,\r\n+      classInput: \"input-num\"\r\n+    },\r\n   };\r\n   const [totalTTC, setTotalTTC] = useState(0);\r\n   const [state, setState] = useState({\r\n     title: {\r\n"
                },
                {
                    "date": 1714721498930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,13 @@\n               ...devisLine.tva,\r\n               value: parseFloat(dl.tva),\r\n               disabled: disabled,\r\n             },\r\n+            totalTTC: {\r\n+              ...devisLine.totalTTC,\r\n+              value: parseFloat(dl.totalTTC),\r\n+              disabled: disabled,\r\n+            },\r\n             id: dl.id,\r\n           }))\r\n         : [{ ...devisLine }];\r\n       setState(cpState);\r\n"
                },
                {
                    "date": 1714722010725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,946 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { Form } from \"react-bootstrap\";\r\n+import { useHistory, withRouter } from \"react-router-dom\";\r\n+import moment from \"moment\";\r\n+import Carousel, { Modal, ModalGateway } from \"react-images\";\r\n+import AdminBase from \"../../../theme/back/adminBase\";\r\n+import DashboardContent from \"../../../components/dashboardContent\";\r\n+import DashboardSide from \"../../../components/dashboardSide\";\r\n+import Input from \"../../../components/ui-elements/input\";\r\n+import DatePickerInput from \"../../../components/ui-elements/datePickerInput\";\r\n+import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n+import { ButtonDef } from \"../../../components/ui\";\r\n+import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n+import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n+import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n+import BlocImages from \"../../../components/devis/blocks/blocImages\";\r\n+import SimpleTable from \"../../../components/devis/simpleTable\";\r\n+import Loader from \"../../../components/loader\";\r\n+import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n+import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n+import { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import { IconRemove } from \"../../../assets/styles/icons\";\r\n+import { TitlePage } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import { InlineInputStyle } from \"../../../assets/styles/devisStyles\";\r\n+import { AddGreenIcon } from \"../../../assets/styles/icons\";\r\n+import connector from \"../../../connector\";\r\n+import endPoints from \"../../../config/endPoints\";\r\n+import ROUTES from \"../../../config/routes\";\r\n+import {\r\n+  calcDevisLine,\r\n+  downloadFile,\r\n+  getFloat,\r\n+  getMsgError,\r\n+  getPathImage,\r\n+} from \"../../../helper/functions\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+\r\n+export default withRouter(function CreateDevis({ match }) {\r\n+  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n+  const history = useHistory();\r\n+  const [openSide, setOpenSide] = useState(true);\r\n+  const [message, setMessage] = useState({ text: null, type: \"error\" });\r\n+  const [devis, setDevis] = useState(false);\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const devisLine = {\r\n+    qte: {\r\n+      type: \"text\",\r\n+      name: \"qte\",\r\n+      value: 1,\r\n+      min: 1,\r\n+      empty: true,\r\n+      step: 1,\r\n+      className: \"qte-devis\",\r\n+      isNumber: true,\r\n+    },\r\n+    description: {\r\n+      type: \"text\",\r\n+      name: \"description\",\r\n+      value: \"\",\r\n+    },\r\n+    unityPrice: {\r\n+      type: \"number\",\r\n+      name: \"unityPrice\",\r\n+      value: 0,\r\n+      max: 9999,\r\n+      empty: true,\r\n+      isNumber: true,\r\n+      classInput: \"input-num\"\r\n+    },\r\n+    reduction: {\r\n+      type: \"text\",\r\n+      name: \"reduction\",\r\n+      value: 0,\r\n+      min: 0,\r\n+      max: 100,\r\n+      empty: true,\r\n+      isNumber: true,\r\n+    },\r\n+    tva: {\r\n+      type: \"text\",\r\n+      name: \"tva\",\r\n+      value: 0,\r\n+      min: 0,\r\n+      max: 100,\r\n+      empty: true,\r\n+      className: \"tva-devis\",\r\n+      isNumber: true,\r\n+    },\r\n+    totalTTC: {\r\n+      type: \"number\",\r\n+      name: \"totalTTC\",\r\n+      value: 0,\r\n+      max: 9999,\r\n+      empty: true,\r\n+      isNumber: true,\r\n+      classInput: \"input-num\"\r\n+    },\r\n+  };\r\n+  const [totalTTC, setTotalTTC] = useState(0);\r\n+  const [state, setState] = useState({\r\n+    title: {\r\n+      label: \"Titre: \",\r\n+      name: \"title\",\r\n+      placeholder: \"Titre\",\r\n+      value: \"Remplacement carte mère\",\r\n+      type: \"text\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: true,\r\n+    },\r\n+    valideUntil: {\r\n+      label: \"Valide jusqu'au : \",\r\n+      name: \"valideUntil\",\r\n+      value: null,\r\n+    },\r\n+    note: {\r\n+      name: \"note\",\r\n+      placeholder: \"Note ...\",\r\n+      value: \"\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: false,\r\n+      as: \"textarea\",\r\n+    },\r\n+    devis: [{ ...devisLine }],\r\n+  });\r\n+\r\n+  const [currentImage, setCurrentImage] = useState(0);\r\n+  const [stateImage, setStateImage] = useState(false);\r\n+  const [dataGallery, setDataGallery] = useState([]);\r\n+  const openLightbox = (photo, index) => {\r\n+    setCurrentImage(index);\r\n+    setStateImage(true);\r\n+  };\r\n+  const closeLightbox = () => {\r\n+    setStateImage(false);\r\n+  };\r\n+  const [showModalError, setShowModalError] = useState(false);\r\n+  const [dataModalError, setDataModalError] = useState({\r\n+    title: \"\",\r\n+    type: \"\",\r\n+    description: \"\",\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (match.params.id) {\r\n+      connector({\r\n+        url: `${endPoints.COMMANDS}/${match.params.id}`,\r\n+        success: (response) => {\r\n+          const obj = response.data;\r\n+          setDevis({ ...obj });\r\n+          if (obj?.files && obj.files.length) {\r\n+            let dataGallery = [];\r\n+            for (let i = 0; i < obj.files.length; i++) {\r\n+              dataGallery.push({\r\n+                source: getPathImage(obj.files[i]),\r\n+              });\r\n+            }\r\n+            setDataGallery(dataGallery);\r\n+          }\r\n+        },\r\n+        catch: (err) => console.log(err),\r\n+      });\r\n+    }\r\n+  }, [match.params.id]);\r\n+\r\n+  useEffect(() => {\r\n+    if (devis) {\r\n+      const cpState = { ...state };\r\n+      let disabled = devis.status !== 0;\r\n+      cpState.valideUntil.disabled =\r\n+        cpState.note.disabled =\r\n+        cpState.title.disabled =\r\n+          disabled;\r\n+      cpState.valideUntil.value = devis.validationDate\r\n+        ? new Date(devis.validationDate)\r\n+        : null;\r\n+      cpState.title.value = devis.title ?? devis.benefit.service.name;\r\n+      cpState.note.value = devis.extraNote;\r\n+      cpState.devis = devis.devisLines.length\r\n+        ? devis.devisLines.map((dl) => ({\r\n+            qte: {\r\n+              ...devisLine.qte,\r\n+              value: parseInt(dl.qte),\r\n+              disabled: disabled,\r\n+            },\r\n+            description: {\r\n+              ...devisLine.description,\r\n+              value: dl.description,\r\n+              disabled: disabled,\r\n+            },\r\n+            unityPrice: {\r\n+              ...devisLine.unityPrice,\r\n+              value: parseFloat(dl.unityPrice),\r\n+              disabled: disabled,\r\n+            },\r\n+            reduction: {\r\n+              ...devisLine.reduction,\r\n+              value: parseFloat(dl.reduction),\r\n+              disabled: disabled,\r\n+            },\r\n+            tva: {\r\n+              ...devisLine.tva,\r\n+              value: parseFloat(dl.tva),\r\n+              disabled: disabled,\r\n+            },\r\n+            totalTTC: {\r\n+              ...devisLine.totalTTC,\r\n+              value: parseFloat(dl.totalTTC),\r\n+              disabled: disabled,\r\n+            },\r\n+            id: dl.id,\r\n+          }))\r\n+        : [{ ...devisLine }];\r\n+      setState(cpState);\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [devis]);\r\n+\r\n+  useEffect(() => {\r\n+    /*\r\n+    setTotalTTC(\r\n+      ifNegatifReturn0(\r\n+        state.devis\r\n+          .map(\r\n+            (dl) =>\r\n+              calcDevisLine(\r\n+                dl.qte.value,\r\n+                dl.unityPrice.value,\r\n+                dl.reduction.value,\r\n+                dl.tva.value\r\n+              ).priceTotalTtc\r\n+          )\r\n+          .reduce((a, b) => a + b, 0)\r\n+      )\r\n+    );*/\r\n+     \r\n+    setTotalTTC(\r\n+      ifNegatifReturn0(\r\n+        state.devis\r\n+          .map(\r\n+            (dl) =>\r\n+              calcDevisLine(\r\n+                dl.qte.value,\r\n+                dl.unityPrice.value,\r\n+                dl.reduction.value,\r\n+                dl.tva.value\r\n+              ).priceTotalTtc\r\n+          )\r\n+          .reduce((a, b) => a + b, 0)\r\n+      )\r\n+    );\r\n+    \r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [state]);\r\n+\r\n+  const rowRender = (row, index) => (\r\n+    <div className=\"table-row\" key={`row-${index}`}>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.qte}\r\n+          label={isMobile ? \"Quantité\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (cpState.devis[index])\r\n+              cpState.devis[index].qte.value = parseInt(e.target.value);\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\" style={{ width: \"350px\" }}>\r\n+        <Input\r\n+          {...row.description}\r\n+          label={isMobile ? \"Description\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (cpState.devis[index])\r\n+              cpState.devis[index].description.value = e.target.value;\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.unityPrice}\r\n+          label={isMobile ? \"Prix unitaire HT\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) <= 9999\r\n+            ) {\r\n+              if (cpState.devis[index]) {\r\n+                cpState.devis[index].unityPrice.value = getFloat(e.target.value);\r\n+              }\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.reduction}\r\n+          label={isMobile ? \"Réduction %\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) <= 100\r\n+            ) {\r\n+              if (cpState.devis[index])\r\n+              cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.tva}\r\n+          label={isMobile ? \"TVA %\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) <= 100\r\n+            ) {\r\n+              if (cpState.devis[index]) {\r\n+                cpState.devis[index].tva.value = getFloat(e.target.value);\r\n+              }\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <div className=\"m-full\">\r\n+          {isMobile && <span>Total HT:</span>}\r\n+          <span>\r\n+            {calcDevisLine(\r\n+              state.devis[index].qte.value,\r\n+              state.devis[index].unityPrice.value,\r\n+              state.devis[index].reduction.value,\r\n+              state.devis[index].tva.value\r\n+            ).priceTotalHt.toFixed(2)}\r\n+            €\r\n+          </span>\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        {/*\r\n+        <div className=\"m-full\">\r\n+          {isMobile && <span>TTC:</span>}\r\n+          <span>\r\n+            {(\r\n+              calcDevisLine(\r\n+                state.devis[index].qte.value,\r\n+                state.devis[index].unityPrice.value,\r\n+                state.devis[index].reduction.value,\r\n+                state.devis[index].tva.value\r\n+              ).priceTotalTtc ?? 0\r\n+            ).toFixed(2)}\r\n+            €\r\n+          </span>\r\n+        </div>\r\n+          */}\r\n+        <Input\r\n+          {...row.totalTTC}\r\n+          label={isMobile ? \"Total TTC\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) <= 9999\r\n+            ) {\r\n+              if (cpState.devis[index]) {\r\n+                cpState.devis[index].totalTTC.value = getFloat(e.target.value);\r\n+              }\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        {devis.status === 0 && (\r\n+          <>\r\n+            {!isMobile ? (\r\n+              <IconRemove\r\n+                onClick={() => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.devis = state.devis.filter(\r\n+                    (dl, $in) => index !== $in\r\n+                  );\r\n+                  setState(cpState);\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <ButtonDef\r\n+                spinner={isPending}\r\n+                type=\"button\"\r\n+                textButton=\"Supprimer\"\r\n+                className=\"warning-style w-full\"\r\n+                onClick={(e) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.devis = state.devis.filter(\r\n+                    (dl, $in) => index !== $in\r\n+                  );\r\n+                  setState(cpState);\r\n+                }}\r\n+              />\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+\r\n+  const onSubmit = (e, callback = false) => {\r\n+    e.preventDefault();\r\n+    setMessage({ ...message, text: null });\r\n+    const cpState = { ...state };\r\n+    cpState.valideUntil.error = false;\r\n+    setState(cpState);\r\n+    if (!state.valideUntil.value) {\r\n+      cpState.valideUntil.error = true;\r\n+      setState(cpState);\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Champs obligatoire.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+    cpState.title.error = false;\r\n+    if (!state.title.value.length) {\r\n+      cpState.title.error = true;\r\n+      setState(cpState);\r\n+      return;\r\n+    }\r\n+    if (!state.devis.length) {\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Devis dois avoir 1 ligne au minimum.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+    if (totalTTC <= 0.5) {\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Le montant doit être d'au moins 0,50 €.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+\r\n+    let validDevisLines = true;\r\n+\r\n+    cpState.devis.forEach((dl, index) => {\r\n+      cpState.devis[index].qte.error = false;\r\n+      if (!parseInt(dl.qte.value) || parseInt(dl.qte.value) <= 0) {\r\n+        cpState.devis[index].qte.error = true;\r\n+        validDevisLines = false;\r\n+      }\r\n+      cpState.devis[index].unityPrice.error = false;\r\n+      if (!parseFloat(dl.unityPrice.value)) {\r\n+        cpState.devis[index].unityPrice.error = true;\r\n+        validDevisLines = false;\r\n+      }\r\n+      cpState.devis[index].description.error = false;\r\n+      if (!dl.description.value) {\r\n+        cpState.devis[index].description.error = true;\r\n+        validDevisLines = false;\r\n+      }\r\n+    });\r\n+    setState(cpState);\r\n+\r\n+    if (!validDevisLines) {\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Champs obligatoire.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+    const data = {\r\n+      validationDate: state.valideUntil.value,\r\n+      extraNote: state.note.value,\r\n+      title: state.title.value,\r\n+      devisLines: state.devis.map((dl) => {\r\n+        const obj = {\r\n+          id: null,\r\n+          qte: dl.qte.value,\r\n+          unityPrice: parseFloat(dl.unityPrice.value),\r\n+          reduction: parseFloat(dl.reduction.value),\r\n+          tva: parseFloat(dl.tva.value),\r\n+          description: dl.description.value,\r\n+        };\r\n+        if (dl.id) {\r\n+          obj.id = `/api/devis_lines/${dl.id}`;\r\n+        }\r\n+        return obj;\r\n+      }),\r\n+    };\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        url: `${endPoints.DEVIS}/${devis.id}`,\r\n+        data: data,\r\n+        method: \"PUT\",\r\n+        success: (response) => {\r\n+          setIsPending(false);\r\n+          setDevis({ ...response.data });\r\n+          if (callback) callback();\r\n+\r\n+          setMessage({\r\n+            type: \"success\",\r\n+            text: \"Devis enregisté\",\r\n+          });\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+          setIsPending(false);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const setStatusEnAttente = () => {\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        url: `${endPoints.DEVIS}/send/${devis.id}`,\r\n+        method: \"PUT\",\r\n+        success: (response) => {\r\n+          setDevis({ ...response.data });\r\n+          setMessage({\r\n+            type: \"success\",\r\n+            text: \"Devis envoyé\",\r\n+          });\r\n+          setIsPending(false);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+          const msg = getMsgError(err);\r\n+          if (msg === \"errorPayRepairman\") {\r\n+            setDataModalError({\r\n+              type: \"modal-save\",\r\n+              title: \"Impossible de régler votre prestation\",\r\n+              description:\r\n+                \"Oops. Il y a un soucis avec votre compte bancaire. Avant d'envoyer votre devis, veuillez contacter l'administrateur du site afin de vérifier vos informations bancaires.\",\r\n+            });\r\n+            setShowModalError(true);\r\n+          } else {\r\n+            NotificationManager.error(msg, \"\");\r\n+          }\r\n+          setIsPending(false);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const newDevis = () => {\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        url: `${endPoints.DEVIS}/${devis.id}/new`,\r\n+        method: \"PUT\",\r\n+        success: (response) => {\r\n+          setMessage({ type: \"success\", text: \"New Devis\" });\r\n+          history.push(`${ROUTES.REPA_CREATE_DEVIS.url}/${response.data.id}`);\r\n+          setIsPending(false);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+          setIsPending(false);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n+\r\n+  if (!devis) return <Loader />;\r\n+\r\n+  const closeSide = () => {\r\n+    setOpenSide(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <AdminBase>\r\n+      <BlocAdminContent>\r\n+        <DashboardContent\r\n+          titlePage={`Devis #${devis.id}`}\r\n+          backlinkUrl={ROUTES.DEVIS.url}\r\n+          backlinkText=\"< Retour à la liste des Devis\"\r\n+        >\r\n+          <Form onSubmit={onSubmit}>\r\n+            {message.text ? (\r\n+              <span\r\n+                className={\r\n+                  message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n+                }\r\n+              >\r\n+                {message.text}\r\n+              </span>\r\n+            ) : null}\r\n+\r\n+            <InlineInputStyle>\r\n+              <div className=\"input-full\">\r\n+                <Input\r\n+                  {...state.title}\r\n+                  onChange={(e) => {\r\n+                    const cpState = { ...state };\r\n+                    cpState.title.value = e.target.value;\r\n+                    setState(cpState);\r\n+                  }}\r\n+                />\r\n+              </div>\r\n+            </InlineInputStyle>\r\n+\r\n+            <InlineInputStyle>\r\n+              <DatePickerInput\r\n+                {...state.valideUntil}\r\n+                minDate={new Date()}\r\n+                onChange={(date) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.valideUntil.value = date;\r\n+                  setState(cpState);\r\n+                }}\r\n+              />\r\n+            </InlineInputStyle>\r\n+\r\n+            <TitlePage>Lignes du devis</TitlePage>\r\n+\r\n+            <SimpleTable\r\n+              columns={[\r\n+                { key: \"quantity\", text: \"Quantité\" },\r\n+                { key: \"description\", text: \"Description\" },\r\n+                { key: \"ht\", text: \"Prix unitaire HT\" },\r\n+                { key: \"reduction\", text: \"Réduction %\" },\r\n+                { key: \"tva\", text: \"TVA %\" },\r\n+                { key: \"total_ht\", text: \"Total HT\" },\r\n+                { key: \"ttc\", text: \"TTC\" },\r\n+                { key: \"actions\", text: \"\" },\r\n+              ]}\r\n+              data={state.devis}\r\n+              rowRender={rowRender}\r\n+            />\r\n+\r\n+            <div className=\"d-sm-flex align-items-center justify-content-between mb-sm-3 mb-5\">\r\n+              <div>\r\n+                {devis.status === 0 && (\r\n+                  <ButtonDef\r\n+                    spinner={isPending}\r\n+                    type=\"button\"\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      const cpState = { ...state };\r\n+                      cpState.devis.push({ ...devisLine });\r\n+                      setState(cpState);\r\n+                    }}\r\n+                    textButton={\r\n+                      <>\r\n+                        <AddGreenIcon /> Nouvelle ligne\r\n+                      </>\r\n+                    }\r\n+                    className=\"btn-add m-r\"\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+              <BlocInfo>\r\n+                <h3 className=\"warning-style w-lg text-right\">\r\n+                  Total HT :{\" \"}\r\n+                  {ifNegatifReturn0(\r\n+                    state.devis\r\n+                      .map(\r\n+                        (dl) =>\r\n+                          calcDevisLine(\r\n+                            dl.qte.value,\r\n+                            dl.unityPrice.value,\r\n+                            dl.reduction.value,\r\n+                            dl.tva.value\r\n+                          ).priceTotalHt\r\n+                      )\r\n+                      .reduce((a, b) => a + b, 0)\r\n+                  ).toFixed(2)}\r\n+                  €\r\n+                </h3>\r\n+                <h4 className=\"w-lg text-right\">\r\n+                  Montant TVA{\" \"}\r\n+                  {ifNegatifReturn0(\r\n+                    state.devis\r\n+                      .map(\r\n+                        (dl) =>\r\n+                          calcDevisLine(\r\n+                            dl.qte.value,\r\n+                            dl.unityPrice.value,\r\n+                            dl.reduction.value,\r\n+                            dl.tva.value\r\n+                          ).amountTva\r\n+                      )\r\n+                      .reduce((a, b) => a + b, 0)\r\n+                  ).toFixed(2)}\r\n+                  €\r\n+                </h4>\r\n+                <h4 className=\"success-style w-lg text-right\">\r\n+                  Montant TTC : {totalTTC.toFixed(2)}€\r\n+                </h4>\r\n+              </BlocInfo>\r\n+            </div>\r\n+\r\n+            <TitlePage>Notes additionnelles</TitlePage>\r\n+            <Input\r\n+              {...state.note}\r\n+              onChange={(e) => {\r\n+                const cpState = { ...state };\r\n+                cpState.note.value = e.target.value;\r\n+                setState(cpState);\r\n+              }}\r\n+            />\r\n+\r\n+            <div className=\"d-flex justify-content-center mb-5 flex-column flex-sm-row\">\r\n+              <ButtonDef\r\n+                spinner={isPending}\r\n+                type=\"button\"\r\n+                textButton=\"Télécharger En pdf\"\r\n+                className=\"m-1\"\r\n+                onClick={(e) => {\r\n+                  if (devis.status === 0)\r\n+                    onSubmit(e, () => {\r\n+                      setIsPending(true);\r\n+                      downloadFile(\r\n+                        `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n+                        `Devis#${devis.id}.pdf`,\r\n+                        setIsPending\r\n+                      );\r\n+                    });\r\n+                  else {\r\n+                    e.preventDefault();\r\n+                    setIsPending(true);\r\n+                    downloadFile(\r\n+                      `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n+                      `Devis#${devis.id}.pdf`,\r\n+                      setIsPending\r\n+                    );\r\n+                  }\r\n+                }}\r\n+              />\r\n+              {devis.status === 0 && (\r\n+                <>\r\n+                  <ButtonDef\r\n+                    spinner={isPending}\r\n+                    type=\"button\"\r\n+                    textButton=\"Enregistrer\"\r\n+                    className=\"m-1\"\r\n+                    onClick={(e) => {\r\n+                      onSubmit(e);\r\n+                    }}\r\n+                  />\r\n+                  <ButtonDef\r\n+                    spinner={isPending}\r\n+                    type=\"button\"\r\n+                    textButton=\"Envoyer le devis\"\r\n+                    className=\"m-1\"\r\n+                    onClick={(e) => {\r\n+                      if (devis.status === 0) onSubmit(e, setStatusEnAttente);\r\n+                      else {\r\n+                        e.preventDefault();\r\n+                        setStatusEnAttente();\r\n+                      }\r\n+                    }}\r\n+                  />\r\n+                </>\r\n+              )}\r\n+              {devis.status === 3 && devis.newDevis && !devis.isCommand && (\r\n+                <ButtonDef\r\n+                  spinner={isPending}\r\n+                  type=\"button\"\r\n+                  textButton=\"Nouveau devis\"\r\n+                  className=\"m-1\"\r\n+                  onClick={(e) => {\r\n+                    e.preventDefault();\r\n+                    newDevis();\r\n+                  }}\r\n+                />\r\n+              )}\r\n+            </div>\r\n+          </Form>\r\n+        </DashboardContent>\r\n+        {!isMobile\r\n+          ? openSide && (\r\n+              <DashboardSide className=\"devis-side\">\r\n+                {isMobile && (\r\n+                  <>\r\n+                    <CloseButton\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        closeSide();\r\n+                      }}\r\n+                    />\r\n+                  </>\r\n+                )}\r\n+                <DevisSideDetail>\r\n+                  <DsdHeader\r\n+                    title={`Devis #${devis.id}`}\r\n+                    statusType={devis.status}\r\n+                  />\r\n+\r\n+                  <DsdContent>\r\n+                    <h2 className=\"content-title\">\r\n+                      {devis.benefit.service.name}\r\n+                    </h2>\r\n+\r\n+                    <BlocInfo>\r\n+                      <h3>\r\n+                        {`${devis.client.firstName} ${devis.client.lastName}`}\r\n+                      </h3>\r\n+                      <span>\r\n+                        Devis demandé le{\" \"}\r\n+                        {moment(devis.createdAt).format(\"DD/MM/YYYY\")}\r\n+                      </span>\r\n+                    </BlocInfo>\r\n+\r\n+                    <BlocInfo>\r\n+                      <h4 className=\"success-style\">\r\n+                        Mode de délivrance souhaité :\r\n+                      </h4>\r\n+                      <p>{devis.deliveryMode.deliveryModeType.name}</p>\r\n+                    </BlocInfo>\r\n+\r\n+                    {devis.deliveryMode.deliveryModeType\r\n+                      .requireDeliveryAddress && (\r\n+                      <BlocInfo>\r\n+                        <h4 className=\"success-style\">\r\n+                          Adresse de livraison :\r\n+                        </h4>\r\n+                        <p>\r\n+                          {devis.address}, {devis.additionalAddress},{\" \"}\r\n+                          {devis.postalCode}, {devis.city}\r\n+                        </p>\r\n+                      </BlocInfo>\r\n+                    )}\r\n+                    <BlocInfo withBorder>\r\n+                      {!!devis?.title?.length && (\r\n+                        <h4 className=\"warning-style w-lg\">\r\n+                          Titre du devis : {devis.title}\r\n+                        </h4>\r\n+                      )}\r\n+                      {devis.dateSend ? (\r\n+                        <p>\r\n+                          Emis le: {moment(devis.dateSend).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.validationDate ? (\r\n+                        <p>\r\n+                          Valide jusqu’au:{\" \"}\r\n+                          {moment(devis.validationDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.acceptanceDate &&\r\n+                      devis.status != 3 &&\r\n+                      devis.status != 4 ? (\r\n+                        <p>\r\n+                          Accepté le :{\" \"}\r\n+                          {moment(devis.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.rejectionDate ? (\r\n+                        <p>\r\n+                          Refusé le:{\" \"}\r\n+                          {moment(devis.rejectionDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.cancellationDate ? (\r\n+                        <p>\r\n+                          Annulé le:{\" \"}\r\n+                          {moment(devis.cancellationDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                    </BlocInfo>\r\n+                    {!!devis.total && !!devis.benefit.priceQuote && (\r\n+                      <BlocInfo>\r\n+                        <h4 className=\"success-style\">Prix du devis : </h4>\r\n+                        <p>\r\n+                          {devis.benefit.priceQuote?.toFixed(2)} € TTC\r\n+                          {devis.paiements.filter(\r\n+                            (pay) => pay.object === \"charge\"\r\n+                          ).length\r\n+                            ? \"(réglé)\"\r\n+                            : \"\"}\r\n+                        </p>\r\n+                      </BlocInfo>\r\n+                    )}\r\n+                    {devis.description ? (\r\n+                      <BlocInfo>\r\n+                        <h3 className=\"warning-style\">Description :</h3>\r\n+                        <div className=\"desc-devis\">{devis.description}</div>\r\n+                      </BlocInfo>\r\n+                    ) : null}\r\n+\r\n+                    {devis.files.length ? (\r\n+                      <>\r\n+                        <BlocImages\r\n+                          title=\"Photos\"\r\n+                          data={dataGallery}\r\n+                          onClick={openLightbox}\r\n+                        />\r\n+                        <ModalGateway>\r\n+                          {stateImage ? (\r\n+                            <Modal onClose={closeLightbox}>\r\n+                              <Carousel\r\n+                                currentIndex={currentImage}\r\n+                                views={dataGallery}\r\n+                              />\r\n+                            </Modal>\r\n+                          ) : null}\r\n+                        </ModalGateway>\r\n+                      </>\r\n+                    ) : null}\r\n+                  </DsdContent>\r\n+                </DevisSideDetail>\r\n+\r\n+                <PopinModal\r\n+                  show={showModalError}\r\n+                  handleClose={() => {\r\n+                    setShowModalError(false);\r\n+                  }}\r\n+                  title={dataModalError.title}\r\n+                >\r\n+                  <p>{dataModalError.description}</p>\r\n+                  <div className=\"btns-confirm\">\r\n+                    <ButtonDef\r\n+                      textButton=\"Contacter\"\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        history.push(`${ROUTES.CONTACT.url}`);\r\n+                      }}\r\n+                    />\r\n+                  </div>\r\n+                </PopinModal>\r\n+              </DashboardSide>\r\n+            )\r\n+          : null}\r\n+      </BlocAdminContent>\r\n+    </AdminBase>\r\n+  );\r\n+});\r\n"
                },
                {
                    "date": 1719572398789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,17 +86,8 @@\n       empty: true,\r\n       className: \"tva-devis\",\r\n       isNumber: true,\r\n     },\r\n-    totalTTC: {\r\n-      type: \"number\",\r\n-      name: \"totalTTC\",\r\n-      value: 0,\r\n-      max: 9999,\r\n-      empty: true,\r\n-      isNumber: true,\r\n-      classInput: \"input-num\"\r\n-    },\r\n   };\r\n   const [totalTTC, setTotalTTC] = useState(0);\r\n   const [state, setState] = useState({\r\n     title: {\r\n@@ -204,13 +195,8 @@\n               ...devisLine.tva,\r\n               value: parseFloat(dl.tva),\r\n               disabled: disabled,\r\n             },\r\n-            totalTTC: {\r\n-              ...devisLine.totalTTC,\r\n-              value: parseFloat(dl.totalTTC),\r\n-              disabled: disabled,\r\n-            },\r\n             id: dl.id,\r\n           }))\r\n         : [{ ...devisLine }];\r\n       setState(cpState);\r\n@@ -218,9 +204,8 @@\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [devis]);\r\n \r\n   useEffect(() => {\r\n-    /*\r\n     setTotalTTC(\r\n       ifNegatifReturn0(\r\n         state.devis\r\n           .map(\r\n@@ -233,27 +218,9 @@\n               ).priceTotalTtc\r\n           )\r\n           .reduce((a, b) => a + b, 0)\r\n       )\r\n-    );*/\r\n-     \r\n-    setTotalTTC(\r\n-      ifNegatifReturn0(\r\n-        state.devis\r\n-          .map(\r\n-            (dl) =>\r\n-              calcDevisLine(\r\n-                dl.qte.value,\r\n-                dl.unityPrice.value,\r\n-                dl.reduction.value,\r\n-                dl.tva.value\r\n-              ).priceTotalTtc\r\n-          )\r\n-          .reduce((a, b) => a + b, 0)\r\n-      )\r\n     );\r\n-    \r\n-\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [state]);\r\n \r\n   const rowRender = (row, index) => (\r\n@@ -349,9 +316,8 @@\n           </span>\r\n         </div>\r\n       </div>\r\n       <div className=\"table-cell\">\r\n-        {/*\r\n         <div className=\"m-full\">\r\n           {isMobile && <span>TTC:</span>}\r\n           <span>\r\n             {(\r\n@@ -364,25 +330,8 @@\n             ).toFixed(2)}\r\n             €\r\n           </span>\r\n         </div>\r\n-          */}\r\n-        <Input\r\n-          {...row.totalTTC}\r\n-          label={isMobile ? \"Total TTC\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 9999\r\n-            ) {\r\n-              if (cpState.devis[index]) {\r\n-                cpState.devis[index].totalTTC.value = getFloat(e.target.value);\r\n-              }\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n       </div>\r\n       <div className=\"table-cell\">\r\n         {devis.status === 0 && (\r\n           <>\r\n@@ -635,9 +584,9 @@\n               columns={[\r\n                 { key: \"quantity\", text: \"Quantité\" },\r\n                 { key: \"description\", text: \"Description\" },\r\n                 { key: \"ht\", text: \"Prix unitaire HT\" },\r\n-                { key: \"reduction\", text: \"Réduction %\" },\r\n+                { key: \"reduction\", text: \"Total Bonus(€)\" },\r\n                 { key: \"tva\", text: \"TVA %\" },\r\n                 { key: \"total_ht\", text: \"Total HT\" },\r\n                 { key: \"ttc\", text: \"TTC\" },\r\n                 { key: \"actions\", text: \"\" },\r\n@@ -943,931 +892,4 @@\n       </BlocAdminContent>\r\n     </AdminBase>\r\n   );\r\n });\r\n-import React, { useState, useEffect } from \"react\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { Form } from \"react-bootstrap\";\r\n-import { useHistory, withRouter } from \"react-router-dom\";\r\n-import moment from \"moment\";\r\n-import Carousel, { Modal, ModalGateway } from \"react-images\";\r\n-import AdminBase from \"../../../theme/back/adminBase\";\r\n-import DashboardContent from \"../../../components/dashboardContent\";\r\n-import DashboardSide from \"../../../components/dashboardSide\";\r\n-import Input from \"../../../components/ui-elements/input\";\r\n-import DatePickerInput from \"../../../components/ui-elements/datePickerInput\";\r\n-import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n-import { ButtonDef } from \"../../../components/ui\";\r\n-import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n-import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n-import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n-import BlocImages from \"../../../components/devis/blocks/blocImages\";\r\n-import SimpleTable from \"../../../components/devis/simpleTable\";\r\n-import Loader from \"../../../components/loader\";\r\n-import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n-import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n-import { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import { IconRemove } from \"../../../assets/styles/icons\";\r\n-import { TitlePage } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import { InlineInputStyle } from \"../../../assets/styles/devisStyles\";\r\n-import { AddGreenIcon } from \"../../../assets/styles/icons\";\r\n-import connector from \"../../../connector\";\r\n-import endPoints from \"../../../config/endPoints\";\r\n-import ROUTES from \"../../../config/routes\";\r\n-import {\r\n-  calcDevisLine,\r\n-  downloadFile,\r\n-  getFloat,\r\n-  getMsgError,\r\n-  getPathImage,\r\n-} from \"../../../helper/functions\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-\r\n-export default withRouter(function CreateDevis({ match }) {\r\n-  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const history = useHistory();\r\n-  const [openSide, setOpenSide] = useState(true);\r\n-  const [message, setMessage] = useState({ text: null, type: \"error\" });\r\n-  const [devis, setDevis] = useState(false);\r\n-  const [isPending, setIsPending] = useState(false);\r\n-  const devisLine = {\r\n-    qte: {\r\n-      type: \"text\",\r\n-      name: \"qte\",\r\n-      value: 1,\r\n-      min: 1,\r\n-      empty: true,\r\n-      step: 1,\r\n-      className: \"qte-devis\",\r\n-      isNumber: true,\r\n-    },\r\n-    description: {\r\n-      type: \"text\",\r\n-      name: \"description\",\r\n-      value: \"\",\r\n-    },\r\n-    unityPrice: {\r\n-      type: \"number\",\r\n-      name: \"unityPrice\",\r\n-      value: 0,\r\n-      max: 9999,\r\n-      empty: true,\r\n-      isNumber: true,\r\n-      classInput: \"input-num\"\r\n-    },\r\n-    reduction: {\r\n-      type: \"text\",\r\n-      name: \"reduction\",\r\n-      value: 0,\r\n-      min: 0,\r\n-      max: 100,\r\n-      empty: true,\r\n-      isNumber: true,\r\n-    },\r\n-    tva: {\r\n-      type: \"text\",\r\n-      name: \"tva\",\r\n-      value: 0,\r\n-      min: 0,\r\n-      max: 100,\r\n-      empty: true,\r\n-      className: \"tva-devis\",\r\n-      isNumber: true,\r\n-    },\r\n-    totalTTC: {\r\n-      type: \"number\",\r\n-      name: \"totalTTC\",\r\n-      value: 0,\r\n-      max: 9999,\r\n-      empty: true,\r\n-      isNumber: true,\r\n-      classInput: \"input-num\"\r\n-    },\r\n-  };\r\n-  const [totalTTC, setTotalTTC] = useState(0);\r\n-  const [state, setState] = useState({\r\n-    title: {\r\n-      label: \"Titre: \",\r\n-      name: \"title\",\r\n-      placeholder: \"Titre\",\r\n-      value: \"Remplacement carte mère\",\r\n-      type: \"text\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: true,\r\n-    },\r\n-    valideUntil: {\r\n-      label: \"Valide jusqu'au : \",\r\n-      name: \"valideUntil\",\r\n-      value: null,\r\n-    },\r\n-    note: {\r\n-      name: \"note\",\r\n-      placeholder: \"Note ...\",\r\n-      value: \"\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: false,\r\n-      as: \"textarea\",\r\n-    },\r\n-    devis: [{ ...devisLine }],\r\n-  });\r\n-\r\n-  const [currentImage, setCurrentImage] = useState(0);\r\n-  const [stateImage, setStateImage] = useState(false);\r\n-  const [dataGallery, setDataGallery] = useState([]);\r\n-  const openLightbox = (photo, index) => {\r\n-    setCurrentImage(index);\r\n-    setStateImage(true);\r\n-  };\r\n-  const closeLightbox = () => {\r\n-    setStateImage(false);\r\n-  };\r\n-  const [showModalError, setShowModalError] = useState(false);\r\n-  const [dataModalError, setDataModalError] = useState({\r\n-    title: \"\",\r\n-    type: \"\",\r\n-    description: \"\",\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    if (match.params.id) {\r\n-      connector({\r\n-        url: `${endPoints.COMMANDS}/${match.params.id}`,\r\n-        success: (response) => {\r\n-          const obj = response.data;\r\n-          setDevis({ ...obj });\r\n-          if (obj?.files && obj.files.length) {\r\n-            let dataGallery = [];\r\n-            for (let i = 0; i < obj.files.length; i++) {\r\n-              dataGallery.push({\r\n-                source: getPathImage(obj.files[i]),\r\n-              });\r\n-            }\r\n-            setDataGallery(dataGallery);\r\n-          }\r\n-        },\r\n-        catch: (err) => console.log(err),\r\n-      });\r\n-    }\r\n-  }, [match.params.id]);\r\n-\r\n-  useEffect(() => {\r\n-    if (devis) {\r\n-      const cpState = { ...state };\r\n-      let disabled = devis.status !== 0;\r\n-      cpState.valideUntil.disabled =\r\n-        cpState.note.disabled =\r\n-        cpState.title.disabled =\r\n-          disabled;\r\n-      cpState.valideUntil.value = devis.validationDate\r\n-        ? new Date(devis.validationDate)\r\n-        : null;\r\n-      cpState.title.value = devis.title ?? devis.benefit.service.name;\r\n-      cpState.note.value = devis.extraNote;\r\n-      cpState.devis = devis.devisLines.length\r\n-        ? devis.devisLines.map((dl) => ({\r\n-            qte: {\r\n-              ...devisLine.qte,\r\n-              value: parseInt(dl.qte),\r\n-              disabled: disabled,\r\n-            },\r\n-            description: {\r\n-              ...devisLine.description,\r\n-              value: dl.description,\r\n-              disabled: disabled,\r\n-            },\r\n-            unityPrice: {\r\n-              ...devisLine.unityPrice,\r\n-              value: parseFloat(dl.unityPrice),\r\n-              disabled: disabled,\r\n-            },\r\n-            reduction: {\r\n-              ...devisLine.reduction,\r\n-              value: parseFloat(dl.reduction),\r\n-              disabled: disabled,\r\n-            },\r\n-            tva: {\r\n-              ...devisLine.tva,\r\n-              value: parseFloat(dl.tva),\r\n-              disabled: disabled,\r\n-            },\r\n-            totalTTC: {\r\n-              ...devisLine.totalTTC,\r\n-              value: parseFloat(dl.totalTTC),\r\n-              disabled: disabled,\r\n-            },\r\n-            id: dl.id,\r\n-          }))\r\n-        : [{ ...devisLine }];\r\n-      setState(cpState);\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [devis]);\r\n-\r\n-  useEffect(() => {\r\n-    setTotalTTC(\r\n-      ifNegatifReturn0(\r\n-        state.devis\r\n-          .map(\r\n-            (dl) =>\r\n-              calcDevisLine(\r\n-                dl.qte.value,\r\n-                dl.unityPrice.value,\r\n-                dl.reduction.value,\r\n-                dl.tva.value\r\n-              ).priceTotalTtc\r\n-          )\r\n-          .reduce((a, b) => a + b, 0)\r\n-      )\r\n-    );\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [state]);\r\n-\r\n-  const rowRender = (row, index) => (\r\n-    <div className=\"table-row\" key={`row-${index}`}>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.qte}\r\n-          label={isMobile ? \"Quantité\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (cpState.devis[index])\r\n-              cpState.devis[index].qte.value = parseInt(e.target.value);\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\" style={{ width: \"350px\" }}>\r\n-        <Input\r\n-          {...row.description}\r\n-          label={isMobile ? \"Description\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (cpState.devis[index])\r\n-              cpState.devis[index].description.value = e.target.value;\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.unityPrice}\r\n-          label={isMobile ? \"Prix unitaire HT\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 9999\r\n-            ) {\r\n-              if (cpState.devis[index]) {\r\n-                cpState.devis[index].unityPrice.value = getFloat(e.target.value);\r\n-              }\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.reduction}\r\n-          label={isMobile ? \"Réduction %\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 100\r\n-            ) {\r\n-              if (cpState.devis[index])\r\n-              cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.tva}\r\n-          label={isMobile ? \"TVA %\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 100\r\n-            ) {\r\n-              if (cpState.devis[index]) {\r\n-                cpState.devis[index].tva.value = getFloat(e.target.value);\r\n-              }\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <div className=\"m-full\">\r\n-          {isMobile && <span>Total HT:</span>}\r\n-          <span>\r\n-            {calcDevisLine(\r\n-              state.devis[index].qte.value,\r\n-              state.devis[index].unityPrice.value,\r\n-              state.devis[index].reduction.value,\r\n-              state.devis[index].tva.value\r\n-            ).priceTotalHt.toFixed(2)}\r\n-            €\r\n-          </span>\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        {/*\r\n-        <div className=\"m-full\">\r\n-          {isMobile && <span>TTC:</span>}\r\n-          <span>\r\n-            {(\r\n-              calcDevisLine(\r\n-                state.devis[index].qte.value,\r\n-                state.devis[index].unityPrice.value,\r\n-                state.devis[index].reduction.value,\r\n-                state.devis[index].tva.value\r\n-              ).priceTotalTtc ?? 0\r\n-            ).toFixed(2)}\r\n-            €\r\n-          </span>\r\n-        </div>\r\n-          */}\r\n-        <Input\r\n-          {...row.totalTTC}\r\n-          label={isMobile ? \"Total TTC\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 9999\r\n-            ) {\r\n-              if (cpState.devis[index]) {\r\n-                cpState.devis[index].totalTTC.value = getFloat(e.target.value);\r\n-              }\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        {devis.status === 0 && (\r\n-          <>\r\n-            {!isMobile ? (\r\n-              <IconRemove\r\n-                onClick={() => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.devis = state.devis.filter(\r\n-                    (dl, $in) => index !== $in\r\n-                  );\r\n-                  setState(cpState);\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <ButtonDef\r\n-                spinner={isPending}\r\n-                type=\"button\"\r\n-                textButton=\"Supprimer\"\r\n-                className=\"warning-style w-full\"\r\n-                onClick={(e) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.devis = state.devis.filter(\r\n-                    (dl, $in) => index !== $in\r\n-                  );\r\n-                  setState(cpState);\r\n-                }}\r\n-              />\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-\r\n-  const onSubmit = (e, callback = false) => {\r\n-    e.preventDefault();\r\n-    setMessage({ ...message, text: null });\r\n-    const cpState = { ...state };\r\n-    cpState.valideUntil.error = false;\r\n-    setState(cpState);\r\n-    if (!state.valideUntil.value) {\r\n-      cpState.valideUntil.error = true;\r\n-      setState(cpState);\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Champs obligatoire.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-    cpState.title.error = false;\r\n-    if (!state.title.value.length) {\r\n-      cpState.title.error = true;\r\n-      setState(cpState);\r\n-      return;\r\n-    }\r\n-    if (!state.devis.length) {\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Devis dois avoir 1 ligne au minimum.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-    if (totalTTC <= 0.5) {\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Le montant doit être d'au moins 0,50 €.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-\r\n-    let validDevisLines = true;\r\n-\r\n-    cpState.devis.forEach((dl, index) => {\r\n-      cpState.devis[index].qte.error = false;\r\n-      if (!parseInt(dl.qte.value) || parseInt(dl.qte.value) <= 0) {\r\n-        cpState.devis[index].qte.error = true;\r\n-        validDevisLines = false;\r\n-      }\r\n-      cpState.devis[index].unityPrice.error = false;\r\n-      if (!parseFloat(dl.unityPrice.value)) {\r\n-        cpState.devis[index].unityPrice.error = true;\r\n-        validDevisLines = false;\r\n-      }\r\n-      cpState.devis[index].description.error = false;\r\n-      if (!dl.description.value) {\r\n-        cpState.devis[index].description.error = true;\r\n-        validDevisLines = false;\r\n-      }\r\n-    });\r\n-    setState(cpState);\r\n-\r\n-    if (!validDevisLines) {\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Champs obligatoire.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-    const data = {\r\n-      validationDate: state.valideUntil.value,\r\n-      extraNote: state.note.value,\r\n-      title: state.title.value,\r\n-      devisLines: state.devis.map((dl) => {\r\n-        const obj = {\r\n-          id: null,\r\n-          qte: dl.qte.value,\r\n-          unityPrice: parseFloat(dl.unityPrice.value),\r\n-          reduction: parseFloat(dl.reduction.value),\r\n-          tva: parseFloat(dl.tva.value),\r\n-          description: dl.description.value,\r\n-        };\r\n-        if (dl.id) {\r\n-          obj.id = `/api/devis_lines/${dl.id}`;\r\n-        }\r\n-        return obj;\r\n-      }),\r\n-    };\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        url: `${endPoints.DEVIS}/${devis.id}`,\r\n-        data: data,\r\n-        method: \"PUT\",\r\n-        success: (response) => {\r\n-          setIsPending(false);\r\n-          setDevis({ ...response.data });\r\n-          if (callback) callback();\r\n-\r\n-          setMessage({\r\n-            type: \"success\",\r\n-            text: \"Devis enregisté\",\r\n-          });\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-          setIsPending(false);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const setStatusEnAttente = () => {\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        url: `${endPoints.DEVIS}/send/${devis.id}`,\r\n-        method: \"PUT\",\r\n-        success: (response) => {\r\n-          setDevis({ ...response.data });\r\n-          setMessage({\r\n-            type: \"success\",\r\n-            text: \"Devis envoyé\",\r\n-          });\r\n-          setIsPending(false);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-          const msg = getMsgError(err);\r\n-          if (msg === \"errorPayRepairman\") {\r\n-            setDataModalError({\r\n-              type: \"modal-save\",\r\n-              title: \"Impossible de régler votre prestation\",\r\n-              description:\r\n-                \"Oops. Il y a un soucis avec votre compte bancaire. Avant d'envoyer votre devis, veuillez contacter l'administrateur du site afin de vérifier vos informations bancaires.\",\r\n-            });\r\n-            setShowModalError(true);\r\n-          } else {\r\n-            NotificationManager.error(msg, \"\");\r\n-          }\r\n-          setIsPending(false);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const newDevis = () => {\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        url: `${endPoints.DEVIS}/${devis.id}/new`,\r\n-        method: \"PUT\",\r\n-        success: (response) => {\r\n-          setMessage({ type: \"success\", text: \"New Devis\" });\r\n-          history.push(`${ROUTES.REPA_CREATE_DEVIS.url}/${response.data.id}`);\r\n-          setIsPending(false);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-          setIsPending(false);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n-\r\n-  if (!devis) return <Loader />;\r\n-\r\n-  const closeSide = () => {\r\n-    setOpenSide(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <AdminBase>\r\n-      <BlocAdminContent>\r\n-        <DashboardContent\r\n-          titlePage={`Devis #${devis.id}`}\r\n-          backlinkUrl={ROUTES.DEVIS.url}\r\n-          backlinkText=\"< Retour à la liste des Devis\"\r\n-        >\r\n-          <Form onSubmit={onSubmit}>\r\n-            {message.text ? (\r\n-              <span\r\n-                className={\r\n-                  message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n-                }\r\n-              >\r\n-                {message.text}\r\n-              </span>\r\n-            ) : null}\r\n-\r\n-            <InlineInputStyle>\r\n-              <div className=\"input-full\">\r\n-                <Input\r\n-                  {...state.title}\r\n-                  onChange={(e) => {\r\n-                    const cpState = { ...state };\r\n-                    cpState.title.value = e.target.value;\r\n-                    setState(cpState);\r\n-                  }}\r\n-                />\r\n-              </div>\r\n-            </InlineInputStyle>\r\n-\r\n-            <InlineInputStyle>\r\n-              <DatePickerInput\r\n-                {...state.valideUntil}\r\n-                minDate={new Date()}\r\n-                onChange={(date) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.valideUntil.value = date;\r\n-                  setState(cpState);\r\n-                }}\r\n-              />\r\n-            </InlineInputStyle>\r\n-\r\n-            <TitlePage>Lignes du devis</TitlePage>\r\n-\r\n-            <SimpleTable\r\n-              columns={[\r\n-                { key: \"quantity\", text: \"Quantité\" },\r\n-                { key: \"description\", text: \"Description\" },\r\n-                { key: \"ht\", text: \"Prix unitaire HT\" },\r\n-                { key: \"reduction\", text: \"Réduction %\" },\r\n-                { key: \"tva\", text: \"TVA %\" },\r\n-                { key: \"total_ht\", text: \"Total HT\" },\r\n-                { key: \"ttc\", text: \"TTC\" },\r\n-                { key: \"actions\", text: \"\" },\r\n-              ]}\r\n-              data={state.devis}\r\n-              rowRender={rowRender}\r\n-            />\r\n-\r\n-            <div className=\"d-sm-flex align-items-center justify-content-between mb-sm-3 mb-5\">\r\n-              <div>\r\n-                {devis.status === 0 && (\r\n-                  <ButtonDef\r\n-                    spinner={isPending}\r\n-                    type=\"button\"\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      const cpState = { ...state };\r\n-                      cpState.devis.push({ ...devisLine });\r\n-                      setState(cpState);\r\n-                    }}\r\n-                    textButton={\r\n-                      <>\r\n-                        <AddGreenIcon /> Nouvelle ligne\r\n-                      </>\r\n-                    }\r\n-                    className=\"btn-add m-r\"\r\n-                  />\r\n-                )}\r\n-              </div>\r\n-              <BlocInfo>\r\n-                <h3 className=\"warning-style w-lg text-right\">\r\n-                  Total HT :{\" \"}\r\n-                  {ifNegatifReturn0(\r\n-                    state.devis\r\n-                      .map(\r\n-                        (dl) =>\r\n-                          calcDevisLine(\r\n-                            dl.qte.value,\r\n-                            dl.unityPrice.value,\r\n-                            dl.reduction.value,\r\n-                            dl.tva.value\r\n-                          ).priceTotalHt\r\n-                      )\r\n-                      .reduce((a, b) => a + b, 0)\r\n-                  ).toFixed(2)}\r\n-                  €\r\n-                </h3>\r\n-                <h4 className=\"w-lg text-right\">\r\n-                  Montant TVA{\" \"}\r\n-                  {ifNegatifReturn0(\r\n-                    state.devis\r\n-                      .map(\r\n-                        (dl) =>\r\n-                          calcDevisLine(\r\n-                            dl.qte.value,\r\n-                            dl.unityPrice.value,\r\n-                            dl.reduction.value,\r\n-                            dl.tva.value\r\n-                          ).amountTva\r\n-                      )\r\n-                      .reduce((a, b) => a + b, 0)\r\n-                  ).toFixed(2)}\r\n-                  €\r\n-                </h4>\r\n-                <h4 className=\"success-style w-lg text-right\">\r\n-                  Montant TTC : {totalTTC.toFixed(2)}€\r\n-                </h4>\r\n-              </BlocInfo>\r\n-            </div>\r\n-\r\n-            <TitlePage>Notes additionnelles</TitlePage>\r\n-            <Input\r\n-              {...state.note}\r\n-              onChange={(e) => {\r\n-                const cpState = { ...state };\r\n-                cpState.note.value = e.target.value;\r\n-                setState(cpState);\r\n-              }}\r\n-            />\r\n-\r\n-            <div className=\"d-flex justify-content-center mb-5 flex-column flex-sm-row\">\r\n-              <ButtonDef\r\n-                spinner={isPending}\r\n-                type=\"button\"\r\n-                textButton=\"Télécharger En pdf\"\r\n-                className=\"m-1\"\r\n-                onClick={(e) => {\r\n-                  if (devis.status === 0)\r\n-                    onSubmit(e, () => {\r\n-                      setIsPending(true);\r\n-                      downloadFile(\r\n-                        `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n-                        `Devis#${devis.id}.pdf`,\r\n-                        setIsPending\r\n-                      );\r\n-                    });\r\n-                  else {\r\n-                    e.preventDefault();\r\n-                    setIsPending(true);\r\n-                    downloadFile(\r\n-                      `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n-                      `Devis#${devis.id}.pdf`,\r\n-                      setIsPending\r\n-                    );\r\n-                  }\r\n-                }}\r\n-              />\r\n-              {devis.status === 0 && (\r\n-                <>\r\n-                  <ButtonDef\r\n-                    spinner={isPending}\r\n-                    type=\"button\"\r\n-                    textButton=\"Enregistrer\"\r\n-                    className=\"m-1\"\r\n-                    onClick={(e) => {\r\n-                      onSubmit(e);\r\n-                    }}\r\n-                  />\r\n-                  <ButtonDef\r\n-                    spinner={isPending}\r\n-                    type=\"button\"\r\n-                    textButton=\"Envoyer le devis\"\r\n-                    className=\"m-1\"\r\n-                    onClick={(e) => {\r\n-                      if (devis.status === 0) onSubmit(e, setStatusEnAttente);\r\n-                      else {\r\n-                        e.preventDefault();\r\n-                        setStatusEnAttente();\r\n-                      }\r\n-                    }}\r\n-                  />\r\n-                </>\r\n-              )}\r\n-              {devis.status === 3 && devis.newDevis && !devis.isCommand && (\r\n-                <ButtonDef\r\n-                  spinner={isPending}\r\n-                  type=\"button\"\r\n-                  textButton=\"Nouveau devis\"\r\n-                  className=\"m-1\"\r\n-                  onClick={(e) => {\r\n-                    e.preventDefault();\r\n-                    newDevis();\r\n-                  }}\r\n-                />\r\n-              )}\r\n-            </div>\r\n-          </Form>\r\n-        </DashboardContent>\r\n-        {!isMobile\r\n-          ? openSide && (\r\n-              <DashboardSide className=\"devis-side\">\r\n-                {isMobile && (\r\n-                  <>\r\n-                    <CloseButton\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        closeSide();\r\n-                      }}\r\n-                    />\r\n-                  </>\r\n-                )}\r\n-                <DevisSideDetail>\r\n-                  <DsdHeader\r\n-                    title={`Devis #${devis.id}`}\r\n-                    statusType={devis.status}\r\n-                  />\r\n-\r\n-                  <DsdContent>\r\n-                    <h2 className=\"content-title\">\r\n-                      {devis.benefit.service.name}\r\n-                    </h2>\r\n-\r\n-                    <BlocInfo>\r\n-                      <h3>\r\n-                        {`${devis.client.firstName} ${devis.client.lastName}`}\r\n-                      </h3>\r\n-                      <span>\r\n-                        Devis demandé le{\" \"}\r\n-                        {moment(devis.createdAt).format(\"DD/MM/YYYY\")}\r\n-                      </span>\r\n-                    </BlocInfo>\r\n-\r\n-                    <BlocInfo>\r\n-                      <h4 className=\"success-style\">\r\n-                        Mode de délivrance souhaité :\r\n-                      </h4>\r\n-                      <p>{devis.deliveryMode.deliveryModeType.name}</p>\r\n-                    </BlocInfo>\r\n-\r\n-                    {devis.deliveryMode.deliveryModeType\r\n-                      .requireDeliveryAddress && (\r\n-                      <BlocInfo>\r\n-                        <h4 className=\"success-style\">\r\n-                          Adresse de livraison :\r\n-                        </h4>\r\n-                        <p>\r\n-                          {devis.address}, {devis.additionalAddress},{\" \"}\r\n-                          {devis.postalCode}, {devis.city}\r\n-                        </p>\r\n-                      </BlocInfo>\r\n-                    )}\r\n-                    <BlocInfo withBorder>\r\n-                      {!!devis?.title?.length && (\r\n-                        <h4 className=\"warning-style w-lg\">\r\n-                          Titre du devis : {devis.title}\r\n-                        </h4>\r\n-                      )}\r\n-                      {devis.dateSend ? (\r\n-                        <p>\r\n-                          Emis le: {moment(devis.dateSend).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.validationDate ? (\r\n-                        <p>\r\n-                          Valide jusqu’au:{\" \"}\r\n-                          {moment(devis.validationDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.acceptanceDate &&\r\n-                      devis.status != 3 &&\r\n-                      devis.status != 4 ? (\r\n-                        <p>\r\n-                          Accepté le :{\" \"}\r\n-                          {moment(devis.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.rejectionDate ? (\r\n-                        <p>\r\n-                          Refusé le:{\" \"}\r\n-                          {moment(devis.rejectionDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.cancellationDate ? (\r\n-                        <p>\r\n-                          Annulé le:{\" \"}\r\n-                          {moment(devis.cancellationDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                    </BlocInfo>\r\n-                    {!!devis.total && !!devis.benefit.priceQuote && (\r\n-                      <BlocInfo>\r\n-                        <h4 className=\"success-style\">Prix du devis : </h4>\r\n-                        <p>\r\n-                          {devis.benefit.priceQuote?.toFixed(2)} € TTC\r\n-                          {devis.paiements.filter(\r\n-                            (pay) => pay.object === \"charge\"\r\n-                          ).length\r\n-                            ? \"(réglé)\"\r\n-                            : \"\"}\r\n-                        </p>\r\n-                      </BlocInfo>\r\n-                    )}\r\n-                    {devis.description ? (\r\n-                      <BlocInfo>\r\n-                        <h3 className=\"warning-style\">Description :</h3>\r\n-                        <div className=\"desc-devis\">{devis.description}</div>\r\n-                      </BlocInfo>\r\n-                    ) : null}\r\n-\r\n-                    {devis.files.length ? (\r\n-                      <>\r\n-                        <BlocImages\r\n-                          title=\"Photos\"\r\n-                          data={dataGallery}\r\n-                          onClick={openLightbox}\r\n-                        />\r\n-                        <ModalGateway>\r\n-                          {stateImage ? (\r\n-                            <Modal onClose={closeLightbox}>\r\n-                              <Carousel\r\n-                                currentIndex={currentImage}\r\n-                                views={dataGallery}\r\n-                              />\r\n-                            </Modal>\r\n-                          ) : null}\r\n-                        </ModalGateway>\r\n-                      </>\r\n-                    ) : null}\r\n-                  </DsdContent>\r\n-                </DevisSideDetail>\r\n-\r\n-                <PopinModal\r\n-                  show={showModalError}\r\n-                  handleClose={() => {\r\n-                    setShowModalError(false);\r\n-                  }}\r\n-                  title={dataModalError.title}\r\n-                >\r\n-                  <p>{dataModalError.description}</p>\r\n-                  <div className=\"btns-confirm\">\r\n-                    <ButtonDef\r\n-                      textButton=\"Contacter\"\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        history.push(`${ROUTES.CONTACT.url}`);\r\n-                      }}\r\n-                    />\r\n-                  </div>\r\n-                </PopinModal>\r\n-              </DashboardSide>\r\n-            )\r\n-          : null}\r\n-      </BlocAdminContent>\r\n-    </AdminBase>\r\n-  );\r\n-});\r\n"
                },
                {
                    "date": 1719572449498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n       </div>\r\n       <div className=\"table-cell\">\r\n         <Input\r\n           {...row.reduction}\r\n-          label={isMobile ? \"Réduction %\" : \"\"}\r\n+          label={isMobile ? \"Total Bonus(€)\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n               !e.target.value ||\r\n"
                },
                {
                    "date": 1719572470068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,9 +269,9 @@\n       </div>\r\n       <div className=\"table-cell\">\r\n         <Input\r\n           {...row.reduction}\r\n-          label={isMobile ? \"Total Bonus(€)\" : \"\"}\r\n+          label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n               !e.target.value ||\r\n"
                },
                {
                    "date": 1719572565122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n       </div>\r\n       <div className=\"table-cell\">\r\n         <Input\r\n           {...row.unityPrice}\r\n-          label={isMobile ? \"Prix unitaire HT\" : \"\"}\r\n+          label={isMobile ? \"P.U. TTC\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n               !e.target.value ||\r\n@@ -583,9 +583,9 @@\n             <SimpleTable\r\n               columns={[\r\n                 { key: \"quantity\", text: \"Quantité\" },\r\n                 { key: \"description\", text: \"Description\" },\r\n-                { key: \"ht\", text: \"Prix unitaire HT\" },\r\n+                { key: \"ht\", text: \"P.U. TTC\" },\r\n                 { key: \"reduction\", text: \"Total Bonus(€)\" },\r\n                 { key: \"tva\", text: \"TVA %\" },\r\n                 { key: \"total_ht\", text: \"Total HT\" },\r\n                 { key: \"ttc\", text: \"TTC\" },\r\n"
                },
                {
                    "date": 1719574906646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,12 +71,10 @@\n     reduction: {\r\n       type: \"text\",\r\n       name: \"reduction\",\r\n       value: 0,\r\n-      min: 0,\r\n-      max: 100,\r\n-      empty: true,\r\n-      isNumber: true,\r\n+      \r\n+       \r\n     },\r\n     tva: {\r\n       type: \"text\",\r\n       name: \"tva\",\r\n"
                },
                {
                    "date": 1719575076767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,10 @@\n     },\r\n     reduction: {\r\n       type: \"text\",\r\n       name: \"reduction\",\r\n-      value: 0,\r\n-      \r\n+      value: -10,\r\n+      empty: true,  \r\n        \r\n     },\r\n     tva: {\r\n       type: \"text\",\r\n"
                },
                {
                    "date": 1719575113204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     },\r\n     reduction: {\r\n       type: \"text\",\r\n       name: \"reduction\",\r\n-      value: -10,\r\n+      value: - 15,\r\n       empty: true,  \r\n        \r\n     },\r\n     tva: {\r\n"
                },
                {
                    "date": 1719575129981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     },\r\n     reduction: {\r\n       type: \"text\",\r\n       name: \"reduction\",\r\n-      value: - 15,\r\n+      value: -0,\r\n       empty: true,  \r\n        \r\n     },\r\n     tva: {\r\n"
                },
                {
                    "date": 1719576571828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     },\r\n     reduction: {\r\n       type: \"text\",\r\n       name: \"reduction\",\r\n-      value: -0,\r\n+      value: -15,\r\n       empty: true,  \r\n        \r\n     },\r\n     tva: {\r\n@@ -267,14 +267,14 @@\n       </div>\r\n       <div className=\"table-cell\">\r\n         <Input\r\n           {...row.reduction}\r\n-          label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n+          label={isMobile ? \"Total dBonus (€)\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n               !e.target.value ||\r\n-              parseFloat(e.target.value) <= 100\r\n+              parseFloat(e.target.value) <= 9999\r\n             ) {\r\n               if (cpState.devis[index])\r\n               cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n             }\r\n"
                },
                {
                    "date": 1719576583686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,14 +267,14 @@\n       </div>\r\n       <div className=\"table-cell\">\r\n         <Input\r\n           {...row.reduction}\r\n-          label={isMobile ? \"Total dBonus (€)\" : \"\"}\r\n+          label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n               !e.target.value ||\r\n-              parseFloat(e.target.value) <= 9999\r\n+              parseFloat(e.target.value) <= 100\r\n             ) {\r\n               if (cpState.devis[index])\r\n               cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n             }\r\n"
                },
                {
                    "date": 1719821625188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,8 +576,9 @@\n               />\r\n             </InlineInputStyle>\r\n \r\n             <TitlePage>Lignes du devis</TitlePage>\r\n+            <div style=\"width: 644px; height: 82px; color: #444444; font-size: 14px; font-family: Poppins; font-weight: 500; word-wrap: break-word\">Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.</div>\r\n \r\n             <SimpleTable\r\n               columns={[\r\n                 { key: \"quantity\", text: \"Quantité\" },\r\n"
                },
                {
                    "date": 1719821736160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,9 +576,9 @@\n               />\r\n             </InlineInputStyle>\r\n \r\n             <TitlePage>Lignes du devis</TitlePage>\r\n-            <div style=\"width: 644px; height: 82px; color: #444444; font-size: 14px; font-family: Poppins; font-weight: 500; word-wrap: break-word\">Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.</div>\r\n+            \r\n \r\n             <SimpleTable\r\n               columns={[\r\n                 { key: \"quantity\", text: \"Quantité\" },\r\n"
                },
                {
                    "date": 1719821898982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,9 +576,12 @@\n               />\r\n             </InlineInputStyle>\r\n \r\n             <TitlePage>Lignes du devis</TitlePage>\r\n-            \r\n+            <Row style={{width: 644, height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n+             fontWeight: 500, wordWrap: 'break-word'}}>\r\n+              Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.\r\n+              </Row>\r\n \r\n             <SimpleTable\r\n               columns={[\r\n                 { key: \"quantity\", text: \"Quantité\" },\r\n"
                },
                {
                    "date": 1719821914441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,12 +576,12 @@\n               />\r\n             </InlineInputStyle>\r\n \r\n             <TitlePage>Lignes du devis</TitlePage>\r\n-            <Row style={{width: 644, height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n+            <div style={{width: 644, height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n              fontWeight: 500, wordWrap: 'break-word'}}>\r\n               Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.\r\n-              </Row>\r\n+              </div>\r\n \r\n             <SimpleTable\r\n               columns={[\r\n                 { key: \"quantity\", text: \"Quantité\" },\r\n"
                },
                {
                    "date": 1719821930292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -576,9 +576,9 @@\n               />\r\n             </InlineInputStyle>\r\n \r\n             <TitlePage>Lignes du devis</TitlePage>\r\n-            <div style={{width: 644, height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n+            <div style={{ height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n              fontWeight: 500, wordWrap: 'break-word'}}>\r\n               Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.\r\n               </div>\r\n \r\n"
                },
                {
                    "date": 1719990404934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,897 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import { Form } from \"react-bootstrap\";\r\n+import { useHistory, withRouter } from \"react-router-dom\";\r\n+import moment from \"moment\";\r\n+import Carousel, { Modal, ModalGateway } from \"react-images\";\r\n+import AdminBase from \"../../../theme/back/adminBase\";\r\n+import DashboardContent from \"../../../components/dashboardContent\";\r\n+import DashboardSide from \"../../../components/dashboardSide\";\r\n+import Input from \"../../../components/ui-elements/input\";\r\n+import DatePickerInput from \"../../../components/ui-elements/datePickerInput\";\r\n+import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n+import { ButtonDef } from \"../../../components/ui\";\r\n+import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n+import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n+import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n+import BlocImages from \"../../../components/devis/blocks/blocImages\";\r\n+import SimpleTable from \"../../../components/devis/simpleTable\";\r\n+import Loader from \"../../../components/loader\";\r\n+import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n+import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n+import { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import { IconRemove } from \"../../../assets/styles/icons\";\r\n+import { TitlePage } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import { InlineInputStyle } from \"../../../assets/styles/devisStyles\";\r\n+import { AddGreenIcon } from \"../../../assets/styles/icons\";\r\n+import connector from \"../../../connector\";\r\n+import endPoints from \"../../../config/endPoints\";\r\n+import ROUTES from \"../../../config/routes\";\r\n+import {\r\n+  calcDevisLine,\r\n+  downloadFile,\r\n+  getFloat,\r\n+  getMsgError,\r\n+  getPathImage,\r\n+} from \"../../../helper/functions\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+\r\n+export default withRouter(function CreateDevis({ match }) {\r\n+  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n+  const history = useHistory();\r\n+  const [openSide, setOpenSide] = useState(true);\r\n+  const [message, setMessage] = useState({ text: null, type: \"error\" });\r\n+  const [devis, setDevis] = useState(false);\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const devisLine = {\r\n+    qte: {\r\n+      type: \"text\",\r\n+      name: \"qte\",\r\n+      value: 1,\r\n+      min: 1,\r\n+      empty: true,\r\n+      step: 1,\r\n+      className: \"qte-devis\",\r\n+      isNumber: true,\r\n+    },\r\n+    description: {\r\n+      type: \"text\",\r\n+      name: \"description\",\r\n+      value: \"\",\r\n+    },\r\n+    unityPrice: {\r\n+      type: \"number\",\r\n+      name: \"unityPrice\",\r\n+      value: 0,\r\n+      max: 9999,\r\n+      empty: true,\r\n+      isNumber: true,\r\n+      classInput: \"input-num\"\r\n+    },\r\n+    reduction: {\r\n+      type: \"text\",\r\n+      name: \"reduction\",\r\n+      value: -15,\r\n+      empty: true,  \r\n+       \r\n+    },\r\n+    tva: {\r\n+      type: \"text\",\r\n+      name: \"tva\",\r\n+      value: 0,\r\n+      min: 0,\r\n+      max: 100,\r\n+      empty: true,\r\n+      className: \"tva-devis\",\r\n+      isNumber: true,\r\n+    },\r\n+  };\r\n+  const [totalTTC, setTotalTTC] = useState(0);\r\n+  const [state, setState] = useState({\r\n+    title: {\r\n+      label: \"Titre: \",\r\n+      name: \"title\",\r\n+      placeholder: \"Titre\",\r\n+      value: \"Remplacement carte mère\",\r\n+      type: \"text\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: true,\r\n+    },\r\n+    valideUntil: {\r\n+      label: \"Valide jusqu'au : \",\r\n+      name: \"valideUntil\",\r\n+      value: null,\r\n+    },\r\n+    note: {\r\n+      name: \"note\",\r\n+      placeholder: \"Note ...\",\r\n+      value: \"\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: false,\r\n+      as: \"textarea\",\r\n+    },\r\n+    devis: [{ ...devisLine }],\r\n+  });\r\n+\r\n+  const [currentImage, setCurrentImage] = useState(0);\r\n+  const [stateImage, setStateImage] = useState(false);\r\n+  const [dataGallery, setDataGallery] = useState([]);\r\n+  const openLightbox = (photo, index) => {\r\n+    setCurrentImage(index);\r\n+    setStateImage(true);\r\n+  };\r\n+  const closeLightbox = () => {\r\n+    setStateImage(false);\r\n+  };\r\n+  const [showModalError, setShowModalError] = useState(false);\r\n+  const [dataModalError, setDataModalError] = useState({\r\n+    title: \"\",\r\n+    type: \"\",\r\n+    description: \"\",\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    if (match.params.id) {\r\n+      connector({\r\n+        url: `${endPoints.COMMANDS}/${match.params.id}`,\r\n+        success: (response) => {\r\n+          const obj = response.data;\r\n+          setDevis({ ...obj });\r\n+          if (obj?.files && obj.files.length) {\r\n+            let dataGallery = [];\r\n+            for (let i = 0; i < obj.files.length; i++) {\r\n+              dataGallery.push({\r\n+                source: getPathImage(obj.files[i]),\r\n+              });\r\n+            }\r\n+            setDataGallery(dataGallery);\r\n+          }\r\n+        },\r\n+        catch: (err) => console.log(err),\r\n+      });\r\n+    }\r\n+  }, [match.params.id]);\r\n+\r\n+  useEffect(() => {\r\n+    if (devis) {\r\n+      const cpState = { ...state };\r\n+      let disabled = devis.status !== 0;\r\n+      cpState.valideUntil.disabled =\r\n+        cpState.note.disabled =\r\n+        cpState.title.disabled =\r\n+          disabled;\r\n+      cpState.valideUntil.value = devis.validationDate\r\n+        ? new Date(devis.validationDate)\r\n+        : null;\r\n+      cpState.title.value = devis.title ?? devis.benefit.service.name;\r\n+      cpState.note.value = devis.extraNote;\r\n+      cpState.devis = devis.devisLines.length\r\n+        ? devis.devisLines.map((dl) => ({\r\n+            qte: {\r\n+              ...devisLine.qte,\r\n+              value: parseInt(dl.qte),\r\n+              disabled: disabled,\r\n+            },\r\n+            description: {\r\n+              ...devisLine.description,\r\n+              value: dl.description,\r\n+              disabled: disabled,\r\n+            },\r\n+            unityPrice: {\r\n+              ...devisLine.unityPrice,\r\n+              value: parseFloat(dl.unityPrice),\r\n+              disabled: disabled,\r\n+            },\r\n+            reduction: {\r\n+              ...devisLine.reduction,\r\n+              value: parseFloat(dl.reduction),\r\n+              disabled: disabled,\r\n+            },\r\n+            tva: {\r\n+              ...devisLine.tva,\r\n+              value: parseFloat(dl.tva),\r\n+              disabled: disabled,\r\n+            },\r\n+            id: dl.id,\r\n+          }))\r\n+        : [{ ...devisLine }];\r\n+      setState(cpState);\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [devis]);\r\n+\r\n+  useEffect(() => {\r\n+    setTotalTTC(\r\n+      ifNegatifReturn0(\r\n+        state.devis\r\n+          .map(\r\n+            (dl) =>\r\n+              calcDevisLine(\r\n+                dl.qte.value,\r\n+                dl.unityPrice.value,\r\n+                dl.reduction.value,\r\n+                dl.tva.value\r\n+              ).priceTotalTtc\r\n+          )\r\n+          .reduce((a, b) => a + b, 0)\r\n+      )\r\n+    );\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [state]);\r\n+\r\n+  const rowRender = (row, index) => (\r\n+    <div className=\"table-row\" key={`row-${index}`}>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.qte}\r\n+          label={isMobile ? \"Quantité\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (cpState.devis[index])\r\n+              cpState.devis[index].qte.value = parseInt(e.target.value);\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\" style={{ width: \"350px\" }}>\r\n+        <Input\r\n+          {...row.description}\r\n+          label={isMobile ? \"Description\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (cpState.devis[index])\r\n+              cpState.devis[index].description.value = e.target.value;\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.unityPrice}\r\n+          label={isMobile ? \"P.U. TTC\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) <= 9999\r\n+            ) {\r\n+              if (cpState.devis[index]) {\r\n+                cpState.devis[index].unityPrice.value = getFloat(e.target.value);\r\n+              }\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.reduction}\r\n+          label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) \r\n+            ) {\r\n+              if (cpState.devis[index])\r\n+              cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <Input\r\n+          {...row.tva}\r\n+          label={isMobile ? \"TVA %\" : \"\"}\r\n+          onChange={(e) => {\r\n+            const cpState = { ...state };\r\n+            if (\r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) <= 100\r\n+            ) {\r\n+              if (cpState.devis[index]) {\r\n+                cpState.devis[index].tva.value = getFloat(e.target.value);\r\n+              }\r\n+            }\r\n+            setState(cpState);\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <div className=\"m-full\">\r\n+          {isMobile && <span>Total HT:</span>}\r\n+          <span>\r\n+            {calcDevisLine(\r\n+              state.devis[index].qte.value,\r\n+              state.devis[index].unityPrice.value,\r\n+              state.devis[index].reduction.value,\r\n+              state.devis[index].tva.value\r\n+            ).priceTotalHt.toFixed(2)}\r\n+            €\r\n+          </span>\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        <div className=\"m-full\">\r\n+          {isMobile && <span>TTC:</span>}\r\n+          <span>\r\n+            {(\r\n+              calcDevisLine(\r\n+                state.devis[index].qte.value,\r\n+                state.devis[index].unityPrice.value,\r\n+                state.devis[index].reduction.value,\r\n+                state.devis[index].tva.value\r\n+              ).priceTotalTtc ?? 0\r\n+            ).toFixed(2)}\r\n+            €\r\n+          </span>\r\n+        </div>\r\n+      </div>\r\n+      <div className=\"table-cell\">\r\n+        {devis.status === 0 && (\r\n+          <>\r\n+            {!isMobile ? (\r\n+              <IconRemove\r\n+                onClick={() => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.devis = state.devis.filter(\r\n+                    (dl, $in) => index !== $in\r\n+                  );\r\n+                  setState(cpState);\r\n+                }}\r\n+              />\r\n+            ) : (\r\n+              <ButtonDef\r\n+                spinner={isPending}\r\n+                type=\"button\"\r\n+                textButton=\"Supprimer\"\r\n+                className=\"warning-style w-full\"\r\n+                onClick={(e) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.devis = state.devis.filter(\r\n+                    (dl, $in) => index !== $in\r\n+                  );\r\n+                  setState(cpState);\r\n+                }}\r\n+              />\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+\r\n+  const onSubmit = (e, callback = false) => {\r\n+    e.preventDefault();\r\n+    setMessage({ ...message, text: null });\r\n+    const cpState = { ...state };\r\n+    cpState.valideUntil.error = false;\r\n+    setState(cpState);\r\n+    if (!state.valideUntil.value) {\r\n+      cpState.valideUntil.error = true;\r\n+      setState(cpState);\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Champs obligatoire.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+    cpState.title.error = false;\r\n+    if (!state.title.value.length) {\r\n+      cpState.title.error = true;\r\n+      setState(cpState);\r\n+      return;\r\n+    }\r\n+    if (!state.devis.length) {\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Devis dois avoir 1 ligne au minimum.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+    if (totalTTC <= 0.5) {\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Le montant doit être d'au moins 0,50 €.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+\r\n+    let validDevisLines = true;\r\n+\r\n+    cpState.devis.forEach((dl, index) => {\r\n+      cpState.devis[index].qte.error = false;\r\n+      if (!parseInt(dl.qte.value) || parseInt(dl.qte.value) <= 0) {\r\n+        cpState.devis[index].qte.error = true;\r\n+        validDevisLines = false;\r\n+      }\r\n+      cpState.devis[index].unityPrice.error = false;\r\n+      if (!parseFloat(dl.unityPrice.value)) {\r\n+        cpState.devis[index].unityPrice.error = true;\r\n+        validDevisLines = false;\r\n+      }\r\n+      cpState.devis[index].description.error = false;\r\n+      if (!dl.description.value) {\r\n+        cpState.devis[index].description.error = true;\r\n+        validDevisLines = false;\r\n+      }\r\n+    });\r\n+    setState(cpState);\r\n+\r\n+    if (!validDevisLines) {\r\n+      setMessage({\r\n+        type: \"error\",\r\n+        text: \"Champs obligatoire.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+    const data = {\r\n+      validationDate: state.valideUntil.value,\r\n+      extraNote: state.note.value,\r\n+      title: state.title.value,\r\n+      devisLines: state.devis.map((dl) => {\r\n+        const obj = {\r\n+          id: null,\r\n+          qte: dl.qte.value,\r\n+          unityPrice: parseFloat(dl.unityPrice.value),\r\n+          reduction: parseFloat(dl.reduction.value),\r\n+          tva: parseFloat(dl.tva.value),\r\n+          description: dl.description.value,\r\n+        };\r\n+        if (dl.id) {\r\n+          obj.id = `/api/devis_lines/${dl.id}`;\r\n+        }\r\n+        return obj;\r\n+      }),\r\n+    };\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        url: `${endPoints.DEVIS}/${devis.id}`,\r\n+        data: data,\r\n+        method: \"PUT\",\r\n+        success: (response) => {\r\n+          setIsPending(false);\r\n+          setDevis({ ...response.data });\r\n+          if (callback) callback();\r\n+\r\n+          setMessage({\r\n+            type: \"success\",\r\n+            text: \"Devis enregisté\",\r\n+          });\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+          setIsPending(false);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const setStatusEnAttente = () => {\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        url: `${endPoints.DEVIS}/send/${devis.id}`,\r\n+        method: \"PUT\",\r\n+        success: (response) => {\r\n+          setDevis({ ...response.data });\r\n+          setMessage({\r\n+            type: \"success\",\r\n+            text: \"Devis envoyé\",\r\n+          });\r\n+          setIsPending(false);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+          const msg = getMsgError(err);\r\n+          if (msg === \"errorPayRepairman\") {\r\n+            setDataModalError({\r\n+              type: \"modal-save\",\r\n+              title: \"Impossible de régler votre prestation\",\r\n+              description:\r\n+                \"Oops. Il y a un soucis avec votre compte bancaire. Avant d'envoyer votre devis, veuillez contacter l'administrateur du site afin de vérifier vos informations bancaires.\",\r\n+            });\r\n+            setShowModalError(true);\r\n+          } else {\r\n+            NotificationManager.error(msg, \"\");\r\n+          }\r\n+          setIsPending(false);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const newDevis = () => {\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        url: `${endPoints.DEVIS}/${devis.id}/new`,\r\n+        method: \"PUT\",\r\n+        success: (response) => {\r\n+          setMessage({ type: \"success\", text: \"New Devis\" });\r\n+          history.push(`${ROUTES.REPA_CREATE_DEVIS.url}/${response.data.id}`);\r\n+          setIsPending(false);\r\n+        },\r\n+        catch: (err) => {\r\n+          console.log(err);\r\n+          setIsPending(false);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n+\r\n+  if (!devis) return <Loader />;\r\n+\r\n+  const closeSide = () => {\r\n+    setOpenSide(false);\r\n+  };\r\n+\r\n+  return (\r\n+    <AdminBase>\r\n+      <BlocAdminContent>\r\n+        <DashboardContent\r\n+          titlePage={`Devis #${devis.id}`}\r\n+          backlinkUrl={ROUTES.DEVIS.url}\r\n+          backlinkText=\"< Retour à la liste des Devis\"\r\n+        >\r\n+          <Form onSubmit={onSubmit}>\r\n+            {message.text ? (\r\n+              <span\r\n+                className={\r\n+                  message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n+                }\r\n+              >\r\n+                {message.text}\r\n+              </span>\r\n+            ) : null}\r\n+\r\n+            <InlineInputStyle>\r\n+              <div className=\"input-full\">\r\n+                <Input\r\n+                  {...state.title}\r\n+                  onChange={(e) => {\r\n+                    const cpState = { ...state };\r\n+                    cpState.title.value = e.target.value;\r\n+                    setState(cpState);\r\n+                  }}\r\n+                />\r\n+              </div>\r\n+            </InlineInputStyle>\r\n+\r\n+            <InlineInputStyle>\r\n+              <DatePickerInput\r\n+                {...state.valideUntil}\r\n+                minDate={new Date()}\r\n+                onChange={(date) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.valideUntil.value = date;\r\n+                  setState(cpState);\r\n+                }}\r\n+              />\r\n+            </InlineInputStyle>\r\n+\r\n+            <TitlePage>Lignes du devis</TitlePage>\r\n+            <div style={{ height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n+             fontWeight: 500, wordWrap: 'break-word'}}>\r\n+              Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.\r\n+              </div>\r\n+\r\n+            <SimpleTable\r\n+              columns={[\r\n+                { key: \"quantity\", text: \"Quantité\" },\r\n+                { key: \"description\", text: \"Description\" },\r\n+                { key: \"ht\", text: \"P.U. TTC\" },\r\n+                { key: \"reduction\", text: \"Total Bonus(€)\" },\r\n+                { key: \"tva\", text: \"TVA %\" },\r\n+                { key: \"total_ht\", text: \"Total HT\" },\r\n+                { key: \"ttc\", text: \"TTC\" },\r\n+                { key: \"actions\", text: \"\" },\r\n+              ]}\r\n+              data={state.devis}\r\n+              rowRender={rowRender}\r\n+            />\r\n+\r\n+            <div className=\"d-sm-flex align-items-center justify-content-between mb-sm-3 mb-5\">\r\n+              <div>\r\n+                {devis.status === 0 && (\r\n+                  <ButtonDef\r\n+                    spinner={isPending}\r\n+                    type=\"button\"\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      const cpState = { ...state };\r\n+                      cpState.devis.push({ ...devisLine });\r\n+                      setState(cpState);\r\n+                    }}\r\n+                    textButton={\r\n+                      <>\r\n+                        <AddGreenIcon /> Nouvelle ligne\r\n+                      </>\r\n+                    }\r\n+                    className=\"btn-add m-r\"\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+              <BlocInfo>\r\n+                <h3 className=\"warning-style w-lg text-right\">\r\n+                  Total HT :{\" \"}\r\n+                  {ifNegatifReturn0(\r\n+                    state.devis\r\n+                      .map(\r\n+                        (dl) =>\r\n+                          calcDevisLine(\r\n+                            dl.qte.value,\r\n+                            dl.unityPrice.value,\r\n+                            dl.reduction.value,\r\n+                            dl.tva.value\r\n+                          ).priceTotalHt\r\n+                      )\r\n+                      .reduce((a, b) => a + b, 0)\r\n+                  ).toFixed(2)}\r\n+                  €\r\n+                </h3>\r\n+                <h4 className=\"w-lg text-right\">\r\n+                  Montant TVA{\" \"}\r\n+                  {ifNegatifReturn0(\r\n+                    state.devis\r\n+                      .map(\r\n+                        (dl) =>\r\n+                          calcDevisLine(\r\n+                            dl.qte.value,\r\n+                            dl.unityPrice.value,\r\n+                            dl.reduction.value,\r\n+                            dl.tva.value\r\n+                          ).amountTva\r\n+                      )\r\n+                      .reduce((a, b) => a + b, 0)\r\n+                  ).toFixed(2)}\r\n+                  €\r\n+                </h4>\r\n+                <h4 className=\"success-style w-lg text-right\">\r\n+                  Montant TTC : {totalTTC.toFixed(2)}€\r\n+                </h4>\r\n+              </BlocInfo>\r\n+            </div>\r\n+\r\n+            <TitlePage>Notes additionnelles</TitlePage>\r\n+            <Input\r\n+              {...state.note}\r\n+              onChange={(e) => {\r\n+                const cpState = { ...state };\r\n+                cpState.note.value = e.target.value;\r\n+                setState(cpState);\r\n+              }}\r\n+            />\r\n+\r\n+            <div className=\"d-flex justify-content-center mb-5 flex-column flex-sm-row\">\r\n+              <ButtonDef\r\n+                spinner={isPending}\r\n+                type=\"button\"\r\n+                textButton=\"Télécharger En pdf\"\r\n+                className=\"m-1\"\r\n+                onClick={(e) => {\r\n+                  if (devis.status === 0)\r\n+                    onSubmit(e, () => {\r\n+                      setIsPending(true);\r\n+                      downloadFile(\r\n+                        `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n+                        `Devis#${devis.id}.pdf`,\r\n+                        setIsPending\r\n+                      );\r\n+                    });\r\n+                  else {\r\n+                    e.preventDefault();\r\n+                    setIsPending(true);\r\n+                    downloadFile(\r\n+                      `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n+                      `Devis#${devis.id}.pdf`,\r\n+                      setIsPending\r\n+                    );\r\n+                  }\r\n+                }}\r\n+              />\r\n+              {devis.status === 0 && (\r\n+                <>\r\n+                  <ButtonDef\r\n+                    spinner={isPending}\r\n+                    type=\"button\"\r\n+                    textButton=\"Enregistrer\"\r\n+                    className=\"m-1\"\r\n+                    onClick={(e) => {\r\n+                      onSubmit(e);\r\n+                    }}\r\n+                  />\r\n+                  <ButtonDef\r\n+                    spinner={isPending}\r\n+                    type=\"button\"\r\n+                    textButton=\"Envoyer le devis\"\r\n+                    className=\"m-1\"\r\n+                    onClick={(e) => {\r\n+                      if (devis.status === 0) onSubmit(e, setStatusEnAttente);\r\n+                      else {\r\n+                        e.preventDefault();\r\n+                        setStatusEnAttente();\r\n+                      }\r\n+                    }}\r\n+                  />\r\n+                </>\r\n+              )}\r\n+              {devis.status === 3 && devis.newDevis && !devis.isCommand && (\r\n+                <ButtonDef\r\n+                  spinner={isPending}\r\n+                  type=\"button\"\r\n+                  textButton=\"Nouveau devis\"\r\n+                  className=\"m-1\"\r\n+                  onClick={(e) => {\r\n+                    e.preventDefault();\r\n+                    newDevis();\r\n+                  }}\r\n+                />\r\n+              )}\r\n+            </div>\r\n+          </Form>\r\n+        </DashboardContent>\r\n+        {!isMobile\r\n+          ? openSide && (\r\n+              <DashboardSide className=\"devis-side\">\r\n+                {isMobile && (\r\n+                  <>\r\n+                    <CloseButton\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        closeSide();\r\n+                      }}\r\n+                    />\r\n+                  </>\r\n+                )}\r\n+                <DevisSideDetail>\r\n+                  <DsdHeader\r\n+                    title={`Devis #${devis.id}`}\r\n+                    statusType={devis.status}\r\n+                  />\r\n+\r\n+                  <DsdContent>\r\n+                    <h2 className=\"content-title\">\r\n+                      {devis.benefit.service.name}\r\n+                    </h2>\r\n+\r\n+                    <BlocInfo>\r\n+                      <h3>\r\n+                        {`${devis.client.firstName} ${devis.client.lastName}`}\r\n+                      </h3>\r\n+                      <span>\r\n+                        Devis demandé le{\" \"}\r\n+                        {moment(devis.createdAt).format(\"DD/MM/YYYY\")}\r\n+                      </span>\r\n+                    </BlocInfo>\r\n+\r\n+                    <BlocInfo>\r\n+                      <h4 className=\"success-style\">\r\n+                        Mode de délivrance souhaité :\r\n+                      </h4>\r\n+                      <p>{devis.deliveryMode.deliveryModeType.name}</p>\r\n+                    </BlocInfo>\r\n+\r\n+                    {devis.deliveryMode.deliveryModeType\r\n+                      .requireDeliveryAddress && (\r\n+                      <BlocInfo>\r\n+                        <h4 className=\"success-style\">\r\n+                          Adresse de livraison :\r\n+                        </h4>\r\n+                        <p>\r\n+                          {devis.address}, {devis.additionalAddress},{\" \"}\r\n+                          {devis.postalCode}, {devis.city}\r\n+                        </p>\r\n+                      </BlocInfo>\r\n+                    )}\r\n+                    <BlocInfo withBorder>\r\n+                      {!!devis?.title?.length && (\r\n+                        <h4 className=\"warning-style w-lg\">\r\n+                          Titre du devis : {devis.title}\r\n+                        </h4>\r\n+                      )}\r\n+                      {devis.dateSend ? (\r\n+                        <p>\r\n+                          Emis le: {moment(devis.dateSend).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.validationDate ? (\r\n+                        <p>\r\n+                          Valide jusqu’au:{\" \"}\r\n+                          {moment(devis.validationDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.acceptanceDate &&\r\n+                      devis.status != 3 &&\r\n+                      devis.status != 4 ? (\r\n+                        <p>\r\n+                          Accepté le :{\" \"}\r\n+                          {moment(devis.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.rejectionDate ? (\r\n+                        <p>\r\n+                          Refusé le:{\" \"}\r\n+                          {moment(devis.rejectionDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                      {devis.cancellationDate ? (\r\n+                        <p>\r\n+                          Annulé le:{\" \"}\r\n+                          {moment(devis.cancellationDate).format(\"DD/MM/YYYY\")}\r\n+                        </p>\r\n+                      ) : null}\r\n+                    </BlocInfo>\r\n+                    {!!devis.total && !!devis.benefit.priceQuote && (\r\n+                      <BlocInfo>\r\n+                        <h4 className=\"success-style\">Prix du devis : </h4>\r\n+                        <p>\r\n+                          {devis.benefit.priceQuote?.toFixed(2)} € TTC\r\n+                          {devis.paiements.filter(\r\n+                            (pay) => pay.object === \"charge\"\r\n+                          ).length\r\n+                            ? \"(réglé)\"\r\n+                            : \"\"}\r\n+                        </p>\r\n+                      </BlocInfo>\r\n+                    )}\r\n+                    {devis.description ? (\r\n+                      <BlocInfo>\r\n+                        <h3 className=\"warning-style\">Description :</h3>\r\n+                        <div className=\"desc-devis\">{devis.description}</div>\r\n+                      </BlocInfo>\r\n+                    ) : null}\r\n+\r\n+                    {devis.files.length ? (\r\n+                      <>\r\n+                        <BlocImages\r\n+                          title=\"Photos\"\r\n+                          data={dataGallery}\r\n+                          onClick={openLightbox}\r\n+                        />\r\n+                        <ModalGateway>\r\n+                          {stateImage ? (\r\n+                            <Modal onClose={closeLightbox}>\r\n+                              <Carousel\r\n+                                currentIndex={currentImage}\r\n+                                views={dataGallery}\r\n+                              />\r\n+                            </Modal>\r\n+                          ) : null}\r\n+                        </ModalGateway>\r\n+                      </>\r\n+                    ) : null}\r\n+                  </DsdContent>\r\n+                </DevisSideDetail>\r\n+\r\n+                <PopinModal\r\n+                  show={showModalError}\r\n+                  handleClose={() => {\r\n+                    setShowModalError(false);\r\n+                  }}\r\n+                  title={dataModalError.title}\r\n+                >\r\n+                  <p>{dataModalError.description}</p>\r\n+                  <div className=\"btns-confirm\">\r\n+                    <ButtonDef\r\n+                      textButton=\"Contacter\"\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        history.push(`${ROUTES.CONTACT.url}`);\r\n+                      }}\r\n+                    />\r\n+                  </div>\r\n+                </PopinModal>\r\n+              </DashboardSide>\r\n+            )\r\n+          : null}\r\n+      </BlocAdminContent>\r\n+    </AdminBase>\r\n+  );\r\n+});\r\n"
                },
                {
                    "date": 1719990446636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,10 +271,9 @@\n           label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) \r\n+              !e.target.value \r\n             ) {\r\n               if (cpState.devis[index])\r\n               cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n             }\r\n@@ -894,901 +893,4 @@\n       </BlocAdminContent>\r\n     </AdminBase>\r\n   );\r\n });\r\n-import React, { useState, useEffect } from \"react\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import { Form } from \"react-bootstrap\";\r\n-import { useHistory, withRouter } from \"react-router-dom\";\r\n-import moment from \"moment\";\r\n-import Carousel, { Modal, ModalGateway } from \"react-images\";\r\n-import AdminBase from \"../../../theme/back/adminBase\";\r\n-import DashboardContent from \"../../../components/dashboardContent\";\r\n-import DashboardSide from \"../../../components/dashboardSide\";\r\n-import Input from \"../../../components/ui-elements/input\";\r\n-import DatePickerInput from \"../../../components/ui-elements/datePickerInput\";\r\n-import DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\n-import { ButtonDef } from \"../../../components/ui\";\r\n-import DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\n-import DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\n-import BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\n-import BlocImages from \"../../../components/devis/blocks/blocImages\";\r\n-import SimpleTable from \"../../../components/devis/simpleTable\";\r\n-import Loader from \"../../../components/loader\";\r\n-import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n-import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n-import { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import { IconRemove } from \"../../../assets/styles/icons\";\r\n-import { TitlePage } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import { InlineInputStyle } from \"../../../assets/styles/devisStyles\";\r\n-import { AddGreenIcon } from \"../../../assets/styles/icons\";\r\n-import connector from \"../../../connector\";\r\n-import endPoints from \"../../../config/endPoints\";\r\n-import ROUTES from \"../../../config/routes\";\r\n-import {\r\n-  calcDevisLine,\r\n-  downloadFile,\r\n-  getFloat,\r\n-  getMsgError,\r\n-  getPathImage,\r\n-} from \"../../../helper/functions\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-\r\n-export default withRouter(function CreateDevis({ match }) {\r\n-  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const history = useHistory();\r\n-  const [openSide, setOpenSide] = useState(true);\r\n-  const [message, setMessage] = useState({ text: null, type: \"error\" });\r\n-  const [devis, setDevis] = useState(false);\r\n-  const [isPending, setIsPending] = useState(false);\r\n-  const devisLine = {\r\n-    qte: {\r\n-      type: \"text\",\r\n-      name: \"qte\",\r\n-      value: 1,\r\n-      min: 1,\r\n-      empty: true,\r\n-      step: 1,\r\n-      className: \"qte-devis\",\r\n-      isNumber: true,\r\n-    },\r\n-    description: {\r\n-      type: \"text\",\r\n-      name: \"description\",\r\n-      value: \"\",\r\n-    },\r\n-    unityPrice: {\r\n-      type: \"number\",\r\n-      name: \"unityPrice\",\r\n-      value: 0,\r\n-      max: 9999,\r\n-      empty: true,\r\n-      isNumber: true,\r\n-      classInput: \"input-num\"\r\n-    },\r\n-    reduction: {\r\n-      type: \"text\",\r\n-      name: \"reduction\",\r\n-      value: -15,\r\n-      empty: true,  \r\n-       \r\n-    },\r\n-    tva: {\r\n-      type: \"text\",\r\n-      name: \"tva\",\r\n-      value: 0,\r\n-      min: 0,\r\n-      max: 100,\r\n-      empty: true,\r\n-      className: \"tva-devis\",\r\n-      isNumber: true,\r\n-    },\r\n-  };\r\n-  const [totalTTC, setTotalTTC] = useState(0);\r\n-  const [state, setState] = useState({\r\n-    title: {\r\n-      label: \"Titre: \",\r\n-      name: \"title\",\r\n-      placeholder: \"Titre\",\r\n-      value: \"Remplacement carte mère\",\r\n-      type: \"text\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: true,\r\n-    },\r\n-    valideUntil: {\r\n-      label: \"Valide jusqu'au : \",\r\n-      name: \"valideUntil\",\r\n-      value: null,\r\n-    },\r\n-    note: {\r\n-      name: \"note\",\r\n-      placeholder: \"Note ...\",\r\n-      value: \"\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: false,\r\n-      as: \"textarea\",\r\n-    },\r\n-    devis: [{ ...devisLine }],\r\n-  });\r\n-\r\n-  const [currentImage, setCurrentImage] = useState(0);\r\n-  const [stateImage, setStateImage] = useState(false);\r\n-  const [dataGallery, setDataGallery] = useState([]);\r\n-  const openLightbox = (photo, index) => {\r\n-    setCurrentImage(index);\r\n-    setStateImage(true);\r\n-  };\r\n-  const closeLightbox = () => {\r\n-    setStateImage(false);\r\n-  };\r\n-  const [showModalError, setShowModalError] = useState(false);\r\n-  const [dataModalError, setDataModalError] = useState({\r\n-    title: \"\",\r\n-    type: \"\",\r\n-    description: \"\",\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    if (match.params.id) {\r\n-      connector({\r\n-        url: `${endPoints.COMMANDS}/${match.params.id}`,\r\n-        success: (response) => {\r\n-          const obj = response.data;\r\n-          setDevis({ ...obj });\r\n-          if (obj?.files && obj.files.length) {\r\n-            let dataGallery = [];\r\n-            for (let i = 0; i < obj.files.length; i++) {\r\n-              dataGallery.push({\r\n-                source: getPathImage(obj.files[i]),\r\n-              });\r\n-            }\r\n-            setDataGallery(dataGallery);\r\n-          }\r\n-        },\r\n-        catch: (err) => console.log(err),\r\n-      });\r\n-    }\r\n-  }, [match.params.id]);\r\n-\r\n-  useEffect(() => {\r\n-    if (devis) {\r\n-      const cpState = { ...state };\r\n-      let disabled = devis.status !== 0;\r\n-      cpState.valideUntil.disabled =\r\n-        cpState.note.disabled =\r\n-        cpState.title.disabled =\r\n-          disabled;\r\n-      cpState.valideUntil.value = devis.validationDate\r\n-        ? new Date(devis.validationDate)\r\n-        : null;\r\n-      cpState.title.value = devis.title ?? devis.benefit.service.name;\r\n-      cpState.note.value = devis.extraNote;\r\n-      cpState.devis = devis.devisLines.length\r\n-        ? devis.devisLines.map((dl) => ({\r\n-            qte: {\r\n-              ...devisLine.qte,\r\n-              value: parseInt(dl.qte),\r\n-              disabled: disabled,\r\n-            },\r\n-            description: {\r\n-              ...devisLine.description,\r\n-              value: dl.description,\r\n-              disabled: disabled,\r\n-            },\r\n-            unityPrice: {\r\n-              ...devisLine.unityPrice,\r\n-              value: parseFloat(dl.unityPrice),\r\n-              disabled: disabled,\r\n-            },\r\n-            reduction: {\r\n-              ...devisLine.reduction,\r\n-              value: parseFloat(dl.reduction),\r\n-              disabled: disabled,\r\n-            },\r\n-            tva: {\r\n-              ...devisLine.tva,\r\n-              value: parseFloat(dl.tva),\r\n-              disabled: disabled,\r\n-            },\r\n-            id: dl.id,\r\n-          }))\r\n-        : [{ ...devisLine }];\r\n-      setState(cpState);\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [devis]);\r\n-\r\n-  useEffect(() => {\r\n-    setTotalTTC(\r\n-      ifNegatifReturn0(\r\n-        state.devis\r\n-          .map(\r\n-            (dl) =>\r\n-              calcDevisLine(\r\n-                dl.qte.value,\r\n-                dl.unityPrice.value,\r\n-                dl.reduction.value,\r\n-                dl.tva.value\r\n-              ).priceTotalTtc\r\n-          )\r\n-          .reduce((a, b) => a + b, 0)\r\n-      )\r\n-    );\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [state]);\r\n-\r\n-  const rowRender = (row, index) => (\r\n-    <div className=\"table-row\" key={`row-${index}`}>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.qte}\r\n-          label={isMobile ? \"Quantité\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (cpState.devis[index])\r\n-              cpState.devis[index].qte.value = parseInt(e.target.value);\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\" style={{ width: \"350px\" }}>\r\n-        <Input\r\n-          {...row.description}\r\n-          label={isMobile ? \"Description\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (cpState.devis[index])\r\n-              cpState.devis[index].description.value = e.target.value;\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.unityPrice}\r\n-          label={isMobile ? \"P.U. TTC\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 9999\r\n-            ) {\r\n-              if (cpState.devis[index]) {\r\n-                cpState.devis[index].unityPrice.value = getFloat(e.target.value);\r\n-              }\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.reduction}\r\n-          label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 100\r\n-            ) {\r\n-              if (cpState.devis[index])\r\n-              cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <Input\r\n-          {...row.tva}\r\n-          label={isMobile ? \"TVA %\" : \"\"}\r\n-          onChange={(e) => {\r\n-            const cpState = { ...state };\r\n-            if (\r\n-              !e.target.value ||\r\n-              parseFloat(e.target.value) <= 100\r\n-            ) {\r\n-              if (cpState.devis[index]) {\r\n-                cpState.devis[index].tva.value = getFloat(e.target.value);\r\n-              }\r\n-            }\r\n-            setState(cpState);\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <div className=\"m-full\">\r\n-          {isMobile && <span>Total HT:</span>}\r\n-          <span>\r\n-            {calcDevisLine(\r\n-              state.devis[index].qte.value,\r\n-              state.devis[index].unityPrice.value,\r\n-              state.devis[index].reduction.value,\r\n-              state.devis[index].tva.value\r\n-            ).priceTotalHt.toFixed(2)}\r\n-            €\r\n-          </span>\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        <div className=\"m-full\">\r\n-          {isMobile && <span>TTC:</span>}\r\n-          <span>\r\n-            {(\r\n-              calcDevisLine(\r\n-                state.devis[index].qte.value,\r\n-                state.devis[index].unityPrice.value,\r\n-                state.devis[index].reduction.value,\r\n-                state.devis[index].tva.value\r\n-              ).priceTotalTtc ?? 0\r\n-            ).toFixed(2)}\r\n-            €\r\n-          </span>\r\n-        </div>\r\n-      </div>\r\n-      <div className=\"table-cell\">\r\n-        {devis.status === 0 && (\r\n-          <>\r\n-            {!isMobile ? (\r\n-              <IconRemove\r\n-                onClick={() => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.devis = state.devis.filter(\r\n-                    (dl, $in) => index !== $in\r\n-                  );\r\n-                  setState(cpState);\r\n-                }}\r\n-              />\r\n-            ) : (\r\n-              <ButtonDef\r\n-                spinner={isPending}\r\n-                type=\"button\"\r\n-                textButton=\"Supprimer\"\r\n-                className=\"warning-style w-full\"\r\n-                onClick={(e) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.devis = state.devis.filter(\r\n-                    (dl, $in) => index !== $in\r\n-                  );\r\n-                  setState(cpState);\r\n-                }}\r\n-              />\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-\r\n-  const onSubmit = (e, callback = false) => {\r\n-    e.preventDefault();\r\n-    setMessage({ ...message, text: null });\r\n-    const cpState = { ...state };\r\n-    cpState.valideUntil.error = false;\r\n-    setState(cpState);\r\n-    if (!state.valideUntil.value) {\r\n-      cpState.valideUntil.error = true;\r\n-      setState(cpState);\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Champs obligatoire.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-    cpState.title.error = false;\r\n-    if (!state.title.value.length) {\r\n-      cpState.title.error = true;\r\n-      setState(cpState);\r\n-      return;\r\n-    }\r\n-    if (!state.devis.length) {\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Devis dois avoir 1 ligne au minimum.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-    if (totalTTC <= 0.5) {\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Le montant doit être d'au moins 0,50 €.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-\r\n-    let validDevisLines = true;\r\n-\r\n-    cpState.devis.forEach((dl, index) => {\r\n-      cpState.devis[index].qte.error = false;\r\n-      if (!parseInt(dl.qte.value) || parseInt(dl.qte.value) <= 0) {\r\n-        cpState.devis[index].qte.error = true;\r\n-        validDevisLines = false;\r\n-      }\r\n-      cpState.devis[index].unityPrice.error = false;\r\n-      if (!parseFloat(dl.unityPrice.value)) {\r\n-        cpState.devis[index].unityPrice.error = true;\r\n-        validDevisLines = false;\r\n-      }\r\n-      cpState.devis[index].description.error = false;\r\n-      if (!dl.description.value) {\r\n-        cpState.devis[index].description.error = true;\r\n-        validDevisLines = false;\r\n-      }\r\n-    });\r\n-    setState(cpState);\r\n-\r\n-    if (!validDevisLines) {\r\n-      setMessage({\r\n-        type: \"error\",\r\n-        text: \"Champs obligatoire.\",\r\n-      });\r\n-      return;\r\n-    }\r\n-    const data = {\r\n-      validationDate: state.valideUntil.value,\r\n-      extraNote: state.note.value,\r\n-      title: state.title.value,\r\n-      devisLines: state.devis.map((dl) => {\r\n-        const obj = {\r\n-          id: null,\r\n-          qte: dl.qte.value,\r\n-          unityPrice: parseFloat(dl.unityPrice.value),\r\n-          reduction: parseFloat(dl.reduction.value),\r\n-          tva: parseFloat(dl.tva.value),\r\n-          description: dl.description.value,\r\n-        };\r\n-        if (dl.id) {\r\n-          obj.id = `/api/devis_lines/${dl.id}`;\r\n-        }\r\n-        return obj;\r\n-      }),\r\n-    };\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        url: `${endPoints.DEVIS}/${devis.id}`,\r\n-        data: data,\r\n-        method: \"PUT\",\r\n-        success: (response) => {\r\n-          setIsPending(false);\r\n-          setDevis({ ...response.data });\r\n-          if (callback) callback();\r\n-\r\n-          setMessage({\r\n-            type: \"success\",\r\n-            text: \"Devis enregisté\",\r\n-          });\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-          setIsPending(false);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const setStatusEnAttente = () => {\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        url: `${endPoints.DEVIS}/send/${devis.id}`,\r\n-        method: \"PUT\",\r\n-        success: (response) => {\r\n-          setDevis({ ...response.data });\r\n-          setMessage({\r\n-            type: \"success\",\r\n-            text: \"Devis envoyé\",\r\n-          });\r\n-          setIsPending(false);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-          const msg = getMsgError(err);\r\n-          if (msg === \"errorPayRepairman\") {\r\n-            setDataModalError({\r\n-              type: \"modal-save\",\r\n-              title: \"Impossible de régler votre prestation\",\r\n-              description:\r\n-                \"Oops. Il y a un soucis avec votre compte bancaire. Avant d'envoyer votre devis, veuillez contacter l'administrateur du site afin de vérifier vos informations bancaires.\",\r\n-            });\r\n-            setShowModalError(true);\r\n-          } else {\r\n-            NotificationManager.error(msg, \"\");\r\n-          }\r\n-          setIsPending(false);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const newDevis = () => {\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        url: `${endPoints.DEVIS}/${devis.id}/new`,\r\n-        method: \"PUT\",\r\n-        success: (response) => {\r\n-          setMessage({ type: \"success\", text: \"New Devis\" });\r\n-          history.push(`${ROUTES.REPA_CREATE_DEVIS.url}/${response.data.id}`);\r\n-          setIsPending(false);\r\n-        },\r\n-        catch: (err) => {\r\n-          console.log(err);\r\n-          setIsPending(false);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n-\r\n-  if (!devis) return <Loader />;\r\n-\r\n-  const closeSide = () => {\r\n-    setOpenSide(false);\r\n-  };\r\n-\r\n-  return (\r\n-    <AdminBase>\r\n-      <BlocAdminContent>\r\n-        <DashboardContent\r\n-          titlePage={`Devis #${devis.id}`}\r\n-          backlinkUrl={ROUTES.DEVIS.url}\r\n-          backlinkText=\"< Retour à la liste des Devis\"\r\n-        >\r\n-          <Form onSubmit={onSubmit}>\r\n-            {message.text ? (\r\n-              <span\r\n-                className={\r\n-                  message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n-                }\r\n-              >\r\n-                {message.text}\r\n-              </span>\r\n-            ) : null}\r\n-\r\n-            <InlineInputStyle>\r\n-              <div className=\"input-full\">\r\n-                <Input\r\n-                  {...state.title}\r\n-                  onChange={(e) => {\r\n-                    const cpState = { ...state };\r\n-                    cpState.title.value = e.target.value;\r\n-                    setState(cpState);\r\n-                  }}\r\n-                />\r\n-              </div>\r\n-            </InlineInputStyle>\r\n-\r\n-            <InlineInputStyle>\r\n-              <DatePickerInput\r\n-                {...state.valideUntil}\r\n-                minDate={new Date()}\r\n-                onChange={(date) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.valideUntil.value = date;\r\n-                  setState(cpState);\r\n-                }}\r\n-              />\r\n-            </InlineInputStyle>\r\n-\r\n-            <TitlePage>Lignes du devis</TitlePage>\r\n-            <div style={{ height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n-             fontWeight: 500, wordWrap: 'break-word'}}>\r\n-              Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.\r\n-              </div>\r\n-\r\n-            <SimpleTable\r\n-              columns={[\r\n-                { key: \"quantity\", text: \"Quantité\" },\r\n-                { key: \"description\", text: \"Description\" },\r\n-                { key: \"ht\", text: \"P.U. TTC\" },\r\n-                { key: \"reduction\", text: \"Total Bonus(€)\" },\r\n-                { key: \"tva\", text: \"TVA %\" },\r\n-                { key: \"total_ht\", text: \"Total HT\" },\r\n-                { key: \"ttc\", text: \"TTC\" },\r\n-                { key: \"actions\", text: \"\" },\r\n-              ]}\r\n-              data={state.devis}\r\n-              rowRender={rowRender}\r\n-            />\r\n-\r\n-            <div className=\"d-sm-flex align-items-center justify-content-between mb-sm-3 mb-5\">\r\n-              <div>\r\n-                {devis.status === 0 && (\r\n-                  <ButtonDef\r\n-                    spinner={isPending}\r\n-                    type=\"button\"\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      const cpState = { ...state };\r\n-                      cpState.devis.push({ ...devisLine });\r\n-                      setState(cpState);\r\n-                    }}\r\n-                    textButton={\r\n-                      <>\r\n-                        <AddGreenIcon /> Nouvelle ligne\r\n-                      </>\r\n-                    }\r\n-                    className=\"btn-add m-r\"\r\n-                  />\r\n-                )}\r\n-              </div>\r\n-              <BlocInfo>\r\n-                <h3 className=\"warning-style w-lg text-right\">\r\n-                  Total HT :{\" \"}\r\n-                  {ifNegatifReturn0(\r\n-                    state.devis\r\n-                      .map(\r\n-                        (dl) =>\r\n-                          calcDevisLine(\r\n-                            dl.qte.value,\r\n-                            dl.unityPrice.value,\r\n-                            dl.reduction.value,\r\n-                            dl.tva.value\r\n-                          ).priceTotalHt\r\n-                      )\r\n-                      .reduce((a, b) => a + b, 0)\r\n-                  ).toFixed(2)}\r\n-                  €\r\n-                </h3>\r\n-                <h4 className=\"w-lg text-right\">\r\n-                  Montant TVA{\" \"}\r\n-                  {ifNegatifReturn0(\r\n-                    state.devis\r\n-                      .map(\r\n-                        (dl) =>\r\n-                          calcDevisLine(\r\n-                            dl.qte.value,\r\n-                            dl.unityPrice.value,\r\n-                            dl.reduction.value,\r\n-                            dl.tva.value\r\n-                          ).amountTva\r\n-                      )\r\n-                      .reduce((a, b) => a + b, 0)\r\n-                  ).toFixed(2)}\r\n-                  €\r\n-                </h4>\r\n-                <h4 className=\"success-style w-lg text-right\">\r\n-                  Montant TTC : {totalTTC.toFixed(2)}€\r\n-                </h4>\r\n-              </BlocInfo>\r\n-            </div>\r\n-\r\n-            <TitlePage>Notes additionnelles</TitlePage>\r\n-            <Input\r\n-              {...state.note}\r\n-              onChange={(e) => {\r\n-                const cpState = { ...state };\r\n-                cpState.note.value = e.target.value;\r\n-                setState(cpState);\r\n-              }}\r\n-            />\r\n-\r\n-            <div className=\"d-flex justify-content-center mb-5 flex-column flex-sm-row\">\r\n-              <ButtonDef\r\n-                spinner={isPending}\r\n-                type=\"button\"\r\n-                textButton=\"Télécharger En pdf\"\r\n-                className=\"m-1\"\r\n-                onClick={(e) => {\r\n-                  if (devis.status === 0)\r\n-                    onSubmit(e, () => {\r\n-                      setIsPending(true);\r\n-                      downloadFile(\r\n-                        `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n-                        `Devis#${devis.id}.pdf`,\r\n-                        setIsPending\r\n-                      );\r\n-                    });\r\n-                  else {\r\n-                    e.preventDefault();\r\n-                    setIsPending(true);\r\n-                    downloadFile(\r\n-                      `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n-                      `Devis#${devis.id}.pdf`,\r\n-                      setIsPending\r\n-                    );\r\n-                  }\r\n-                }}\r\n-              />\r\n-              {devis.status === 0 && (\r\n-                <>\r\n-                  <ButtonDef\r\n-                    spinner={isPending}\r\n-                    type=\"button\"\r\n-                    textButton=\"Enregistrer\"\r\n-                    className=\"m-1\"\r\n-                    onClick={(e) => {\r\n-                      onSubmit(e);\r\n-                    }}\r\n-                  />\r\n-                  <ButtonDef\r\n-                    spinner={isPending}\r\n-                    type=\"button\"\r\n-                    textButton=\"Envoyer le devis\"\r\n-                    className=\"m-1\"\r\n-                    onClick={(e) => {\r\n-                      if (devis.status === 0) onSubmit(e, setStatusEnAttente);\r\n-                      else {\r\n-                        e.preventDefault();\r\n-                        setStatusEnAttente();\r\n-                      }\r\n-                    }}\r\n-                  />\r\n-                </>\r\n-              )}\r\n-              {devis.status === 3 && devis.newDevis && !devis.isCommand && (\r\n-                <ButtonDef\r\n-                  spinner={isPending}\r\n-                  type=\"button\"\r\n-                  textButton=\"Nouveau devis\"\r\n-                  className=\"m-1\"\r\n-                  onClick={(e) => {\r\n-                    e.preventDefault();\r\n-                    newDevis();\r\n-                  }}\r\n-                />\r\n-              )}\r\n-            </div>\r\n-          </Form>\r\n-        </DashboardContent>\r\n-        {!isMobile\r\n-          ? openSide && (\r\n-              <DashboardSide className=\"devis-side\">\r\n-                {isMobile && (\r\n-                  <>\r\n-                    <CloseButton\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        closeSide();\r\n-                      }}\r\n-                    />\r\n-                  </>\r\n-                )}\r\n-                <DevisSideDetail>\r\n-                  <DsdHeader\r\n-                    title={`Devis #${devis.id}`}\r\n-                    statusType={devis.status}\r\n-                  />\r\n-\r\n-                  <DsdContent>\r\n-                    <h2 className=\"content-title\">\r\n-                      {devis.benefit.service.name}\r\n-                    </h2>\r\n-\r\n-                    <BlocInfo>\r\n-                      <h3>\r\n-                        {`${devis.client.firstName} ${devis.client.lastName}`}\r\n-                      </h3>\r\n-                      <span>\r\n-                        Devis demandé le{\" \"}\r\n-                        {moment(devis.createdAt).format(\"DD/MM/YYYY\")}\r\n-                      </span>\r\n-                    </BlocInfo>\r\n-\r\n-                    <BlocInfo>\r\n-                      <h4 className=\"success-style\">\r\n-                        Mode de délivrance souhaité :\r\n-                      </h4>\r\n-                      <p>{devis.deliveryMode.deliveryModeType.name}</p>\r\n-                    </BlocInfo>\r\n-\r\n-                    {devis.deliveryMode.deliveryModeType\r\n-                      .requireDeliveryAddress && (\r\n-                      <BlocInfo>\r\n-                        <h4 className=\"success-style\">\r\n-                          Adresse de livraison :\r\n-                        </h4>\r\n-                        <p>\r\n-                          {devis.address}, {devis.additionalAddress},{\" \"}\r\n-                          {devis.postalCode}, {devis.city}\r\n-                        </p>\r\n-                      </BlocInfo>\r\n-                    )}\r\n-                    <BlocInfo withBorder>\r\n-                      {!!devis?.title?.length && (\r\n-                        <h4 className=\"warning-style w-lg\">\r\n-                          Titre du devis : {devis.title}\r\n-                        </h4>\r\n-                      )}\r\n-                      {devis.dateSend ? (\r\n-                        <p>\r\n-                          Emis le: {moment(devis.dateSend).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.validationDate ? (\r\n-                        <p>\r\n-                          Valide jusqu’au:{\" \"}\r\n-                          {moment(devis.validationDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.acceptanceDate &&\r\n-                      devis.status != 3 &&\r\n-                      devis.status != 4 ? (\r\n-                        <p>\r\n-                          Accepté le :{\" \"}\r\n-                          {moment(devis.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.rejectionDate ? (\r\n-                        <p>\r\n-                          Refusé le:{\" \"}\r\n-                          {moment(devis.rejectionDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                      {devis.cancellationDate ? (\r\n-                        <p>\r\n-                          Annulé le:{\" \"}\r\n-                          {moment(devis.cancellationDate).format(\"DD/MM/YYYY\")}\r\n-                        </p>\r\n-                      ) : null}\r\n-                    </BlocInfo>\r\n-                    {!!devis.total && !!devis.benefit.priceQuote && (\r\n-                      <BlocInfo>\r\n-                        <h4 className=\"success-style\">Prix du devis : </h4>\r\n-                        <p>\r\n-                          {devis.benefit.priceQuote?.toFixed(2)} € TTC\r\n-                          {devis.paiements.filter(\r\n-                            (pay) => pay.object === \"charge\"\r\n-                          ).length\r\n-                            ? \"(réglé)\"\r\n-                            : \"\"}\r\n-                        </p>\r\n-                      </BlocInfo>\r\n-                    )}\r\n-                    {devis.description ? (\r\n-                      <BlocInfo>\r\n-                        <h3 className=\"warning-style\">Description :</h3>\r\n-                        <div className=\"desc-devis\">{devis.description}</div>\r\n-                      </BlocInfo>\r\n-                    ) : null}\r\n-\r\n-                    {devis.files.length ? (\r\n-                      <>\r\n-                        <BlocImages\r\n-                          title=\"Photos\"\r\n-                          data={dataGallery}\r\n-                          onClick={openLightbox}\r\n-                        />\r\n-                        <ModalGateway>\r\n-                          {stateImage ? (\r\n-                            <Modal onClose={closeLightbox}>\r\n-                              <Carousel\r\n-                                currentIndex={currentImage}\r\n-                                views={dataGallery}\r\n-                              />\r\n-                            </Modal>\r\n-                          ) : null}\r\n-                        </ModalGateway>\r\n-                      </>\r\n-                    ) : null}\r\n-                  </DsdContent>\r\n-                </DevisSideDetail>\r\n-\r\n-                <PopinModal\r\n-                  show={showModalError}\r\n-                  handleClose={() => {\r\n-                    setShowModalError(false);\r\n-                  }}\r\n-                  title={dataModalError.title}\r\n-                >\r\n-                  <p>{dataModalError.description}</p>\r\n-                  <div className=\"btns-confirm\">\r\n-                    <ButtonDef\r\n-                      textButton=\"Contacter\"\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        history.push(`${ROUTES.CONTACT.url}`);\r\n-                      }}\r\n-                    />\r\n-                  </div>\r\n-                </PopinModal>\r\n-              </DashboardSide>\r\n-            )\r\n-          : null}\r\n-      </BlocAdminContent>\r\n-    </AdminBase>\r\n-  );\r\n-});\r\n"
                },
                {
                    "date": 1719990468724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,9 +271,10 @@\n           label={isMobile ? \"Total Bonus (€)\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n-              !e.target.value \r\n+              !e.target.value ||\r\n+              parseFloat(e.target.value) \r\n             ) {\r\n               if (cpState.devis[index])\r\n               cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n             }\r\n"
                },
                {
                    "date": 1719990610359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,12 @@\n     },\r\n     reduction: {\r\n       type: \"text\",\r\n       name: \"reduction\",\r\n-      value: -15,\r\n+      value: 0,\r\n       empty: true,  \r\n+        isNumber: true,\r\n+      classInput: \"input-num\"\r\n        \r\n     },\r\n     tva: {\r\n       type: \"text\",\r\n"
                },
                {
                    "date": 1719990707472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,13 +68,13 @@\n       isNumber: true,\r\n       classInput: \"input-num\"\r\n     },\r\n     reduction: {\r\n-      type: \"text\",\r\n+      type: \"number\",\r\n       name: \"reduction\",\r\n       value: 0,\r\n       empty: true,  \r\n-        isNumber: true,\r\n+      isNumber: true,\r\n       classInput: \"input-num\"\r\n        \r\n     },\r\n     tva: {\r\n"
                },
                {
                    "date": 1719996255585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,9 @@\n \r\n             <TitlePage>Lignes du devis</TitlePage>\r\n             <div style={{ height: 82, color: '#444444', fontSize:14, fontFamily: 'Poppins',\r\n              fontWeight: 500, wordWrap: 'break-word'}}>\r\n-              Saisir le montant des bonus réparation en négatif et saisir la somme des bonus lorsque la quantité est supérieure à 1.\r\n+               Merci de saisir le montant du bonus réparation en négatif (-). Si votre devis comporte deux fois la même prestation, merci de cumuler le montant du/des bonus sur la même ligne.\r\n               </div>\r\n \r\n             <SimpleTable\r\n               columns={[\r\n"
                },
                {
                    "date": 1720086783006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n       </div>\r\n       <div className=\"table-cell\">\r\n         <Input\r\n           {...row.unityPrice}\r\n-          label={isMobile ? \"P.U. TTC\" : \"\"}\r\n+          label={isMobile ? \"Prix Unit. TTC\" : \"\"}\r\n           onChange={(e) => {\r\n             const cpState = { ...state };\r\n             if (\r\n               !e.target.value ||\r\n"
                }
            ],
            "date": 1714720608072,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\r\nimport AdminBase from \"../../../theme/back/adminBase\";\r\nimport DashboardContent from \"../../../components/dashboardContent\";\r\nimport DashboardSide from \"../../../components/dashboardSide\";\r\nimport Input from \"../../../components/ui-elements/input\";\r\nimport DatePickerInput from \"../../../components/ui-elements/datePickerInput\";\r\nimport DevisSideDetail from \"../../../components/devis/devis-side-details/devisSideDetail\";\r\nimport { ButtonDef } from \"../../../components/ui\";\r\nimport DsdHeader from \"../../../components/devis/devis-side-details/dsdHeader\";\r\nimport DsdContent from \"../../../components/devis/devis-side-details/dsdContent\";\r\nimport BlocInfo from \"../../../components/devis/blocks/blocInfo\";\r\nimport BlocImages from \"../../../components/devis/blocks/blocImages\";\r\nimport SimpleTable from \"../../../components/devis/simpleTable\";\r\nimport Loader from \"../../../components/loader\";\r\nimport CloseButton from \"../../../components/ui-elements/closeButton\";\r\nimport PopinModal from \"../../../components/ui-elements/popinModal\";\r\nimport { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport { IconRemove } from \"../../../assets/styles/icons\";\r\nimport { TitlePage } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport { InlineInputStyle } from \"../../../assets/styles/devisStyles\";\r\nimport { AddGreenIcon } from \"../../../assets/styles/icons\";\r\nimport connector from \"../../../connector\";\r\nimport endPoints from \"../../../config/endPoints\";\r\nimport ROUTES from \"../../../config/routes\";\r\nimport {\r\n  calcDevisLine,\r\n  downloadFile,\r\n  getFloat,\r\n  getMsgError,\r\n  getPathImage,\r\n} from \"../../../helper/functions\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nexport default withRouter(function CreateDevis({ match }) {\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const history = useHistory();\r\n  const [openSide, setOpenSide] = useState(true);\r\n  const [message, setMessage] = useState({ text: null, type: \"error\" });\r\n  const [devis, setDevis] = useState(false);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const devisLine = {\r\n    qte: {\r\n      type: \"text\",\r\n      name: \"qte\",\r\n      value: 1,\r\n      min: 1,\r\n      empty: true,\r\n      step: 1,\r\n      className: \"qte-devis\",\r\n      isNumber: true,\r\n    },\r\n    description: {\r\n      type: \"text\",\r\n      name: \"description\",\r\n      value: \"\",\r\n    },\r\n    unityPrice: {\r\n      type: \"number\",\r\n      name: \"unityPrice\",\r\n      value: 0,\r\n      max: 9999,\r\n      empty: true,\r\n      isNumber: true,\r\n      classInput: \"input-num\"\r\n    },\r\n    reduction: {\r\n      type: \"text\",\r\n      name: \"reduction\",\r\n      value: 0,\r\n      min: 0,\r\n      max: 100,\r\n      empty: true,\r\n      isNumber: true,\r\n    },\r\n    tva: {\r\n      type: \"text\",\r\n      name: \"tva\",\r\n      value: 0,\r\n      min: 0,\r\n      max: 100,\r\n      empty: true,\r\n      className: \"tva-devis\",\r\n      isNumber: true,\r\n    },\r\n  };\r\n  const [totalTTC, setTotalTTC] = useState(0);\r\n  const [state, setState] = useState({\r\n    title: {\r\n      label: \"Titre: \",\r\n      name: \"title\",\r\n      placeholder: \"Titre\",\r\n      value: \"Remplacement carte mère\",\r\n      type: \"text\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n    },\r\n    valideUntil: {\r\n      label: \"Valide jusqu'au : \",\r\n      name: \"valideUntil\",\r\n      value: null,\r\n    },\r\n    note: {\r\n      name: \"note\",\r\n      placeholder: \"Note ...\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n      as: \"textarea\",\r\n    },\r\n    devis: [{ ...devisLine }],\r\n  });\r\n\r\n  const [currentImage, setCurrentImage] = useState(0);\r\n  const [stateImage, setStateImage] = useState(false);\r\n  const [dataGallery, setDataGallery] = useState([]);\r\n  const openLightbox = (photo, index) => {\r\n    setCurrentImage(index);\r\n    setStateImage(true);\r\n  };\r\n  const closeLightbox = () => {\r\n    setStateImage(false);\r\n  };\r\n  const [showModalError, setShowModalError] = useState(false);\r\n  const [dataModalError, setDataModalError] = useState({\r\n    title: \"\",\r\n    type: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      connector({\r\n        url: `${endPoints.COMMANDS}/${match.params.id}`,\r\n        success: (response) => {\r\n          const obj = response.data;\r\n          setDevis({ ...obj });\r\n          if (obj?.files && obj.files.length) {\r\n            let dataGallery = [];\r\n            for (let i = 0; i < obj.files.length; i++) {\r\n              dataGallery.push({\r\n                source: getPathImage(obj.files[i]),\r\n              });\r\n            }\r\n            setDataGallery(dataGallery);\r\n          }\r\n        },\r\n        catch: (err) => console.log(err),\r\n      });\r\n    }\r\n  }, [match.params.id]);\r\n\r\n  useEffect(() => {\r\n    if (devis) {\r\n      const cpState = { ...state };\r\n      let disabled = devis.status !== 0;\r\n      cpState.valideUntil.disabled =\r\n        cpState.note.disabled =\r\n        cpState.title.disabled =\r\n          disabled;\r\n      cpState.valideUntil.value = devis.validationDate\r\n        ? new Date(devis.validationDate)\r\n        : null;\r\n      cpState.title.value = devis.title ?? devis.benefit.service.name;\r\n      cpState.note.value = devis.extraNote;\r\n      cpState.devis = devis.devisLines.length\r\n        ? devis.devisLines.map((dl) => ({\r\n            qte: {\r\n              ...devisLine.qte,\r\n              value: parseInt(dl.qte),\r\n              disabled: disabled,\r\n            },\r\n            description: {\r\n              ...devisLine.description,\r\n              value: dl.description,\r\n              disabled: disabled,\r\n            },\r\n            unityPrice: {\r\n              ...devisLine.unityPrice,\r\n              value: parseFloat(dl.unityPrice),\r\n              disabled: disabled,\r\n            },\r\n            reduction: {\r\n              ...devisLine.reduction,\r\n              value: parseFloat(dl.reduction),\r\n              disabled: disabled,\r\n            },\r\n            tva: {\r\n              ...devisLine.tva,\r\n              value: parseFloat(dl.tva),\r\n              disabled: disabled,\r\n            },\r\n            id: dl.id,\r\n          }))\r\n        : [{ ...devisLine }];\r\n      setState(cpState);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [devis]);\r\n\r\n  useEffect(() => {\r\n    setTotalTTC(\r\n      ifNegatifReturn0(\r\n        state.devis\r\n          .map(\r\n            (dl) =>\r\n              calcDevisLine(\r\n                dl.qte.value,\r\n                dl.unityPrice.value,\r\n                dl.reduction.value,\r\n                dl.tva.value\r\n              ).priceTotalTtc\r\n          )\r\n          .reduce((a, b) => a + b, 0)\r\n      )\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state]);\r\n\r\n  const rowRender = (row, index) => (\r\n    <div className=\"table-row\" key={`row-${index}`}>\r\n      <div className=\"table-cell\">\r\n        <Input\r\n          {...row.qte}\r\n          label={isMobile ? \"Quantité\" : \"\"}\r\n          onChange={(e) => {\r\n            const cpState = { ...state };\r\n            if (cpState.devis[index])\r\n              cpState.devis[index].qte.value = parseInt(e.target.value);\r\n            setState(cpState);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"table-cell\" style={{ width: \"350px\" }}>\r\n        <Input\r\n          {...row.description}\r\n          label={isMobile ? \"Description\" : \"\"}\r\n          onChange={(e) => {\r\n            const cpState = { ...state };\r\n            if (cpState.devis[index])\r\n              cpState.devis[index].description.value = e.target.value;\r\n            setState(cpState);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"table-cell\">\r\n        <Input\r\n          {...row.unityPrice}\r\n          label={isMobile ? \"Prix unitaire HT\" : \"\"}\r\n          onChange={(e) => {\r\n            const cpState = { ...state };\r\n            if (\r\n              !e.target.value ||\r\n              parseFloat(e.target.value) <= 9999\r\n            ) {\r\n              if (cpState.devis[index]) {\r\n                cpState.devis[index].unityPrice.value = getFloat(e.target.value);\r\n              }\r\n            }\r\n            setState(cpState);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"table-cell\">\r\n        <Input\r\n          {...row.reduction}\r\n          label={isMobile ? \"Réduction %\" : \"\"}\r\n          onChange={(e) => {\r\n            const cpState = { ...state };\r\n            if (\r\n              !e.target.value ||\r\n              parseFloat(e.target.value) <= 100\r\n            ) {\r\n              if (cpState.devis[index])\r\n              cpState.devis[index].reduction.value = getFloat(e.target.value);\r\n            }\r\n            setState(cpState);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"table-cell\">\r\n        <Input\r\n          {...row.tva}\r\n          label={isMobile ? \"TVA %\" : \"\"}\r\n          onChange={(e) => {\r\n            const cpState = { ...state };\r\n            if (\r\n              !e.target.value ||\r\n              parseFloat(e.target.value) <= 100\r\n            ) {\r\n              if (cpState.devis[index]) {\r\n                cpState.devis[index].tva.value = getFloat(e.target.value);\r\n              }\r\n            }\r\n            setState(cpState);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"table-cell\">\r\n        <div className=\"m-full\">\r\n          {isMobile && <span>Total HT:</span>}\r\n          <span>\r\n            {calcDevisLine(\r\n              state.devis[index].qte.value,\r\n              state.devis[index].unityPrice.value,\r\n              state.devis[index].reduction.value,\r\n              state.devis[index].tva.value\r\n            ).priceTotalHt.toFixed(2)}\r\n            €\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-cell\">\r\n        {{/*\r\n        <div className=\"m-full\">\r\n          {isMobile && <span>TTC:</span>}\r\n          <span>\r\n            {(\r\n              calcDevisLine(\r\n                state.devis[index].qte.value,\r\n                state.devis[index].unityPrice.value,\r\n                state.devis[index].reduction.value,\r\n                state.devis[index].tva.value\r\n              ).priceTotalTtc ?? 0\r\n            ).toFixed(2)}\r\n            €\r\n          </span>\r\n        </div>\r\n          */}}\r\n        <Input\r\n          {...row.totalTTC}\r\n          label={isMobile ? \"Total TTC\" : \"\"}\r\n          onChange={(e) => {\r\n            const cpState = { ...state };\r\n            if (\r\n              !e.target.value ||\r\n              parseFloat(e.target.value) <= 9999\r\n            ) {\r\n              if (cpState.devis[index]) {\r\n                cpState.devis[index].totalTTC.value = getFloat(e.target.value);\r\n              }\r\n            }\r\n            setState(cpState);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"table-cell\">\r\n        {devis.status === 0 && (\r\n          <>\r\n            {!isMobile ? (\r\n              <IconRemove\r\n                onClick={() => {\r\n                  const cpState = { ...state };\r\n                  cpState.devis = state.devis.filter(\r\n                    (dl, $in) => index !== $in\r\n                  );\r\n                  setState(cpState);\r\n                }}\r\n              />\r\n            ) : (\r\n              <ButtonDef\r\n                spinner={isPending}\r\n                type=\"button\"\r\n                textButton=\"Supprimer\"\r\n                className=\"warning-style w-full\"\r\n                onClick={(e) => {\r\n                  const cpState = { ...state };\r\n                  cpState.devis = state.devis.filter(\r\n                    (dl, $in) => index !== $in\r\n                  );\r\n                  setState(cpState);\r\n                }}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const onSubmit = (e, callback = false) => {\r\n    e.preventDefault();\r\n    setMessage({ ...message, text: null });\r\n    const cpState = { ...state };\r\n    cpState.valideUntil.error = false;\r\n    setState(cpState);\r\n    if (!state.valideUntil.value) {\r\n      cpState.valideUntil.error = true;\r\n      setState(cpState);\r\n      setMessage({\r\n        type: \"error\",\r\n        text: \"Champs obligatoire.\",\r\n      });\r\n      return;\r\n    }\r\n    cpState.title.error = false;\r\n    if (!state.title.value.length) {\r\n      cpState.title.error = true;\r\n      setState(cpState);\r\n      return;\r\n    }\r\n    if (!state.devis.length) {\r\n      setMessage({\r\n        type: \"error\",\r\n        text: \"Devis dois avoir 1 ligne au minimum.\",\r\n      });\r\n      return;\r\n    }\r\n    if (totalTTC <= 0.5) {\r\n      setMessage({\r\n        type: \"error\",\r\n        text: \"Le montant doit être d'au moins 0,50 €.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    let validDevisLines = true;\r\n\r\n    cpState.devis.forEach((dl, index) => {\r\n      cpState.devis[index].qte.error = false;\r\n      if (!parseInt(dl.qte.value) || parseInt(dl.qte.value) <= 0) {\r\n        cpState.devis[index].qte.error = true;\r\n        validDevisLines = false;\r\n      }\r\n      cpState.devis[index].unityPrice.error = false;\r\n      if (!parseFloat(dl.unityPrice.value)) {\r\n        cpState.devis[index].unityPrice.error = true;\r\n        validDevisLines = false;\r\n      }\r\n      cpState.devis[index].description.error = false;\r\n      if (!dl.description.value) {\r\n        cpState.devis[index].description.error = true;\r\n        validDevisLines = false;\r\n      }\r\n    });\r\n    setState(cpState);\r\n\r\n    if (!validDevisLines) {\r\n      setMessage({\r\n        type: \"error\",\r\n        text: \"Champs obligatoire.\",\r\n      });\r\n      return;\r\n    }\r\n    const data = {\r\n      validationDate: state.valideUntil.value,\r\n      extraNote: state.note.value,\r\n      title: state.title.value,\r\n      devisLines: state.devis.map((dl) => {\r\n        const obj = {\r\n          id: null,\r\n          qte: dl.qte.value,\r\n          unityPrice: parseFloat(dl.unityPrice.value),\r\n          reduction: parseFloat(dl.reduction.value),\r\n          tva: parseFloat(dl.tva.value),\r\n          description: dl.description.value,\r\n        };\r\n        if (dl.id) {\r\n          obj.id = `/api/devis_lines/${dl.id}`;\r\n        }\r\n        return obj;\r\n      }),\r\n    };\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      connector({\r\n        url: `${endPoints.DEVIS}/${devis.id}`,\r\n        data: data,\r\n        method: \"PUT\",\r\n        success: (response) => {\r\n          setIsPending(false);\r\n          setDevis({ ...response.data });\r\n          if (callback) callback();\r\n\r\n          setMessage({\r\n            type: \"success\",\r\n            text: \"Devis enregisté\",\r\n          });\r\n        },\r\n        catch: (err) => {\r\n          console.log(err);\r\n          setIsPending(false);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const setStatusEnAttente = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      connector({\r\n        url: `${endPoints.DEVIS}/send/${devis.id}`,\r\n        method: \"PUT\",\r\n        success: (response) => {\r\n          setDevis({ ...response.data });\r\n          setMessage({\r\n            type: \"success\",\r\n            text: \"Devis envoyé\",\r\n          });\r\n          setIsPending(false);\r\n        },\r\n        catch: (err) => {\r\n          console.log(err);\r\n          const msg = getMsgError(err);\r\n          if (msg === \"errorPayRepairman\") {\r\n            setDataModalError({\r\n              type: \"modal-save\",\r\n              title: \"Impossible de régler votre prestation\",\r\n              description:\r\n                \"Oops. Il y a un soucis avec votre compte bancaire. Avant d'envoyer votre devis, veuillez contacter l'administrateur du site afin de vérifier vos informations bancaires.\",\r\n            });\r\n            setShowModalError(true);\r\n          } else {\r\n            NotificationManager.error(msg, \"\");\r\n          }\r\n          setIsPending(false);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const newDevis = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      connector({\r\n        url: `${endPoints.DEVIS}/${devis.id}/new`,\r\n        method: \"PUT\",\r\n        success: (response) => {\r\n          setMessage({ type: \"success\", text: \"New Devis\" });\r\n          history.push(`${ROUTES.REPA_CREATE_DEVIS.url}/${response.data.id}`);\r\n          setIsPending(false);\r\n        },\r\n        catch: (err) => {\r\n          console.log(err);\r\n          setIsPending(false);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const ifNegatifReturn0 = (val) => (val < 0 ? 0 : val);\r\n\r\n  if (!devis) return <Loader />;\r\n\r\n  const closeSide = () => {\r\n    setOpenSide(false);\r\n  };\r\n\r\n  return (\r\n    <AdminBase>\r\n      <BlocAdminContent>\r\n        <DashboardContent\r\n          titlePage={`Devis #${devis.id}`}\r\n          backlinkUrl={ROUTES.DEVIS.url}\r\n          backlinkText=\"< Retour à la liste des Devis\"\r\n        >\r\n          <Form onSubmit={onSubmit}>\r\n            {message.text ? (\r\n              <span\r\n                className={\r\n                  message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n                }\r\n              >\r\n                {message.text}\r\n              </span>\r\n            ) : null}\r\n\r\n            <InlineInputStyle>\r\n              <div className=\"input-full\">\r\n                <Input\r\n                  {...state.title}\r\n                  onChange={(e) => {\r\n                    const cpState = { ...state };\r\n                    cpState.title.value = e.target.value;\r\n                    setState(cpState);\r\n                  }}\r\n                />\r\n              </div>\r\n            </InlineInputStyle>\r\n\r\n            <InlineInputStyle>\r\n              <DatePickerInput\r\n                {...state.valideUntil}\r\n                minDate={new Date()}\r\n                onChange={(date) => {\r\n                  const cpState = { ...state };\r\n                  cpState.valideUntil.value = date;\r\n                  setState(cpState);\r\n                }}\r\n              />\r\n            </InlineInputStyle>\r\n\r\n            <TitlePage>Lignes du devis</TitlePage>\r\n\r\n            <SimpleTable\r\n              columns={[\r\n                { key: \"quantity\", text: \"Quantité\" },\r\n                { key: \"description\", text: \"Description\" },\r\n                { key: \"ht\", text: \"Prix unitaire HT\" },\r\n                { key: \"reduction\", text: \"Réduction %\" },\r\n                { key: \"tva\", text: \"TVA %\" },\r\n                { key: \"total_ht\", text: \"Total HT\" },\r\n                { key: \"ttc\", text: \"TTC\" },\r\n                { key: \"actions\", text: \"\" },\r\n              ]}\r\n              data={state.devis}\r\n              rowRender={rowRender}\r\n            />\r\n\r\n            <div className=\"d-sm-flex align-items-center justify-content-between mb-sm-3 mb-5\">\r\n              <div>\r\n                {devis.status === 0 && (\r\n                  <ButtonDef\r\n                    spinner={isPending}\r\n                    type=\"button\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      const cpState = { ...state };\r\n                      cpState.devis.push({ ...devisLine });\r\n                      setState(cpState);\r\n                    }}\r\n                    textButton={\r\n                      <>\r\n                        <AddGreenIcon /> Nouvelle ligne\r\n                      </>\r\n                    }\r\n                    className=\"btn-add m-r\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <BlocInfo>\r\n                <h3 className=\"warning-style w-lg text-right\">\r\n                  Total HT :{\" \"}\r\n                  {ifNegatifReturn0(\r\n                    state.devis\r\n                      .map(\r\n                        (dl) =>\r\n                          calcDevisLine(\r\n                            dl.qte.value,\r\n                            dl.unityPrice.value,\r\n                            dl.reduction.value,\r\n                            dl.tva.value\r\n                          ).priceTotalHt\r\n                      )\r\n                      .reduce((a, b) => a + b, 0)\r\n                  ).toFixed(2)}\r\n                  €\r\n                </h3>\r\n                <h4 className=\"w-lg text-right\">\r\n                  Montant TVA{\" \"}\r\n                  {ifNegatifReturn0(\r\n                    state.devis\r\n                      .map(\r\n                        (dl) =>\r\n                          calcDevisLine(\r\n                            dl.qte.value,\r\n                            dl.unityPrice.value,\r\n                            dl.reduction.value,\r\n                            dl.tva.value\r\n                          ).amountTva\r\n                      )\r\n                      .reduce((a, b) => a + b, 0)\r\n                  ).toFixed(2)}\r\n                  €\r\n                </h4>\r\n                <h4 className=\"success-style w-lg text-right\">\r\n                  Montant TTC : {totalTTC.toFixed(2)}€\r\n                </h4>\r\n              </BlocInfo>\r\n            </div>\r\n\r\n            <TitlePage>Notes additionnelles</TitlePage>\r\n            <Input\r\n              {...state.note}\r\n              onChange={(e) => {\r\n                const cpState = { ...state };\r\n                cpState.note.value = e.target.value;\r\n                setState(cpState);\r\n              }}\r\n            />\r\n\r\n            <div className=\"d-flex justify-content-center mb-5 flex-column flex-sm-row\">\r\n              <ButtonDef\r\n                spinner={isPending}\r\n                type=\"button\"\r\n                textButton=\"Télécharger En pdf\"\r\n                className=\"m-1\"\r\n                onClick={(e) => {\r\n                  if (devis.status === 0)\r\n                    onSubmit(e, () => {\r\n                      setIsPending(true);\r\n                      downloadFile(\r\n                        `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n                        `Devis#${devis.id}.pdf`,\r\n                        setIsPending\r\n                      );\r\n                    });\r\n                  else {\r\n                    e.preventDefault();\r\n                    setIsPending(true);\r\n                    downloadFile(\r\n                      `${endPoints.EXPORT_DEVIS}/${devis.id}`,\r\n                      `Devis#${devis.id}.pdf`,\r\n                      setIsPending\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n              {devis.status === 0 && (\r\n                <>\r\n                  <ButtonDef\r\n                    spinner={isPending}\r\n                    type=\"button\"\r\n                    textButton=\"Enregistrer\"\r\n                    className=\"m-1\"\r\n                    onClick={(e) => {\r\n                      onSubmit(e);\r\n                    }}\r\n                  />\r\n                  <ButtonDef\r\n                    spinner={isPending}\r\n                    type=\"button\"\r\n                    textButton=\"Envoyer le devis\"\r\n                    className=\"m-1\"\r\n                    onClick={(e) => {\r\n                      if (devis.status === 0) onSubmit(e, setStatusEnAttente);\r\n                      else {\r\n                        e.preventDefault();\r\n                        setStatusEnAttente();\r\n                      }\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n              {devis.status === 3 && devis.newDevis && !devis.isCommand && (\r\n                <ButtonDef\r\n                  spinner={isPending}\r\n                  type=\"button\"\r\n                  textButton=\"Nouveau devis\"\r\n                  className=\"m-1\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    newDevis();\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          </Form>\r\n        </DashboardContent>\r\n        {!isMobile\r\n          ? openSide && (\r\n              <DashboardSide className=\"devis-side\">\r\n                {isMobile && (\r\n                  <>\r\n                    <CloseButton\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        closeSide();\r\n                      }}\r\n                    />\r\n                  </>\r\n                )}\r\n                <DevisSideDetail>\r\n                  <DsdHeader\r\n                    title={`Devis #${devis.id}`}\r\n                    statusType={devis.status}\r\n                  />\r\n\r\n                  <DsdContent>\r\n                    <h2 className=\"content-title\">\r\n                      {devis.benefit.service.name}\r\n                    </h2>\r\n\r\n                    <BlocInfo>\r\n                      <h3>\r\n                        {`${devis.client.firstName} ${devis.client.lastName}`}\r\n                      </h3>\r\n                      <span>\r\n                        Devis demandé le{\" \"}\r\n                        {moment(devis.createdAt).format(\"DD/MM/YYYY\")}\r\n                      </span>\r\n                    </BlocInfo>\r\n\r\n                    <BlocInfo>\r\n                      <h4 className=\"success-style\">\r\n                        Mode de délivrance souhaité :\r\n                      </h4>\r\n                      <p>{devis.deliveryMode.deliveryModeType.name}</p>\r\n                    </BlocInfo>\r\n\r\n                    {devis.deliveryMode.deliveryModeType\r\n                      .requireDeliveryAddress && (\r\n                      <BlocInfo>\r\n                        <h4 className=\"success-style\">\r\n                          Adresse de livraison :\r\n                        </h4>\r\n                        <p>\r\n                          {devis.address}, {devis.additionalAddress},{\" \"}\r\n                          {devis.postalCode}, {devis.city}\r\n                        </p>\r\n                      </BlocInfo>\r\n                    )}\r\n                    <BlocInfo withBorder>\r\n                      {!!devis?.title?.length && (\r\n                        <h4 className=\"warning-style w-lg\">\r\n                          Titre du devis : {devis.title}\r\n                        </h4>\r\n                      )}\r\n                      {devis.dateSend ? (\r\n                        <p>\r\n                          Emis le: {moment(devis.dateSend).format(\"DD/MM/YYYY\")}\r\n                        </p>\r\n                      ) : null}\r\n                      {devis.validationDate ? (\r\n                        <p>\r\n                          Valide jusqu’au:{\" \"}\r\n                          {moment(devis.validationDate).format(\"DD/MM/YYYY\")}\r\n                        </p>\r\n                      ) : null}\r\n                      {devis.acceptanceDate &&\r\n                      devis.status != 3 &&\r\n                      devis.status != 4 ? (\r\n                        <p>\r\n                          Accepté le :{\" \"}\r\n                          {moment(devis.acceptanceDate).format(\"DD/MM/YYYY\")}\r\n                        </p>\r\n                      ) : null}\r\n                      {devis.rejectionDate ? (\r\n                        <p>\r\n                          Refusé le:{\" \"}\r\n                          {moment(devis.rejectionDate).format(\"DD/MM/YYYY\")}\r\n                        </p>\r\n                      ) : null}\r\n                      {devis.cancellationDate ? (\r\n                        <p>\r\n                          Annulé le:{\" \"}\r\n                          {moment(devis.cancellationDate).format(\"DD/MM/YYYY\")}\r\n                        </p>\r\n                      ) : null}\r\n                    </BlocInfo>\r\n                    {!!devis.total && !!devis.benefit.priceQuote && (\r\n                      <BlocInfo>\r\n                        <h4 className=\"success-style\">Prix du devis : </h4>\r\n                        <p>\r\n                          {devis.benefit.priceQuote?.toFixed(2)} € TTC\r\n                          {devis.paiements.filter(\r\n                            (pay) => pay.object === \"charge\"\r\n                          ).length\r\n                            ? \"(réglé)\"\r\n                            : \"\"}\r\n                        </p>\r\n                      </BlocInfo>\r\n                    )}\r\n                    {devis.description ? (\r\n                      <BlocInfo>\r\n                        <h3 className=\"warning-style\">Description :</h3>\r\n                        <div className=\"desc-devis\">{devis.description}</div>\r\n                      </BlocInfo>\r\n                    ) : null}\r\n\r\n                    {devis.files.length ? (\r\n                      <>\r\n                        <BlocImages\r\n                          title=\"Photos\"\r\n                          data={dataGallery}\r\n                          onClick={openLightbox}\r\n                        />\r\n                        <ModalGateway>\r\n                          {stateImage ? (\r\n                            <Modal onClose={closeLightbox}>\r\n                              <Carousel\r\n                                currentIndex={currentImage}\r\n                                views={dataGallery}\r\n                              />\r\n                            </Modal>\r\n                          ) : null}\r\n                        </ModalGateway>\r\n                      </>\r\n                    ) : null}\r\n                  </DsdContent>\r\n                </DevisSideDetail>\r\n\r\n                <PopinModal\r\n                  show={showModalError}\r\n                  handleClose={() => {\r\n                    setShowModalError(false);\r\n                  }}\r\n                  title={dataModalError.title}\r\n                >\r\n                  <p>{dataModalError.description}</p>\r\n                  <div className=\"btns-confirm\">\r\n                    <ButtonDef\r\n                      textButton=\"Contacter\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(`${ROUTES.CONTACT.url}`);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </PopinModal>\r\n              </DashboardSide>\r\n            )\r\n          : null}\r\n      </BlocAdminContent>\r\n    </AdminBase>\r\n  );\r\n});\r\n"
        }
    ]
}