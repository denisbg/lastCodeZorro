{
    "sourceFile": "src/views/back/repairman/services.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1711297192268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711300653425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,10 +350,9 @@\n       setParamsUrlService(cpParamsUrlService);\r\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.SERVICES_REPAIRMAN}?${cpParamsUrlService}`,\r\n-        success: (response) => {\r\n-          message('step SERVICES_REPAIRMAN',response.data );\r\n+       \r\n           setServices(response.data[\"hydra:member\"] || []);\r\n           setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n         },\r\n         catch: (error) => {\r\n"
                },
                {
                    "date": 1711300659669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,9 +350,10 @@\n       setParamsUrlService(cpParamsUrlService);\r\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.SERVICES_REPAIRMAN}?${cpParamsUrlService}`,\r\n-       \r\n+        success: (response) => {\r\n+  \r\n           setServices(response.data[\"hydra:member\"] || []);\r\n           setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n         },\r\n         catch: (error) => {\r\n"
                },
                {
                    "date": 1711300686072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,9 +351,8 @@\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.SERVICES_REPAIRMAN}?${cpParamsUrlService}`,\r\n         success: (response) => {\r\n-  \r\n           setServices(response.data[\"hydra:member\"] || []);\r\n           setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n         },\r\n         catch: (error) => {\r\n"
                },
                {
                    "date": 1716819332498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,8 +347,9 @@\n     }&itemsPerPage=${perPage}${condition}`;\r\n \r\n     if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n       setParamsUrlService(cpParamsUrlService);\r\n+      console.log(cpParamsUrlService);\r\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.SERVICES_REPAIRMAN}?${cpParamsUrlService}`,\r\n         success: (response) => {\r\n"
                },
                {
                    "date": 1716819355727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,9 +347,9 @@\n     }&itemsPerPage=${perPage}${condition}`;\r\n \r\n     if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n       setParamsUrlService(cpParamsUrlService);\r\n-      console.log(cpParamsUrlService);\r\n+      console.log(\"SERVICES STEP 01 \",cpParamsUrlService);\r\n       connector({\r\n         method: \"get\",\r\n         url: `${endPoints.SERVICES_REPAIRMAN}?${cpParamsUrlService}`,\r\n         success: (response) => {\r\n"
                }
            ],
            "date": 1711297192268,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { Redirect, useLocation } from \"react-router-dom\";\r\nimport { Input, ButtonDef } from \"../../../components/ui\";\r\nimport AdminBase from \"../../../theme/back/adminBase\";\r\nimport DashboardContent from \"../../../components/dashboardContent\";\r\nimport DashboardSide from \"../../../components/dashboardSide\";\r\nimport { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport ListsRepairMan from \"../../../components/services/listsRepairMan\";\r\nimport { NoticeIcon } from \"../../../assets/styles/icons\";\r\nimport * as vars from \"../../../vars\";\r\nimport endPoints from \"../../../config/endPoints\";\r\nimport connector from \"../../../connector\";\r\nimport noImage from \"../../../assets/images/noImage.png\";\r\nimport { clearErrors } from \"../../../helper/form\";\r\nimport ROUTES from \"../../../config/routes\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport CloseButton from \"../../../components/ui-elements/closeButton\";\r\nimport { parentCategories, sortObjectsText } from \"../../../helper/functions\";\r\n\r\nexport default function Services() {\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const perPageDesMob = isMobile ? 10 : 20;\r\n  const [goToBenefit, setGoToBenefit] = useState(false);\r\n  const [services, setServices] = useState([]);\r\n  const [allServices, setAllServices] = useState([]);\r\n  const [totalServices, setTotalServices] = useState(0);\r\n  const [universesCategories, setUniversesCategories] = useState([]);\r\n  const [message, setMessage] = useState(null);\r\n  const [service, setService] = useState(false);\r\n  const [perPage, setPerPage] = useState(perPageDesMob);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n  const [isPending, setIsPending] = useState(false);\r\n  const query = new URLSearchParams(useLocation().search);\r\n\r\n  const [defaultBenefit] = useState(\r\n    query.get(\"benefit\") ? parseInt(query.get(\"benefit\")) : \"\"\r\n  );\r\n\r\n  const [filter, setFilter] = useState({\r\n    benefit: {\r\n      placeholder: \"Prestations\",\r\n      options: [\r\n        { label: \"Toutes les prestations\", value: \"\" },\r\n        { label: \"Services avec mes prestations\", value: 1 },\r\n        { label: \"Services sans prestation\", value: -1 },\r\n      ],\r\n      value: defaultBenefit,\r\n      isSearchable: true,\r\n    },\r\n    universe: {\r\n      placeholder: \"Univers\",\r\n      options: [{ label: \"Tous les univers\", value: \"\", category: [] }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    category: {\r\n      placeholder: \"catégorie(s)\",\r\n      options: [{ label: \"Toutes les catégories\", value: \"\", subCategory: [] }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    subCategory: {\r\n      placeholder: \"Sous catégorie(s)\",\r\n      options: [{ label: \"Toutes les sous-catégories\", value: \"\" }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    service: {\r\n      placeholder: \"Services\",\r\n      options: [{ label: \"Tous les services\", value: \"\", subCategory: [] }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    activeElement: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const cpFilter = copy(filter);\r\n    let all = \"\";\r\n    if (filter.activeElement === \"benefit\") {\r\n      \r\n        cpFilter.activeElement = \"universe\";\r\n        setFilter(cpFilter);\r\n\r\n    } else if (filter.activeElement === \"universe\") {\r\n      let categoryOptions = [];\r\n\r\n      if (filter.universe.value) {\r\n        const index = indexOfValue(\r\n          filter.universe.value,\r\n          universesCategories,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          categoryOptions.push(...universesCategories[index].category);\r\n          if (\r\n            indexOfValue(filter.category.value, categoryOptions, \"value\") === -1\r\n          ) {\r\n            cpFilter.category.value = \"\";\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < universesCategories.length; i++) {\r\n          categoryOptions.push(...universesCategories[i].category);\r\n        }\r\n      }\r\n\r\n      all = { label: \"Toutes les catégories\", value: \"\", subCategory: [] };\r\n      if (!isEqual([all, ...categoryOptions], filter.category.options)) {\r\n        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n        cpFilter.category.options = [all, ...categoryOptions];\r\n      }\r\n      cpFilter.category.value = \"\";\r\n      cpFilter.activeElement = \"category\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"category\") {\r\n      let subCategoryOptions = [];\r\n      if (filter.category.value) {\r\n        const index = indexOfValue(\r\n          filter.category.value,\r\n          filter.category.options,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          subCategoryOptions.push(\r\n            ...filter.category.options[index].subCategory\r\n          );\r\n          if (\r\n            indexOfValue(\r\n              filter.subCategory.value,\r\n              subCategoryOptions,\r\n              \"value\"\r\n            ) === -1\r\n          ) {\r\n            cpFilter.subCategory.value = \"\";\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < filter.category.options.length; i++) {\r\n          subCategoryOptions.push(...filter.category.options[i].subCategory);\r\n        }\r\n      }\r\n      all = { label: \"Toutes les sous-catégories\", value: \"\" };\r\n      if (!isEqual([all, ...subCategoryOptions], filter.subCategory.options)) {\r\n        subCategoryOptions = sortObjectsText(\r\n          subCategoryOptions,\r\n          \"label\",\r\n          \"asc\"\r\n        );\r\n        cpFilter.subCategory.options = [all, ...subCategoryOptions];\r\n      }\r\n      cpFilter.subCategory.value = \"\";\r\n      cpFilter.activeElement = \"subCategory\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"subCategory\") {\r\n      let serviceOptions = [];\r\n      if (filter.subCategory.value) {\r\n        for (let i = 0; i < allServices.length; i++) {\r\n          if (\r\n            (allServices[i].benefit === 0 && filter.benefit.value === -1) ||\r\n            (allServices[i].benefit > 0 && filter.benefit.value === 1) ||\r\n            !filter.benefit.value\r\n          ) {\r\n            if (\r\n              indexOfValue(\r\n                filter.subCategory.value,\r\n                allServices[i].subCategory,\r\n                \"value\"\r\n              ) > -1\r\n            ) {\r\n              serviceOptions.push(allServices[i]);\r\n            }\r\n          }\r\n        }\r\n        if (\r\n          indexOfValue(filter.service.value, serviceOptions, \"value\") === -1\r\n        ) {\r\n          cpFilter.service.value = \"\";\r\n        }\r\n      } else {\r\n        for (let i = 0; i < allServices.length; i++) {\r\n          if (\r\n            (allServices[i].benefit === 0 && filter.benefit.value === -1) ||\r\n            (allServices[i].benefit > 0 && filter.benefit.value === 1) ||\r\n            !filter.benefit.value\r\n          ) {\r\n            for (let j = 0; j < allServices[i].subCategory.length; j++) {\r\n             \r\n              if (\r\n                indexOfValue(\r\n                  allServices[i].subCategory[j].value,\r\n                  filter.subCategory.options,\r\n                  \"value\"\r\n                ) > -1\r\n              ) {\r\n                serviceOptions.push(allServices[i]);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (\r\n          indexOfValue(filter.service.value, serviceOptions, \"value\") === -1\r\n        ) {\r\n          cpFilter.service.value = \"\";\r\n        }\r\n      }\r\n      all = {\r\n        label: \"Tous les services\",\r\n        value: \"\",\r\n        subCategory: [],\r\n        benefits: [],\r\n      };\r\n      if (!isEqual([all, ...serviceOptions], filter.service.options)) {\r\n        serviceOptions = sortObjectsText(serviceOptions, \"label\", \"asc\");\r\n        cpFilter.service.options = [all, ...serviceOptions];\r\n      }\r\n      cpFilter.service.value = \"\";\r\n      cpFilter.activeElement = \"service\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"service\") {\r\n      if (pageIndex === 0) {\r\n        getServices(false);\r\n      } else {\r\n        setPageIndex(0);\r\n      }\r\n    } \r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    getUniversesCategories();\r\n    getAllServices();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getUniversesCategories = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: endPoints.UNIVERSES_CATEGORIES_REPAIRMAN,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        cpFilter.universe.options = [\r\n          { label: \"Tous les univers\", value: \"\", category: [] },\r\n        ];\r\n        cpFilter.category.options = [\r\n          { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n        ];\r\n        cpFilter.subCategory.options = [\r\n          { label: \"Toutes les sous-catégories\", value: \"\" },\r\n        ];\r\n        let universeOptions = [];\r\n        let categoryOptions = [];\r\n        let categoriesOptions = [];\r\n        let subCategoryOptions = [];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          let o = arrayObj[i];\r\n          let category = [];\r\n          for (let j = 0; j < o.categories.length; j++) {\r\n            let subCategory = [];\r\n            for (let k = 0; k < o.categories[j].children.length; k++) {\r\n              const subRow = {\r\n                label: o.categories[j].children[k].name,\r\n                value: o.categories[j].children[k].id,\r\n              };\r\n              subCategoryOptions.push(subRow);\r\n              subCategory.push(subRow);\r\n            }\r\n            const row = {\r\n              label: o.categories[j].name,\r\n              value: o.categories[j].id,\r\n            };\r\n            categoryOptions.push({ ...row, subCategory });\r\n            category.push({ ...row, subCategory });\r\n            categoriesOptions.push({ ...row, options: subCategory });\r\n          }\r\n          universeOptions.push({\r\n            label: o.name,\r\n            value: o.id,\r\n            category,\r\n          });\r\n        }\r\n        universeOptions = sortObjectsText(universeOptions, \"label\", \"asc\");\r\n        cpFilter.universe.options = [\r\n          ...cpFilter.universe.options,\r\n          ...universeOptions,\r\n        ];\r\n        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n        cpFilter.category.options = [\r\n          ...cpFilter.category.options,\r\n          ...categoryOptions,\r\n        ];\r\n        subCategoryOptions = sortObjectsText(\r\n          subCategoryOptions,\r\n          \"label\",\r\n          \"asc\"\r\n        );\r\n        cpFilter.subCategory.options = [\r\n          ...cpFilter.subCategory.options,\r\n          ...subCategoryOptions,\r\n        ];\r\n        setUniversesCategories(cpFilter.universe.options);\r\n        setFilter(cpFilter);\r\n\r\n        const cpState = { ...state };\r\n        cpState.universe.options = [...cpFilter.universe.options];\r\n        cpState.categories.options = [...categoriesOptions];\r\n        setState(cpState);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getServices(false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pageIndex, perPage]);\r\n\r\n  const getServices = (refresh = false) => {\r\n    let condition = \"\";\r\n    if (filter.universe.value) {\r\n      condition += `&categories.parent.universe.id=${filter.universe.value}`;\r\n    }\r\n    if (filter.category.value) {\r\n      condition += `&categories.parent.id=${filter.category.value}`;\r\n    }\r\n    if (filter.subCategory.value) {\r\n      condition += `&categories.id=${filter.subCategory.value}`;\r\n    }\r\n    if (filter.benefit.value) {\r\n      condition += `&benefit=${filter.benefit.value}`;\r\n    }\r\n    if (filter.service.value) {\r\n      condition += `&id=${filter.service.value}`;\r\n    }\r\n\r\n    const cpParamsUrlService = `page=${\r\n      parseInt(pageIndex) + 1\r\n    }&itemsPerPage=${perPage}${condition}`;\r\n\r\n    if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n      setParamsUrlService(cpParamsUrlService);\r\n      connector({\r\n        method: \"get\",\r\n        url: `${endPoints.SERVICES_REPAIRMAN}?${cpParamsUrlService}`,\r\n        success: (response) => {\r\n          message('step SERVICES_REPAIRMAN',response.data );\r\n          setServices(response.data[\"hydra:member\"] || []);\r\n          setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n        },\r\n        catch: (error) => {\r\n          console.log(error);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const getAllServices = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.SERVICES_REPAIRMAN}`,\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        cpFilter.service.options = [\r\n          { label: \"Tous les services\", value: \"\", subCategory: [] },\r\n        ];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          let o = arrayObj[i];\r\n          const subCategory = [];\r\n          for (let j = 0; j < o.categories.length; j++) {\r\n            subCategory.push({\r\n              label: o.categories[j].name,\r\n              value: o.categories[j].id,\r\n            });\r\n          }\r\n          cpFilter.service.options.push({\r\n            label: o.name,\r\n            value: o.id,\r\n            subCategory,\r\n            benefit: o.benefits.length || 0,\r\n          });\r\n        }\r\n        setAllServices(cpFilter.service.options);\r\n        setFilter(cpFilter);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getPathImage = (image) => (image ? vars.pathImage + image : noImage);\r\n\r\n  const setActiveService = (item = {}) => {\r\n    const cpState = { ...state };\r\n    cpState.object.value = \"\";\r\n    cpState.description.value = \"\";\r\n    setState(cpState);\r\n    setService(item);\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    object: {\r\n      name: \"name_service\",\r\n      type: \"text\",\r\n      label: \"Titre du service\",\r\n      placeholder: \"Titre du service\",\r\n      value: \"\",\r\n      required: true,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    description: {\r\n      name: \"description\",\r\n      label: \"Description\",\r\n      placeholder: \"Description\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n      as: \"textarea\",\r\n    },\r\n  });\r\n\r\n  const addBenefit = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      setMessage(null);\r\n      if (service.id) {\r\n        connector({\r\n          method: \"post\",\r\n          url: endPoints.BENEFIT_REPAIRMAN,\r\n          data: {\r\n            service: `${endPoints.ANONYMOUS_SERVICE}${service.id}`,\r\n          },\r\n          success: (response) => {\r\n            setIsPending(false);\r\n            NotificationManager.success(\r\n              \"Service ajouté avec succès à vos prestations.\",\r\n              \"\"\r\n            );\r\n            setGoToBenefit({ ...service, benefits: [response.data] });\r\n            setService(false);\r\n          },\r\n          catch: (error) => {\r\n            console.log(error);\r\n            setIsPending(false);\r\n            if (\r\n              error?.response?.data &&\r\n              error.response.data[\"hydra:description\"]\r\n            ) {\r\n              const msg = error.response.data[\"hydra:description\"];\r\n              msgErrors({ msg });\r\n            } else {\r\n              msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n            }\r\n          },\r\n        });\r\n      } else {\r\n        msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n      }\r\n    }\r\n  };\r\n\r\n  const askNewService = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      setMessage(null);\r\n      setState(clearErrors({ ...state }));\r\n      if (state.object.value && state.description.value) {\r\n        connector({\r\n          method: \"post\",\r\n          url: endPoints.NEW_SERVICE,\r\n          data: {\r\n            object: state.object.value,\r\n            description: state.description.value,\r\n          },\r\n          success: (response) => {\r\n            setActiveService(false);\r\n            setIsPending(false);\r\n            NotificationManager.success(\r\n              \"Votre demande de création d'un nouveau service bien été prises en compte.\",\r\n              \"\"\r\n            );\r\n          },\r\n          catch: (error) => {\r\n            console.log(error);\r\n            setIsPending(false);\r\n            if (\r\n              error?.response?.data &&\r\n              error.response.data[\"hydra:description\"]\r\n            ) {\r\n              const msg = error.response.data[\"hydra:description\"];\r\n              msgErrors({ msg });\r\n            } else {\r\n              msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n            }\r\n          },\r\n        });\r\n      } else {\r\n        const msg = \"Vérifier si les champs obligatoires sont remplis.\";\r\n        msgErrors({\r\n          object: !state.object.value,\r\n          description: !state.description.value,\r\n          msg,\r\n        });\r\n        setIsPending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);\r\n\r\n  const copy = (x) => JSON.parse(JSON.stringify(x));\r\n\r\n  const indexOfValue = (value, array) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (value === array[i].value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n    const cpState = { ...state };\r\n    if (e.object !== undefined) cpState.object.error = e.object;\r\n    if (e.description !== undefined) cpState.description.error = e.description;\r\n    setState(cpState);\r\n  };\r\n\r\n  if (goToBenefit) {\r\n    if (goToBenefit.benefits.length) {\r\n      return (\r\n        <Redirect\r\n          to={`${ROUTES.REPA_PRESTATIONS.url}?benefit=${goToBenefit.benefits[0].id}`}\r\n        />\r\n      );\r\n    } else {\r\n      msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AdminBase>\r\n      <BlocAdminContent>\r\n        <DashboardContent\r\n          titlePage=\"Catalogue des services\"\r\n          className={service ? \"side-is-opened\" : null}\r\n        >\r\n          <ListsRepairMan\r\n            setActiveItem={setActiveService}\r\n            item={service}\r\n            items={services}\r\n            filter={filter}\r\n            setFilter={setFilter}\r\n            totalItems={totalServices}\r\n            perPage={perPage}\r\n            setPerPage={setPerPage}\r\n            pageIndex={pageIndex}\r\n            setPageIndex={setPageIndex}\r\n            textButtonAjoute=\"Demander la création d’un nouveau service\"\r\n          />\r\n        </DashboardContent>\r\n        {service ? (\r\n          <DashboardSide className=\"prestations-side\">\r\n            {isMobile && (\r\n              <>\r\n                <CloseButton\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setService(false);\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n            <h2 className=\"title-side-dashboard\">\r\n              {service === \"new\"\r\n                ? \"Demande de création d’un service\"\r\n                : service.name}\r\n            </h2>\r\n            <Form className=\"form-prestations reparateur-form-prestation\">\r\n              {message && message.type && message.text ? (\r\n                <span\r\n                  className={\r\n                    message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n                  }\r\n                >\r\n                  {message.text}\r\n                </span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              {service.id ? (\r\n                <>\r\n                  <div className=\"image-service-prestation\">\r\n                    <img src={getPathImage(service.picture)} alt=\"\" />\r\n                  </div>\r\n                  <div className=\"desc-service-prestation\">\r\n                    <p>{service.description}</p>\r\n                  </div>\r\n\r\n                  <div className=\"cats-service-prestation\">\r\n                    <span>Catégories :</span>\r\n                    <div className=\"item-cats-prestation\">\r\n                      {service.categories\r\n                        ? parentCategories(service.categories).map((cat) => (\r\n                            <p key={cat.id}>\r\n                              <span>{cat.name}</span>\r\n                            </p>\r\n                          ))\r\n                        : \"\"}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"notice-bloc\">\r\n                    {service.minPrice ||\r\n                    service.averagePrice ||\r\n                    service.maxPrice ? (\r\n                      <span className=\"notice-icon\">\r\n                        <NoticeIcon />\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    <div className=\"item-notice\">\r\n                      {service.minPrice ? (\r\n                        <span>\r\n                          Prix mini observé chez Fingz :{\" \"}\r\n                          {parseFloat(service.minPrice).toFixed(2)} € TTC\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {service.averagePrice ? (\r\n                        <span>\r\n                          Prix moyen observé chez Fingz :{\" \"}\r\n                          {parseFloat(service.averagePrice).toFixed(2)} € TTC\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {service.maxPrice ? (\r\n                        <span>\r\n                          Prix maxi observé chez Fingz :{\" \"}\r\n                          {parseFloat(service.maxPrice).toFixed(2)} € TTC\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bloc-button-prestation\">\r\n                    {service.benefits.length ? (\r\n                      <ButtonDef\r\n                        textButton=\"Voir ma prestation\"\r\n                        spinner={isPending}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          setGoToBenefit(service);\r\n                        }}\r\n                      />\r\n                    ) : (\r\n                      <ButtonDef\r\n                        textButton=\"Ajouter à mes prestations\"\r\n                        spinner={isPending}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          addBenefit();\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div className=\"notice-bloc\">\r\n                    <span className=\"notice-icon\">\r\n                      <NoticeIcon />\r\n                    </span>\r\n                    Vous ne trouvez pas de service correspondant à vos\r\n                    prestations ? Proposez-nous un nouveau service à créer.\r\n                  </div>\r\n                  <Input\r\n                    {...state.object}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.object.value = e.target.value;\r\n                      cpState.object.error = false;\r\n                      setState(cpState);\r\n                    }}\r\n                  />\r\n                  <Input\r\n                    {...state.description}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.description.value = e.target.value;\r\n                      cpState.description.error = false;\r\n                      setState(cpState);\r\n                    }}\r\n                  />\r\n                  <ButtonDef\r\n                    className=\"btn-center\"\r\n                    textButton=\"Envoyer ma demande\"\r\n                    spinner={isPending}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      askNewService();\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n            </Form>\r\n          </DashboardSide>\r\n        ) : null}\r\n      </BlocAdminContent>\r\n    </AdminBase>\r\n  );\r\n}\r\n"
        }
    ]
}