{
    "sourceFile": "src/views/back/admin/backcategories.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1712585196997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1712585196997,
            "name": "Commit-0",
            "content": "import arrayMove from \"array-move\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { Link } from \"react-router-dom\";\r\nimport noImage from \"../../../assets/images/noImage.png\";\r\nimport {\r\n  BlocAccordions,\r\n  BlocAdminContent,\r\n  BtnAccordAdd,\r\n} from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport { DeleteIcon, EditIcon } from \"../../../assets/styles/icons\";\r\nimport ListSort from \"../../../components/categories/listSort\";\r\nimport DashboardContent from \"../../../components/dashboardContent\";\r\nimport DashboardSide from \"../../../components/dashboardSide\";\r\nimport { ButtonDef, Input, WysiwygEditor } from \"../../../components/ui\";\r\nimport {\r\n  clearErrors,\r\n  dataType64toFile,\r\n  getFilesBase64,\r\n} from \"../../../helper/form\";\r\nimport AdminBase from \"../../../theme/back/adminBase\";\r\nimport * as vars from \"../../../vars\";\r\nimport endPoints from \"./../../../config/endPoints\";\r\nimport connector from \"./../../../connector\";\r\nimport { AddGreenIcon } from \"../../../assets/styles/icons\";\r\nimport ROUTES from \"../../../config/routes\";\r\nimport PopinModal from \"../../../components/ui-elements/popinModal\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport CloseButton from \"../../../components/ui-elements/closeButton\";\r\nimport { getMsgError, scrollTop } from \"../../../helper/functions\";\r\nimport RadioButton from \"../../../components/ui-elements/radioButton\";\r\nimport SingleCheckbox from \"../../../components/ui-elements/singleCheckBox\";\r\n\r\nexport default function Categories() {\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const [state, setState] = useState({\r\n    id: { value: null },\r\n    name: {\r\n      label: \"Nom\",\r\n      type: \"text\",\r\n      name: \"name\",\r\n      required: true,\r\n      placeholder: \"Nom\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    nameCategory: {\r\n      label: \"Nom de la catégorie\",\r\n      type: \"text\",\r\n      name: \"nameCategory\",\r\n      required: true,\r\n      placeholder: \"Nom de la catégorie\",\r\n      value: \"Catégorie(s)\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    nameSubCategory: {\r\n      label: \"Nom de la sous-catégorie\",\r\n      type: \"text\",\r\n      name: \"nameSubCategory\",\r\n      required: true,\r\n      placeholder: \"Nom de la sous-catégorie\",\r\n      value: \"Sous-catégories(s)\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    requireSearchSubCategory: {\r\n      name: \"requireSearchSubCategory\",\r\n      label: \"Champ sous-catégorie obligatoire dans la recherche\",\r\n      value: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n    },\r\n    descriptionPictures: {\r\n      name: \"descriptionPictures\",\r\n      label: \"Aide pour l’ajout de photos\",\r\n      placeholder: \"Tutoriel pour la prise de photos lors d’un devis\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n      image: true,\r\n    },\r\n    description: {\r\n      name: \"description\",\r\n      label: \"Description\",\r\n      placeholder: \"Description\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n      as: \"textarea\",\r\n    },\r\n\r\n    position: { name: \"position\", value: 0, required: false },\r\n    universe: { name: \"universe\", value: null, required: false },\r\n    parent: { name: \"parent\", value: null, required: false },\r\n    level: { name: \"level\", value: 0, required: false },\r\n    image: {\r\n      name: \"image\",\r\n      value: null,\r\n      file: null,\r\n      required: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    bonusreparation: {\r\n      name: \"bonusreparation\",\r\n      label: \"Bonus réparation\",\r\n      required: false,\r\n      id: \"bonusreparation\",\r\n      value: \"0\",\r\n      options: [\r\n        { value: \"0\", label: \"Aucune prestation\", id: \"sansbonusrepa_radio\" },\r\n        { value: \"1\", label: \"avec des prestations eligibles\", id: \"avecbonusrepa_radio\" },\r\n      ],\r\n    },\r\n\r\n    imageHome: {\r\n      name: \"imageHome\",\r\n      value: null,\r\n      file: null,\r\n      required: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n\r\n\r\n    filenameimage1: {\r\n      label: \"Image Gauche Vitrine\",\r\n      type: \"text\",\r\n      name: \"filenameimage1\",\r\n      required: false,\r\n      placeholder: \"filenameimage1\",\r\n      value: \"\",\r\n      file: null,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    filenameimage2: {\r\n      label: \"Nom Image Centre vitrine\",\r\n      name: \"filenameimage2\",\r\n      value: null,\r\n      file: null,\r\n      type: \"text\",\r\n      required: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    filenameimage3: {\r\n      label: \"Nom Image Droit vitrine\",\r\n      name: \"filenameimage3\",\r\n      value: null,\r\n      file: null,\r\n      type: \"text\",\r\n      required: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    labelanatomie: {\r\n      name: \"labelanatomie\",\r\n      id: \"labelanatomie\",\r\n      label: \"Libellé rubrique anatomie\",\r\n      placeholder: \"anatomie\",\r\n      value: \"\",\r\n      file: null,\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n      as: \"textarea\",\r\n    },\r\n    filenameanatomie: {\r\n      label: \"Nom image anatomie\",\r\n      name: \"filenameanatomie\",\r\n      id: \"filenameanatomie\",\r\n      value: null,\r\n      type: \"text\",\r\n      required: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    pictures: { name: \"pictures\", value: [], file: [], required: false },\r\n    enabled: {\r\n      name: \"enabled\",\r\n      label: \"Statut\",\r\n      required: false,\r\n      id: \"enabled\",\r\n      value: false,\r\n      options: [\r\n        { value: true, label: \"Actif\", id: \"actif_radio\" },\r\n        { value: false, label: \"Inactif\", id: \"inactif_radio\" },\r\n      ],\r\n    },\r\n  });\r\n  const [category, setCategory] = useState(false);\r\n  const [openSide, setOpenSide] = useState(false);\r\n  const [bUpSelectedCat, setBUpSelectedCat] = useState(false);\r\n  const [message, setMessage] = useState(null);\r\n  const [universesCategories, setUniversesCategories] = useState([]);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [dataModal, setDataModal] = useState({\r\n    title: \"\",\r\n    type: \"\",\r\n    action: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"UE useEffect[]\");\r\n    getUniversesCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"UE useEffect category\");\r\n    if (category) {\r\n      const cpState = { ...state };\r\n      for (let key in category) {\r\n        if (cpState[key]) cpState[key].value = category[key];\r\n      }\r\n      cpState.image.file = \"\";\r\n      cpState.imageHome.file = \"\";\r\n      console.log(\"STEP CAT:08 setSTATE UE\");\r\n      setState(cpState);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [category]);\r\n\r\n  const getUniversesCategories = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: endPoints.ANONYMOUS_ALL_UNIVERSES_CATEGORIES_DETAILS,\r\n      data: {},\r\n      success: (response) => {\r\n        let arrayObj = response.data[\"hydra:member\"] || [];\r\n        for (var i = 0; i < arrayObj.length; i++) {\r\n          var o = arrayObj[i];\r\n          o.children = o.categories;\r\n          delete o.categories;\r\n        }\r\n        setUniversesCategories(arrayObj);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    const item = universesCategories[oldIndex];\r\n    const cpItems = arrayMove(universesCategories, oldIndex, newIndex);\r\n    setUniversesCategories(cpItems);\r\n    savePosition(cpItems, item, oldIndex, newIndex);\r\n  };\r\n\r\n  const setOrderChildren = (item, oldIndex, newIndex) => {\r\n    let cpItems = [...universesCategories];\r\n    let indexUni, indexCat, indexSubCat;\r\n    [indexUni, indexCat, indexSubCat] = findIndexCats(cpItems, item);\r\n\r\n    if (indexSubCat > -1) {\r\n      const items = cpItems[indexUni].children[indexCat].children;\r\n      cpItems[indexUni].children[indexCat].children = arrayMove(\r\n        items,\r\n        oldIndex,\r\n        newIndex\r\n      );\r\n    } else if (indexCat > -1) {\r\n      const items = cpItems[indexUni].children;\r\n      cpItems[indexUni].children = arrayMove(items, oldIndex, newIndex);\r\n    } else if (indexUni > -1) {\r\n      cpItems = arrayMove(cpItems, oldIndex, newIndex);\r\n    }\r\n    setUniversesCategories(cpItems);\r\n    savePosition(cpItems, item, oldIndex, newIndex);\r\n  };\r\n\r\n  const setActiveCategory = (item, cpItems = [], openSide = true) => {\r\n    setMessage(null);\r\n    setState(clearErrors(state));\r\n\r\n    cpItems = cpItems.length ? cpItems : [...universesCategories];\r\n    let iUniItem, iCatItem, iSubCatItem;\r\n    let indexUni, indexCat, indexSubCat;\r\n    if (item.id) {\r\n      [iUniItem, iCatItem, iSubCatItem] = findIndexCats(cpItems, item);\r\n      let cpCategory = category;\r\n      if (!category?.id && bUpSelectedCat?.id) {\r\n        cpCategory = bUpSelectedCat;\r\n      }\r\n      if (cpCategory?.id !== item.id) {\r\n        [indexUni, indexCat, indexSubCat] = findIndexCats(cpItems, cpCategory);\r\n        const isActivated = false;\r\n        if (indexSubCat > -1 && indexSubCat !== iSubCatItem) {\r\n          cpItems[indexUni].children[indexCat].children[indexSubCat] = {\r\n            ...cpItems[indexUni].children[indexCat].children[indexSubCat],\r\n            isActivated,\r\n          };\r\n        }\r\n        if (indexCat > -1 && indexCat !== iCatItem) {\r\n          cpItems[indexUni].children[indexCat] = {\r\n            ...cpItems[indexUni].children[indexCat],\r\n            isActivated,\r\n          };\r\n        }\r\n        if (indexUni > -1 && indexUni !== iUniItem) {\r\n          cpItems[indexUni] = { ...cpItems[indexUni], isActivated };\r\n        }\r\n      }\r\n      const isActivated = item.isActivated ? false : true;\r\n      if (iSubCatItem > -1) {\r\n        cpItems[iUniItem].children[iCatItem].children[iSubCatItem] = {\r\n          ...cpItems[iUniItem].children[iCatItem].children[iSubCatItem],\r\n          isActivated,\r\n        };\r\n        item = { ...item, parent: cpItems[iUniItem].children[iCatItem][\"@id\"] };\r\n      } else if (iCatItem > -1) {\r\n        cpItems[iUniItem].children[iCatItem] = {\r\n          ...cpItems[iUniItem].children[iCatItem],\r\n          isActivated,\r\n        };\r\n        item = { ...item, universe: cpItems[iUniItem][\"@id\"] };\r\n      } else if (iUniItem > -1) {\r\n        cpItems[iUniItem] = { ...cpItems[iUniItem], isActivated };\r\n      }\r\n      setUniversesCategories([...cpItems]);\r\n    } else {\r\n      item = { ...item, name: \"\" };\r\n      if (category?.id) {\r\n        setBUpSelectedCat(category);\r\n      }\r\n      if (item?.adjacent) {\r\n        [iUniItem, iCatItem, iSubCatItem] = findIndexCats(\r\n          cpItems,\r\n          item.adjacent\r\n        );\r\n        if (iSubCatItem > -1) {\r\n          item = {\r\n            ...item,\r\n            parent: cpItems[iUniItem].children[iCatItem][\"@id\"],\r\n          };\r\n        } else if (iCatItem > -1) {\r\n          item = { ...item, universe: cpItems[iUniItem][\"@id\"] };\r\n        }\r\n      }\r\n    }\r\n    setCategory(item);\r\n    setOpenSide(openSide);\r\n  };\r\n\r\n  const findIndexCats = (cpItems, item) => {\r\n    let indexUni = -1;\r\n    let indexCat = -1;\r\n    let indexSubCat = -1;\r\n    if (item.id) {\r\n      if (item[\"@type\"] === \"Universe\") {\r\n        indexUni = cpItems.findIndex((cat) => cat.id === item.id);\r\n      } else if (item[\"@type\"] === \"Category\" && item.level === 0) {\r\n        cpItems.some((universe, indexI) => {\r\n          const indexJ = universe.children.findIndex(\r\n            (cat) => cat.id === item.id\r\n          );\r\n          if (indexJ > -1) {\r\n            indexUni = indexI;\r\n            indexCat = indexJ;\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n      } else if (item[\"@type\"] === \"Category\" && item.level === 1) {\r\n        cpItems.some((universe, indexI) => {\r\n          universe.children.some((cat, indexJ) => {\r\n            const indexK = cat.children.findIndex(\r\n              (subCat) => subCat.id === item.id\r\n            );\r\n            if (indexK > -1) {\r\n              indexUni = indexI;\r\n              indexCat = indexJ;\r\n              indexSubCat = indexK;\r\n              return true;\r\n            }\r\n            return false;\r\n          });\r\n          if (indexSubCat > -1) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n      }\r\n    }\r\n    return [indexUni, indexCat, indexSubCat];\r\n  };\r\n\r\n  const savePosition = (cpItems, cat, oldIndex, newIndex) => {\r\n    cpItems = cpItems.length ? cpItems : universesCategories;\r\n    const startIndex = oldIndex < newIndex ? oldIndex : newIndex;\r\n    const endIndex = oldIndex > newIndex ? oldIndex : newIndex;\r\n    if (startIndex !== endIndex) {\r\n      let items = [];\r\n      let indexUni, indexCat, indexSubCat;\r\n      [indexUni, indexCat, indexSubCat] = findIndexCats(cpItems, cat);\r\n      if (indexSubCat > -1) {\r\n        items = cpItems[indexUni].children[indexCat].children;\r\n      } else if (indexCat > -1) {\r\n        items = cpItems[indexUni].children;\r\n      } else if (indexUni > -1) {\r\n        items = cpItems;\r\n      }\r\n      items.forEach((item, index) => {\r\n        if (startIndex <= index && index <= endIndex) {\r\n          connector({\r\n            method: \"put\",\r\n            url: `${item[\"@type\"] === \"Universe\"\r\n              ? endPoints.UNIVERSE\r\n              : endPoints.CATEGORY\r\n              }/${item.id}`,\r\n            data: { position: index },\r\n            success: (response) => {\r\n              //console.log(response);\r\n            },\r\n            catch: (error) => {\r\n              console.log(error);\r\n              NotificationManager.error(\"Quelque chose s'est mal passé.\", \"\");\r\n            },\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveCategory = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      setMessage(null);\r\n      setState(clearErrors(state));\r\n      if (state.name.value) {\r\n        connector({\r\n          method: `${state.id.value ? \"put\" : \"post\"}`,\r\n          url: `${endPoints.CATEGORY}${state.id.value ? \"/\" + state.id.value : \"\"\r\n            }`,\r\n          data: {\r\n            name: state.name.value,\r\n            position: state.position.value,\r\n            universe: state.universe.value,\r\n            parent: state.parent.value,\r\n            level: state.level.value,\r\n          },\r\n          success: (response) => {\r\n            refreshItem(response.data, state.id.value);\r\n            setIsPending(false);\r\n            msgSuccess(\"Vos modifications ont bien été prises en compte.\");\r\n          },\r\n          catch: (error) => {\r\n            console.log(error);\r\n            setIsPending(false);\r\n            msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n          },\r\n        });\r\n      } else {\r\n        const msg = \"Le champ nom est obligatoire.\";\r\n        msgErrors({ msg, name: !state.name.value });\r\n        setIsPending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteUniverse = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      connector({\r\n        method: \"delete\",\r\n        url: endPoints.UNIVERSE + \"/\" + category.id,\r\n        success: (response) => {\r\n          let cpItems = [...universesCategories];\r\n          const indexUni = cpItems.findIndex((cat) => cat.id === category.id);\r\n          if (indexUni > -1) {\r\n            cpItems.splice(indexUni, 1);\r\n          }\r\n          setUniversesCategories(cpItems);\r\n          setCategory(false);\r\n\r\n          setIsPending(false);\r\n          setShowModal(false);\r\n          NotificationManager.success(\"Univers supprimé avec succès.\", \"\");\r\n        },\r\n        catch: (error) => {\r\n          setIsPending(false);\r\n          setShowModal(false);\r\n          msgErrors({ msg: getMsgError(error) });\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteCategory = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      connector({\r\n        method: \"delete\",\r\n        url: endPoints.CATEGORY + \"/\" + category.id,\r\n        success: (response) => {\r\n          refreshItem(category, category.id, \"delete\");\r\n          setIsPending(false);\r\n          setShowModal(false);\r\n          NotificationManager.success(\"Catégorie supprimé avec succès.\", \"\");\r\n        },\r\n        catch: (error) => {\r\n          setIsPending(false);\r\n          setShowModal(false);\r\n          msgErrors({ msg: getMsgError(error) });\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const submitUniverse = (cpState) => {\r\n\r\n    console.log(\"STEP CAT:09 submit MAJ UNIVERSE Submit universe begonning vitriine1 \", cpState);\r\n    connector({\r\n      method: cpState.id.value ? \"put\" : \"post\",\r\n      url: `${endPoints.UNIVERSE}${cpState.id.value ? \"/\" + cpState.id.value : \"\"\r\n        }`,\r\n      data: {\r\n        name: cpState.name.value,\r\n        nameCategory: cpState.nameCategory.value,\r\n        nameSubCategory: cpState.nameSubCategory.value,\r\n        requireSearchSubCategory: cpState.requireSearchSubCategory.value,\r\n        position: cpState.position.value,\r\n        description: cpState.description.value,\r\n        descriptionPictures: cpState.descriptionPictures.value,\r\n        image: cpState.image.value,\r\n        imageHome: cpState.imageHome.value,\r\n        filenameimage1: cpState.filenameimage1.value,\r\n        filenameimage2: cpState.filenameimage2.value,\r\n        filenameimage3: cpState.filenameimage3.value,\r\n        labelanatomie: cpState.labelanatomie.value,\r\n        filenameanatomie: cpState.filenameanatomie.value,\r\n        bonusreparation: cpState.bonusreparation.value,\r\n        pictures: cpState.pictures.value,\r\n        enabled: cpState.enabled.value,\r\n      },\r\n      success: (response) => {\r\n        console.log(\"MAJ UNIVERSES trace 1, SUCESS \", response.data);\r\n        refreshItem(response.data, cpState.id.value);\r\n        console.log(\"MAJ UNIVERSES , trace 2,Check vitrine  SUCESS \", response.data);\r\n        setIsPending(false);\r\n        console.log(\"MAJ UNIVERSES, trace 3 Check vitrine again SUCESS \", response.data);\r\n        msgSuccess(\"Vos modifications ont bien été prises en compte.\");\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n        setIsPending(false);\r\n        msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n      },\r\n    });\r\n  };\r\n\r\n  const saveUniverse = () => {\r\n    if (!isPending) {\r\n      console.log(\"Step CAT:01 saveUniverse 0SaveUniverse \", state.descriptionPictures)\r\n      setIsPending(true);\r\n      setMessage(null);\r\n      setState(clearErrors(state));\r\n      if (\r\n        state.name.value &&\r\n        state.nameCategory.value &&\r\n        state.nameSubCategory.value &&\r\n        (state.image.value || state.image.file || state.imageHome.file || state.imageHome.value || state.filenameimage1.file || state.filenameimage1.value\r\n\r\n\r\n        )\r\n      ) {\r\n        let files = getFilesBase64(state.descriptionPictures.value);\r\n        const cpState = { ...state };\r\n        cpState.pictures.file = files;\r\n        console.log(\"Step CAT:02 universe 1 Save image cpState \", cpState) // ok validé\r\n\r\n        setState(cpState);\r\n\r\n        console.log(\"Step CAT:03 universe 1 Save image State \", state) // ok aussi validé\r\n        if (cpState.image.file) {\r\n          console.log(\"Step CAT:031 Image SAving  saveImage \");\r\n\r\n          saveImage(cpState);\r\n        };\r\n        if (state.imageHome.file) {\r\n\r\n          console.log(\"Step CAT:032 Image SAving  saveImageHome \", state.imageHome.file);\r\n          console.log(\"Step CAT:033 Image SAving  saveImageHome \", cpState.imageHome.file);\r\n\r\n\r\n          saveImageHome(cpState);\r\n        }\r\n        if (false && state.filenameimage1.file) {\r\n\r\n          console.log(\"Step CAT:042 Image SAving  filenameimage1 \", state.filenameimage1.file);\r\n          console.log(\"Step CAT:043 Image SAving  filenameimage1 \", cpState.filenameimage1.file);\r\n          saveFilenameimage1(cpState);\r\n\r\n        }\r\n        if (false && state.filenameimage2.file) {\r\n\r\n          console.log(\"Step CAT:0422 Image SAving  filenameimage2 \", state.filenameimage2.file);\r\n          console.log(\"Step CAT:0432 Image SAving  filenameimage2 \", cpState.filenameimage2.file);\r\n          //saveFilenameimage2(cpState);\r\n\r\n        }\r\n        if (false && state.filenameimage3.file) {\r\n\r\n          console.log(\"Step CAT:0422 Image SAving  filenameimage3 \", state.filenameimage3.file);\r\n          console.log(\"Step CAT:0433 Image SAving  filenameimage3 \", cpState.filenameimage3.file);\r\n          //saveFilenameimage3(cpState);\r\n\r\n        }\r\n        if (false && state.filenameanatomie.file) {\r\n\r\n          console.log(\"Step CAT:0522 Image SAving  filenameanatomie \", state.filenameanatomie.file);\r\n          console.log(\"Step CAT:0533 Image SAving  filenameanatomie \", cpState.filenameanatomie.file);\r\n          //saveFilenameAnatomie(cpState);\r\n\r\n        }\r\n\r\n\r\n\r\n        else if (files.length) {\r\n          savePictures(cpState);\r\n        }\r\n        else {\r\n          submitUniverse(cpState);\r\n        }\r\n      } else {\r\n        const msg = \"Vérifier si les champs obligatoires sont remplis.\";\r\n        msgErrors({\r\n          name: !state.name.value,\r\n          nameCategory: !state.nameCategory.value,\r\n          nameSubCategory: !state.nameSubCategory.value,\r\n          image: !state.image.value,\r\n          msg,\r\n        });\r\n        setIsPending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveImage = (cpState) => {\r\n    const data = new FormData();\r\n    data.append(\"file\", cpState.image.file);\r\n    console.log(\"STEP CAT:06-1   IMAGE saveIMAGE KM Begin  process  \", cpState.image);\r\n    connector({\r\n      method: \"post\",\r\n      url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n      data,\r\n      success: (response) => {\r\n        cpState.image.file = null;\r\n        cpState.image.value = response.data.contentUrl;\r\n        console.log(\"STEP CAT:05 IMAGE saveImage Success \", cpState.image.value);\r\n        setState(cpState);\r\n\r\n\r\n      },\r\n      catch: (error) => {\r\n        const msg = error?.response?.data[\"hydra:description\"];\r\n        msgErrors({ msg });\r\n        setIsPending(false);\r\n        scrollTop(\"side-content-dashboard\");\r\n      },\r\n    });\r\n  };\r\n\r\n  const saveImageHome = (cpState) => {\r\n\r\n    const data = new FormData();\r\n    data.append(\"file\", cpState.imageHome.file);\r\n    console.log(\"STEP CAT:06-2   IMAGE saveImageHome Begin  process  \", cpState.imageHome);\r\n    connector({\r\n      method: \"post\",\r\n      url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n      data,\r\n      success: (response) => {\r\n        console.log(\"STEP CAT:06 IMAGE saveImageHome Success \", cpState.imageHome.value);\r\n        cpState.imageHome.file = null;\r\n        cpState.imageHome.value = response.data.contentUrl;\r\n        console.log(\"STEP CAT:061 IMAGE saveImageHome Success \", cpState.imageHome.value);\r\n        setState(cpState);\r\n        setIsPending(false);\r\n\r\n      },\r\n      catch: (error) => {\r\n\r\n        const msg = error?.response?.data[\"hydra:description\"];\r\n        console.log(\"STEP CAT:061 ERROR IMAGE saveImageHome Success \", msg);\r\n        msgErrors({ msg });\r\n        setIsPending(false);\r\n        scrollTop(\"side-content-dashboard\");\r\n      },\r\n    });\r\n\r\n  };\r\n\r\n  const saveFilenameimage1 = (cpState) => {\r\n    if (cpState.filenameimage1.file) {\r\n      const data = new FormData();\r\n      data.append(\"file\", cpState.filenameimage1.file);\r\n      connector({\r\n        method: \"post\",\r\n        url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n        data,\r\n        success: (response) => {\r\n          cpState.filenameimage1.file = null;\r\n          cpState.filenameimage1.value = response.data.contentUrl;\r\n          setState(cpState);\r\n          setIsPending(false);\r\n\r\n        },\r\n        catch: (error) => {\r\n          const msg = error?.response?.data[\"hydra:description\"];\r\n          msgErrors({ msg });\r\n          setIsPending(false);\r\n          scrollTop(\"side-content-dashboard\");\r\n        },\r\n      });\r\n    } else {\r\n      savePictures(cpState);\r\n    }\r\n  };\r\n\r\n  const savexFilenameimage2 = (cpState) => {\r\n    if (cpState.filenameimage2.file) {\r\n      const data = new FormData();\r\n      data.append(\"file\", cpState.filenameimage2.file);\r\n      connector({\r\n        method: \"post\",\r\n        url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n        data,\r\n        success: (response) => {\r\n          cpState.filenameimage2.file = null;\r\n          cpState.filenameimage2.value = response.data.contentUrl;\r\n          setState(cpState);\r\n          setIsPending(false);\r\n\r\n        },\r\n        catch: (error) => {\r\n          const msg = error?.response?.data[\"hydra:description\"];\r\n          msgErrors({ msg });\r\n          setIsPending(false);\r\n          scrollTop(\"side-content-dashboard\");\r\n        },\r\n      });\r\n    } else {\r\n      savePictures(cpState);\r\n    }\r\n  };\r\n  const savexFilenameimage3 = (cpState) => {\r\n    if (cpState.filenameimage3.file) {\r\n      const data = new FormData();\r\n      data.append(\"file\", cpState.filenameimage3.file);\r\n      connector({\r\n        method: \"post\",\r\n        url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n        data,\r\n        success: (response) => {\r\n          cpState.filenameimage3.file = null;\r\n          cpState.filenameimage3.value = response.data.contentUrl;\r\n          setState(cpState);\r\n          setIsPending(false);\r\n\r\n        },\r\n        catch: (error) => {\r\n          const msg = error?.response?.data[\"hydra:description\"];\r\n          msgErrors({ msg });\r\n          setIsPending(false);\r\n          scrollTop(\"side-content-dashboard\");\r\n        },\r\n      });\r\n    } else {\r\n      savePictures(cpState);\r\n    }\r\n  };\r\n\r\n  const saveFilenameAnatomie = (cpState) => {\r\n    if (cpState.filenameanatomie.file) {\r\n      const data = new FormData();\r\n      data.append(\"file\", cpState.filenameanatomie.file);\r\n      connector({\r\n        method: \"post\",\r\n        url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n        data,\r\n        success: (response) => {\r\n          cpState.filenameanatomie.file = null;\r\n          cpState.filenameanatomie.value = response.data.contentUrl;\r\n          setState(cpState);\r\n          setIsPending(false);\r\n\r\n        },\r\n        catch: (error) => {\r\n          const msg = error?.response?.data[\"hydra:description\"];\r\n          msgErrors({ msg });\r\n          setIsPending(false);\r\n          scrollTop(\"side-content-dashboard\");\r\n        },\r\n      });\r\n    } else {\r\n      savePictures(cpState);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const savePictures = (cpState) => {\r\n    console.log(\"STEP CAT:10 save picture \", cpState);\r\n    if (cpState.pictures.file.length) {\r\n      const file = cpState.pictures.file[0];\r\n      const data = new FormData();\r\n      data.append(\"file\", dataType64toFile(file));\r\n\r\n      connector({\r\n        method: \"post\",\r\n        url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n        data,\r\n        success: (response) => {\r\n          cpState.pictures.file = cpState.pictures.file.slice(1);\r\n          const urlImage = `${process.env.REACT_APP_API_URI}${response.data.contentUrl}`;\r\n          cpState.descriptionPictures.value =\r\n            cpState.descriptionPictures.value.replace(file, urlImage);\r\n          cpState.pictures.value.push(response.data.contentUrl);\r\n          setState(cpState);\r\n          savePictures(cpState);\r\n        },\r\n        catch: (error) => {\r\n          console.log(error);\r\n        },\r\n      });\r\n    } else {\r\n      submitUniverse(cpState);\r\n    }\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n    const cpState = { ...state };\r\n    if (e.name !== undefined) cpState.name.error = e.name;\r\n    if (e.nameCategory !== undefined)\r\n      cpState.nameCategory.error = e.nameCategory;\r\n    if (e.nameSubCategory !== undefined)\r\n      cpState.nameSubCategory.error = e.nameSubCategory;\r\n    if (e.image !== undefined) cpState.image.error = e.image;\r\n    setState(cpState);\r\n    scrollTop(\"side-content-dashboard\");\r\n  };\r\n\r\n  const msgSuccess = (text) => {\r\n    if (text !== undefined) setMessage({ type: \"success\", text });\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 5000);\r\n    scrollTop(\"side-content-dashboard\");\r\n  };\r\n\r\n  const getPathImage = (image) =>\r\n    image.file\r\n      ? URL.createObjectURL(image.file)\r\n      : image.value\r\n        ? vars.pathImage + image.value\r\n        : noImage;\r\n\r\n  const refreshItem = (item, id, action = null) => {\r\n    if (item[\"@type\"] === \"Universe\") {\r\n      item.children = item.categories;\r\n      delete item.categories;\r\n    }\r\n    const cpItems = [...universesCategories];\r\n\r\n    if (id) {\r\n      let indexUni, indexCat, indexSubCat;\r\n      [indexUni, indexCat, indexSubCat] = findIndexCats(cpItems, item);\r\n      if (action === \"delete\") {\r\n        if (indexSubCat > -1) {\r\n          cpItems[indexUni].children[indexCat].children = cpItems[\r\n            indexUni\r\n          ].children[indexCat].children.filter(\r\n            (value, index, arr) => index !== indexSubCat\r\n          );\r\n        } else if (indexCat > -1) {\r\n          cpItems[indexUni].children = cpItems[indexUni].children.filter(\r\n            (value, index, arr) => index !== indexCat\r\n          );\r\n        } else if (indexUni > -1) {\r\n          cpItems = cpItems.filter((value, index, arr) => index !== indexUni);\r\n        }\r\n      } else {\r\n        if (indexSubCat > -1) {\r\n          cpItems[indexUni].children[indexCat].children[indexSubCat] = item;\r\n        } else if (indexCat > -1) {\r\n          cpItems[indexUni].children[indexCat] = item;\r\n        } else if (indexUni > -1) {\r\n          cpItems[indexUni] = { ...item, children: cpItems[indexUni].children };\r\n        }\r\n      }\r\n    } else {\r\n      if (item[\"@type\"] === \"Universe\") {\r\n        cpItems.push(item);\r\n      } else if (item[\"@type\"] === \"Category\") {\r\n        if (item.level === 0) {\r\n          const indexUni = cpItems.findIndex(\r\n            (cat) => cat[\"@id\"] === item.universe\r\n          );\r\n          cpItems[indexUni].children.push(item);\r\n        } else if (item.level === 1) {\r\n          let indexUni, indexCat;\r\n          cpItems.some((universe, indexI) => {\r\n            const indexJ = universe.children.findIndex(\r\n              (cat) => cat[\"@id\"] === item.parent\r\n            );\r\n            if (indexJ > -1) {\r\n              indexUni = indexI;\r\n              indexCat = indexJ;\r\n              return true;\r\n            }\r\n            return false;\r\n          });\r\n          cpItems[indexUni].children[indexCat].children.push(item);\r\n        }\r\n      }\r\n    }\r\n    setUniversesCategories(cpItems);\r\n\r\n    if (action === \"delete\") {\r\n      setCategory(false);\r\n    } else {\r\n      setActiveCategory(item, cpItems);\r\n    }\r\n  };\r\n\r\n  const newItem = (item, items) => {\r\n    if (item) {\r\n      if (item[\"@type\"] === \"Universe\") {\r\n        item = {\r\n          \"@type\": \"Category\",\r\n          position: item.children.length,\r\n          level: 0,\r\n          universe: item[\"@id\"],\r\n          parent: null,\r\n        };\r\n      } else if (item[\"@type\"] === \"Category\" && item.level === 0) {\r\n        item = {\r\n          \"@type\": \"Category\",\r\n          position: item.children.length,\r\n          level: 1,\r\n          universe: null,\r\n          parent: item[\"@id\"],\r\n        };\r\n      }\r\n    } else {\r\n      item = {\r\n        \"@type\": \"Universe\",\r\n        position: items.length,\r\n        level: null,\r\n        universe: null,\r\n        parent: null,\r\n        nameCategory: \"Catégorie(s)\",\r\n        nameSubCategory: \"Sous-catégories(s)\",\r\n        requireSearchSubCategory: false\r\n      };\r\n    }\r\n\r\n    setActiveCategory(\r\n      {\r\n        ...item,\r\n        id: null,\r\n        name: null,\r\n        adjacent: item?.children?.length\r\n          ? item.children[item.children.length - 1]\r\n          : {},\r\n        image: null,\r\n        imageHome: null,\r\n        filenameimage1: null,\r\n        filenameimage2: null,\r\n        filenameimage3: null,\r\n        filenameanatomie: null,\r\n        pictures: [],\r\n        nameCategory: item?.nameCategory || \"\",\r\n        nameSubCategory: item?.nameSubCategory || \"\",\r\n        requireSearchSubCategory: item?.requireSearchSubCategory || false,\r\n        description: \"\",\r\n        descriptionPictures: \"\",\r\n        enabled: false,\r\n      },\r\n      items\r\n    );\r\n  };\r\n\r\n  const getxPathImage = (image) =>\r\n    image.file\r\n      ? URL.createObjectURL(image.file)\r\n      : image.value\r\n        ? vars.pathImage + image.value\r\n        : noImage;\r\n  const getUrlServices = (cat) => {\r\n    let params = \"\";\r\n    if (cat.level === 0) {\r\n      params = `?category=${cat.id}`;\r\n    } else if (cat.parent) {\r\n      params = `?category=${cat.parent.replace(\r\n        \"/api/anonymous/category/\",\r\n        \"\"\r\n      )}&subCategory=${cat.id}`;\r\n    }\r\n    return `${ROUTES.SERVICES.url}${params}`;\r\n  };\r\n\r\n  return (\r\n    <AdminBase>\r\n      <BlocAdminContent>\r\n        <DashboardContent titlePage=\"Catégories\">\r\n          <BlocAccordions>\r\n            <ListSort\r\n              data={universesCategories}\r\n              onSortEnd={onSortEnd}\r\n              setOrderChildren={setOrderChildren}\r\n              useDragHandle\r\n              setActiveCategory={setActiveCategory}\r\n              newItem={newItem}\r\n              savePosition={savePosition}\r\n            />\r\n            <BtnAccordAdd\r\n              className={`default-btn-add level-btn`}\r\n              onClick={() => newItem(false, universesCategories)}\r\n            >\r\n              <AddGreenIcon /> Ajouter un univers\r\n            </BtnAccordAdd>\r\n          </BlocAccordions>\r\n        </DashboardContent>\r\n        {category && openSide ? (\r\n          <DashboardSide>\r\n            <div className=\"content-side-categorie\">\r\n              {isMobile && (\r\n                <>\r\n                  <CloseButton\r\n                    onClick={(e) => {\r\n                      setOpenSide(false);\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n              <h2 className=\"title-side-dashboard\">\r\n                {category.name\r\n                  ? category.name\r\n                  : category[\"@type\"] === \"Universe\"\r\n                    ? \"Ajouter un univers\"\r\n                    : category.level === 0\r\n                      ? \"Ajouter une catégorie\"\r\n                      : \"Ajouter une sous-catégorie\"}\r\n              </h2>\r\n              <Form\r\n                className={\r\n                  category[\"@type\"] === \"Universe\"\r\n                    ? \"form-parent-cat\"\r\n                    : \"form-cat-itemƒ\"\r\n                }\r\n              >\r\n                {message && message.type && message.text ? (\r\n                  <span\r\n                    className={\r\n                      message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n                    }\r\n                  >\r\n                    {message.text}\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Input\r\n                  {...state.name}\r\n                  onChange={(e) => {\r\n                    const cpState = { ...state };\r\n                    cpState.name.value = e.target.value;\r\n                    setState(cpState);\r\n                    setMessage(null);\r\n                  }}\r\n                />\r\n\r\n                {category[\"@type\"] === \"Universe\" ? (\r\n                  <>\r\n                    <Input\r\n                      {...state.nameCategory}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.nameCategory.value = e.target.value;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n\r\n                    <Input\r\n                      {...state.nameSubCategory}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.nameSubCategory.value = e.target.value;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n\r\n                    <SingleCheckbox\r\n                      {...state.requireSearchSubCategory}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.requireSearchSubCategory.value = e.target.checked;\r\n                        cpState.requireSearchSubCategory.error = false;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n\r\n                    <Input\r\n                      {...state.description}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.description.value = e.target.value;\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n                    <p className=\"form-label-title\">Image d'accueil</p>\r\n                    <div\r\n                      className={`image-service ${state.imageHome.error ? \"form-error\" : \"\"\r\n                        }`}\r\n                    >\r\n                      <img src={getPathImage(state.imageHome)} alt=\"\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"file\"\r\n                        id=\"uploadImageHome\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.imageHome.file = e.target.files[0];\r\n                          e.target.value = \"\";\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <div className=\"btns-file\">\r\n                        <label htmlFor=\"uploadImageHome\" className=\"edit-image\">\r\n                          <EditIcon />\r\n                        </label>\r\n                        {state.imageHome.value || state.imageHome.file ? (\r\n                          <button\r\n                            className=\"delete-image\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              const cpState = { ...state };\r\n                              cpState.imageHome.value = \"\";\r\n                              cpState.imageHome.file = null;\r\n                              setState(cpState);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <p className=\"form-label-title\">Image *</p>\r\n                    <div\r\n                      className={`image-service ${state.image.error ? \"form-error\" : \"\"\r\n                        }`}\r\n                    >\r\n                      <img src={getPathImage(state.image)} alt=\"\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"file\"\r\n                        id=\"uploadImage\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n\r\n                          cpState.image.file = e.target.files[0];\r\n                          e.target.value = \"\";\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <div className=\"btns-file\">\r\n                        <label htmlFor=\"uploadImage\" className=\"edit-image\">\r\n                          <EditIcon />\r\n                        </label>\r\n                        {state.image.value || state.image.file ? (\r\n                          <button\r\n                            className=\"delete-image\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              const cpState = { ...state };\r\n                              cpState.image.value = \"\";\r\n                              cpState.image.file = null;\r\n                              setState(cpState);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <Input\r\n                      {...state.filenameimage1}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.filenameimage1.value = e.target.value;\r\n\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n                    <p className=\"form-label-title\">Image Gauche vitrine *</p>\r\n                    <div\r\n                      className={`image-service ${state.filenameimage1.error ? \"form-error\" : \"\"\r\n                        }`}\r\n                    >\r\n                      <img src={getxPathImage(state.filenameimage1)} alt=\"\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"file\"\r\n                        id=\"uploadImage1\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.filenameimage1.file = e.target.files[0];\r\n                          e.target.value = \"\";\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <div className=\"btns-file\">\r\n                        <label htmlFor=\"uploadImage1\" className=\"edit-image\">\r\n                          <EditIcon />\r\n                        </label>\r\n                        {state.filenameimage1.value || state.filenameimage1.file ? (\r\n                          <button\r\n                            className=\"delete-image\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              const cpState = { ...state };\r\n                              cpState.filenameimage1.value = \"\";\r\n                              cpState.filenameimage1.file = null;\r\n                              setState(cpState);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <Input\r\n                      {...state.filenameimage2}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.filenameimage2.value = e.target.value;\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n                    <p className=\"form-label-title\">Image Centre vitrine *</p>\r\n                    <div\r\n                      className={`image-service ${state.filenameimage2.error ? \"form-error\" : \"\"\r\n                        }`}\r\n                    >\r\n                      <img src={getxPathImage(state.filenameimage2)} alt=\"\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"file\"\r\n                        id=\"uploadImage2\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.filenameimage2.file = e.target.files[0];\r\n                          e.target.value = \"\";\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <div className=\"btns-file\">\r\n                        <label htmlFor=\"uploadImage2\" className=\"edit-image\">\r\n                          <EditIcon />\r\n                        </label>\r\n                        {state.filenameimage2.value || state.filenameimage2.file ? (\r\n                          <button\r\n                            className=\"delete-image\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              const cpState = { ...state };\r\n                              cpState.filenameimage2.value = \"\";\r\n                              cpState.filenameimage2.file = null;\r\n                              setState(cpState);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n                    <Input\r\n                      {...state.filenameimage3}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.filenameimage3.value = e.target.value;\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n                    <p className=\"form-label-title\">Image Droite vitrine *</p>\r\n                    <div\r\n                      className={`image-service ${state.filenameimage3.error ? \"form-error\" : \"\"\r\n                        }`}\r\n                    >\r\n                      <img src={getxPathImage(state.filenameimage3)} alt=\"\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"file\"\r\n                        id=\"uploadImage3\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.filenameimage3.file = e.target.files[0];\r\n                          e.target.value = \"\";\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <div className=\"btns-file\">\r\n                        <label htmlFor=\"uploadImage3\" className=\"edit-image\">\r\n                          <EditIcon />\r\n                        </label>\r\n                        {state.filenameimage3.value || state.filenameimage3.file ? (\r\n                          <button\r\n                            className=\"delete-image\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              const cpState = { ...state };\r\n                              cpState.filenameimage3.value = \"\";\r\n                              cpState.filenameimage3.file = null;\r\n                              setState(cpState);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n                    <Input\r\n                      {...state.filenameanatomie}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.filenameanatomie.value = e.target.value;\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n\r\n                    <p className=\"form-label-title\">Image Anatomie *</p>\r\n                    <div\r\n                      className={`image-service ${state.filenameanatomie.error ? \"form-error\" : \"\"\r\n                        }`}\r\n                    >\r\n                      <img src={getxPathImage(state.filenameanatomie)} alt=\"\" />\r\n                      <input\r\n                        type=\"file\"\r\n                        name=\"file\"\r\n                        id=\"uploadImage4\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.filenameanatomie.file = e.target.files[0];\r\n                          e.target.value = \"\";\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <div className=\"btns-file\">\r\n                        <label htmlFor=\"uploadImage4\" className=\"edit-image\">\r\n                          <EditIcon />\r\n                        </label>\r\n                        {state.filenameanatomie.value || state.filenameanatomie.file ? (\r\n                          <button\r\n                            className=\"delete-image\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              const cpState = { ...state };\r\n                              cpState.filenameanatomie.value = \"\";\r\n                              cpState.filenameanatomie.file = null;\r\n                              setState(cpState);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </button>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <Input\r\n                      {...state.labelanatomie}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.labelanatomie.value = e.target.value;\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n\r\n\r\n\r\n                    <RadioButton\r\n                      {...state.bonusreparation}\r\n                      onChange={(val) => {\r\n                        const cpState = { ...state };\r\n                        cpState.bonusreparation.value = val.value;\r\n                        cpState.bonusreparation.error = false;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n\r\n                    <RadioButton\r\n                      {...state.enabled}\r\n                      onChange={(val) => {\r\n                        const cpState = { ...state };\r\n                        cpState.enabled.value = val.value;\r\n                        setState(cpState);\r\n                      }}\r\n                    />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <WysiwygEditor\r\n                      {...state.descriptionPictures}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.descriptionPictures.value = e || \"\";\r\n                        if (cpState.pictures.value.length) {\r\n                          cpState.pictures.value =\r\n                            cpState.pictures.value.filter(\r\n                              (picture) =>\r\n                                cpState.descriptionPictures.value.indexOf(\r\n                                  picture\r\n                                ) !== -1\r\n                            );\r\n                        }\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n                    <div className=\"btns-alings\">\r\n                      {category.name && (\r\n                        <ButtonDef\r\n                          className=\"btn-delete\"\r\n                          textButton=\"Supprimer\"\r\n                          spinner={isPending}\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            setShowModal(true);\r\n                            setDataModal({\r\n                              type: \"modal-save\",\r\n                              title: \"Confirmer la suppression\",\r\n                              action: \"deleteUniverse\",\r\n                            });\r\n                          }}\r\n                        />\r\n                      )}\r\n                      <ButtonDef\r\n                        textButton=\"Enregistrer\"\r\n                        spinner={isPending}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          saveUniverse();\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"btns-alings\">\r\n                      {category.name ? (\r\n                        <ButtonDef\r\n                          className=\"btn-delete\"\r\n                          textButton=\"Supprimer\"\r\n                          spinner={isPending}\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            setShowModal(true);\r\n                            setDataModal({\r\n                              type: \"modal-save\",\r\n                              title: \"Confirmer la suppression\",\r\n                              action: \"deleteCategory\",\r\n                            });\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      <ButtonDef\r\n                        textButton=\"Enregistrer\"\r\n                        spinner={isPending}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          saveCategory();\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    {!state.id.value ? (\r\n                      \"\"\r\n                    ) : category.totalServices ? (\r\n                      <div className=\"link-voir\">\r\n                        <Link to={getUrlServices(category)}>\r\n                          {\" \"}\r\n                          {category.totalServices} service(s) lié(s){\" \"}\r\n                        </Link>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"link-voir-0\">\r\n                        <Link to={\"#\"}> 0 service(s) lié(s) </Link>\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n\r\n                <PopinModal\r\n                  show={showModal}\r\n                  handleClose={() => {\r\n                    setShowModal(false);\r\n                  }}\r\n                  title={dataModal.title}\r\n                >\r\n                  <div className=\"btns-confirm\">\r\n                    <ButtonDef\r\n                      className=\"btn-light\"\r\n                      textButton=\"Non\"\r\n                      spinner={isPending}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setShowModal(false);\r\n                      }}\r\n                    />\r\n                    <ButtonDef\r\n                      textButton=\"Oui\"\r\n                      spinner={isPending}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        if (dataModal.action === \"deleteUniverse\") {\r\n                          deleteUniverse();\r\n                        } else if (dataModal.action === \"deleteCategory\") {\r\n                          deleteCategory();\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </PopinModal>\r\n              </Form>\r\n            </div>\r\n          </DashboardSide>\r\n        ) : null}\r\n      </BlocAdminContent>\r\n    </AdminBase>\r\n  );\r\n}\r\n"
        }
    ]
}