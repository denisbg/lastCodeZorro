{
    "sourceFile": "src/views/back/admin/services.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1708472322278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708472368261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import SelectCat from \"../../../components/categories/selectCat\";\r\n import DashboardContent from \"../../../components/dashboardContent\";\r\n import DashboardSide from \"../../../components/dashboardSide\";\r\n import { ButtonDef, Input } from \"../../../components/ui\";\r\n+import RadioButton from \"../../../components/ui-elements/radioButton\";\r\n import AdminBase from \"../../../theme/back/adminBase\";\r\n import * as vars from \"../../../vars\";\r\n import endPoints from \"../../../config/endPoints\";\r\n import connector from \"../../../connector\";\r\n"
                },
                {
                    "date": 1708699142036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n         { value: 0, label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n         { value: 1, label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n       ],\r\n     },\r\n+    \r\n     universe: {\r\n       name: \"universe\",\r\n       label: \"Univers\",\r\n       placeholder: \"Filtrer\",\r\n@@ -337,8 +338,9 @@\n       }`,\r\n       data: {\r\n         name: cpState.name.value,\r\n         description: cpState.description.value,\r\n+        bonusreparation:cpState.bonusReparation.value,\r\n         picture: cpState.picture.value,\r\n         universe: cpState.universe.value ? `${endPoints.ANONYMOUS_UNIVERSE}${cpState.universe.value}`: null,\r\n         categories: cpCategories,\r\n       },\r\n"
                },
                {
                    "date": 1708699258220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,9 +329,9 @@\n   const submitService = (cpState) => {\r\n     let cpCategories = cpState.categories.value.map(\r\n       (cat) => `${endPoints.ANONYMOUS_CATEGORY}${cat.value}`\r\n     );\r\n-\r\n+console.log(\"STEP PUT SERVICE\",cpState);\r\n     connector({\r\n       method: cpState.id.value ? \"put\" : \"post\",\r\n       url: `${endPoints.SERVICE}${\r\n         cpState.id.value ? \"/\" + cpState.id.value : \"\"\r\n"
                },
                {
                    "date": 1708700510811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,10 @@\n       required: false,\r\n       id: \"bonusreparation\",\r\n       value: \"0\",\r\n       options: [\r\n-        { value: 0, label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n-        { value: 1, label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n+        { value: \"0\", label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n+        { value: \"1\", label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n       ],\r\n     },\r\n     \r\n     universe: {\r\n"
                },
                {
                    "date": 1709027565217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -468,8 +468,9 @@\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n+  \r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709027807736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,834 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import { Form } from \"react-bootstrap\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import { DeleteIcon, EditIcon } from \"../../../assets/styles/icons\";\r\n+import SelectCat from \"../../../components/categories/selectCat\";\r\n+import DashboardContent from \"../../../components/dashboardContent\";\r\n+import DashboardSide from \"../../../components/dashboardSide\";\r\n+import { ButtonDef, Input } from \"../../../components/ui\";\r\n+import RadioButton from \"../../../components/ui-elements/radioButton\";\r\n+import AdminBase from \"../../../theme/back/adminBase\";\r\n+import * as vars from \"../../../vars\";\r\n+import endPoints from \"../../../config/endPoints\";\r\n+import connector from \"../../../connector\";\r\n+import noImage from \"../../../assets/images/noImage.png\";\r\n+import { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n+import { AddGreenIcon } from \"../../../assets/styles/icons\";\r\n+import Tableau from \"../../../components/ui-elements/tableau\";\r\n+import Select from \"../../../components/ui-elements/select\";\r\n+import FilterDefault from \"../../../components/filterDefault\";\r\n+import { clearErrors } from \"../../../helper/form\";\r\n+import ROUTES from \"../../../config/routes\";\r\n+import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n+import { useMediaQuery } from \"react-responsive\";\r\n+import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n+import {\r\n+  scrollTop,\r\n+  sortObjectsText,\r\n+  indexOfValue,\r\n+  isEqual,\r\n+  copy,\r\n+  getMsgError,\r\n+  getPathImage,\r\n+} from \"../../../helper/functions\";\r\n+\r\n+export default function Services() {\r\n+  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n+  const query = new URLSearchParams(useLocation().search);\r\n+  const defaultUniverse = query.get(\"universe\")\r\n+    ? parseInt(query.get(\"universe\"))\r\n+    : \"\";\r\n+  const defaultCategory = query.get(\"category\")\r\n+    ? parseInt(query.get(\"category\"))\r\n+    : \"\";\r\n+  const defaultSubCategory = query.get(\"subCategory\")\r\n+    ? parseInt(query.get(\"subCategory\"))\r\n+    : \"\";\r\n+  const perPageDesMob = isMobile ? 10 : 20;\r\n+  const [services, setServices] = useState([]);\r\n+  const [totalServices, setTotalServices] = useState(0);\r\n+  const [universesCategories, setUniversesCategories] = useState([]);\r\n+  const [message, setMessage] = useState(null);\r\n+  const [service, setService] = useState(false);\r\n+  const [perPage, setPerPage] = useState(perPageDesMob);\r\n+  const [pageIndex, setPageIndex] = useState(0);\r\n+  const [activeSort, setActiveSort] = useState(\"name\");\r\n+  const [switshSort, setSwitshSort] = useState(false);\r\n+  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n+  const [isPending, setIsPending] = useState(false);\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({ title: \"\", type: \"\" });\r\n+  const [state, setState] = useState({\r\n+    id: { value: null },\r\n+    name: {\r\n+      name: \"name\",\r\n+      label: \"Nom\",\r\n+      type: \"text\",\r\n+      required: true,\r\n+      placeholder: \"Nom\",\r\n+      value: \"\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+    },\r\n+    description: {\r\n+      name: \"description\",\r\n+      label: \"Description\",\r\n+      placeholder: \"Description\",\r\n+      value: \"\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      required: false,\r\n+      as: \"textarea\",\r\n+    },\r\n+    picture: { name: \"picture\", value: \"\", file: null, required: false },\r\n+    categories: {\r\n+      name: \"categories\",\r\n+      label: \"Sous-catégorie(s)\",\r\n+      placeholder: \"Affiner votre recherche\",\r\n+      value: [],\r\n+      options: [],\r\n+      required: true,\r\n+    },\r\n+    bonusreparation: {\r\n+      name: \"bonusreparation\",\r\n+      label: \"Eligible Bonus réparation\",\r\n+      required: false,\r\n+      id: \"bonusreparation\",\r\n+      value: \"0\",\r\n+      options: [\r\n+        { value: \"0\", label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n+        { value: \"1\", label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n+      ],\r\n+    },\r\n+    \r\n+    universe: {\r\n+      name: \"universe\",\r\n+      label: \"Univers\",\r\n+      placeholder: \"Filtrer\",\r\n+      options: [],\r\n+      value: \"\",\r\n+      isSearchable: true,\r\n+    },\r\n+  });\r\n+  const [filter, setFilter] = useState({\r\n+    universe: {\r\n+      placeholder: \"Univers\",\r\n+      options: [{ label: \"Tous les univers\", value: \"\", category: [] }],\r\n+      value: defaultUniverse,\r\n+      isSearchable: true,\r\n+    },\r\n+    category: {\r\n+      placeholder: \"catégorie(s)\",\r\n+      options: [{ label: \"Toutes les catégories\", value: \"\", subCategory: [] }],\r\n+      value: defaultCategory,\r\n+      isSearchable: true,\r\n+    },\r\n+    subCategory: {\r\n+      placeholder: \"Sous catégorie(s)\",\r\n+      options: [{ label: \"Toutes les sous-catégories\", value: \"\" }],\r\n+      value: defaultSubCategory,\r\n+      isSearchable: true,\r\n+    },\r\n+    activeElement: \"\",\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    getUniversesCategories();\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    getServices(false);\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [pageIndex, perPage, filter, activeSort, switshSort]);\r\n+\r\n+  useEffect(() => {\r\n+    const cpFilter = copy(filter);\r\n+    if (filter.activeElement === \"universe\") {\r\n+      cpFilter.category.options = [\r\n+        { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n+      ];\r\n+      if (filter.universe.value) {\r\n+        const index = indexOfValue(\r\n+          filter.universe.value,\r\n+          universesCategories,\r\n+          \"value\"\r\n+        );\r\n+        if (index > -1) {\r\n+          cpFilter.category.options.push(\r\n+            ...universesCategories[index].category\r\n+          );\r\n+          if (\r\n+            indexOfValue(\r\n+              filter.category.value,\r\n+              universesCategories[index].category,\r\n+              \"value\"\r\n+            ) === -1\r\n+          ) {\r\n+            cpFilter.category.value = \"\";\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!isEqual(cpFilter.category.options, filter.category.options)) {\r\n+        cpFilter.activeElement = \"category\";\r\n+        cpFilter.category.value = \"\";\r\n+        setFilter(cpFilter);\r\n+        setPageIndex(0);\r\n+      }\r\n+    } else if (filter.activeElement === \"category\") {\r\n+      cpFilter.subCategory.options = [\r\n+        { label: \"Toutes les sous-catégories\", value: \"\" },\r\n+      ];\r\n+      if (filter.category.value) {\r\n+        const index = indexOfValue(\r\n+          filter.category.value,\r\n+          filter.category.options,\r\n+          \"value\"\r\n+        );\r\n+        if (index > -1) {\r\n+          cpFilter.subCategory.options.push(\r\n+            ...filter.category.options[index].subCategory\r\n+          );\r\n+          if (\r\n+            indexOfValue(\r\n+              filter.subCategory.value,\r\n+              filter.category.options[index].subCategory,\r\n+              \"value\"\r\n+            ) === -1\r\n+          ) {\r\n+            cpFilter.subCategory.value = \"\";\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!isEqual(cpFilter.subCategory.options, filter.subCategory.options)) {\r\n+        cpFilter.activeElement = \"subCategory\";\r\n+        cpFilter.subCategory.value = \"\";\r\n+        setFilter(cpFilter);\r\n+        setPageIndex(0);\r\n+      }\r\n+    }\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [filter]);\r\n+\r\n+  const getServices = (refresh = false) => {\r\n+    let condition = \"\";\r\n+    if (filter.universe.value) {\r\n+      condition += `&categories.parent.universe.id=${filter.universe.value}`;\r\n+    }\r\n+    if (filter.category.value) {\r\n+      condition += `&categories.parent.id=${filter.category.value}`;\r\n+    }\r\n+    if (filter.subCategory.value) {\r\n+      condition += `&categories.id=${filter.subCategory.value}`;\r\n+    }\r\n+    const cpParamsUrlService = `page=${\r\n+      parseInt(pageIndex) + 1\r\n+    }&itemsPerPage=${perPage}&order[${activeSort}]=${\r\n+      switshSort ? \"desc\" : \"asc\"\r\n+    }${condition}`;\r\n+\r\n+    if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n+      setParamsUrlService(cpParamsUrlService);\r\n+      connector({\r\n+        method: \"get\",\r\n+        url: `${endPoints.ANONYMOUS_SERVICES_PRICES}?${cpParamsUrlService}`,\r\n+        success: (response) => {\r\n+          setServices(response.data[\"hydra:member\"] || []);\r\n+          setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n+        },\r\n+        catch: (error) => {\r\n+          console.log(error);\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const getUniversesCategories = () => {\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: endPoints.ANONYMOUS_UNIVERSES_CATEGORIES,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        const cpFilter = { ...filter };\r\n+        cpFilter.universe.options = [\r\n+          { label: \"Tous les univers\", value: \"\", category: [] },\r\n+        ];\r\n+        cpFilter.category.options = [\r\n+          { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n+        ];\r\n+        cpFilter.subCategory.options = [\r\n+          { label: \"Toutes les sous-catégories\", value: \"\" },\r\n+        ];\r\n+        let universeOptions = [];\r\n+        let categoryOptions = [];\r\n+        let categoriesOptions = [];\r\n+        let subCategoryOptions = [];\r\n+        for (let i = 0; i < arrayObj.length; i++) {\r\n+          let o = arrayObj[i];\r\n+          let category = [];\r\n+          for (let j = 0; j < o.categories.length; j++) {\r\n+            let subCategory = [];\r\n+            for (let k = 0; k < o.categories[j].children.length; k++) {\r\n+              const subRow = {\r\n+                label: o.categories[j].children[k].name,\r\n+                value: o.categories[j].children[k].id,\r\n+              };\r\n+              subCategoryOptions.push(subRow);\r\n+              subCategory.push(subRow);\r\n+            }\r\n+            const row = {\r\n+              label: o.categories[j].name,\r\n+              value: o.categories[j].id,\r\n+            };\r\n+            categoryOptions.push({ ...row, subCategory });\r\n+            category.push({ ...row, subCategory });\r\n+            categoriesOptions.push({ ...row, options: subCategory });\r\n+          }\r\n+          universeOptions.push({\r\n+            label: o.name,\r\n+            value: o.id,\r\n+            category,\r\n+          });\r\n+        }\r\n+        universeOptions = sortObjectsText(universeOptions, \"label\", \"asc\");\r\n+        cpFilter.universe.options = [\r\n+          ...cpFilter.universe.options,\r\n+          ...universeOptions,\r\n+        ];\r\n+        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n+        cpFilter.category.options = [\r\n+          ...cpFilter.category.options,\r\n+          ...categoryOptions,\r\n+        ];\r\n+        subCategoryOptions = sortObjectsText(\r\n+          subCategoryOptions,\r\n+          \"label\",\r\n+          \"asc\"\r\n+        );\r\n+        cpFilter.subCategory.options = [\r\n+          ...cpFilter.subCategory.options,\r\n+          ...subCategoryOptions,\r\n+        ];\r\n+        setUniversesCategories(cpFilter.universe.options);\r\n+        setFilter(cpFilter);\r\n+\r\n+        const cpState = { ...state };\r\n+        cpState.universe.options = [...cpFilter.universe.options];\r\n+        cpState.categories.options = [...categoriesOptions];\r\n+        setState(cpState);\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      },\r\n+    });\r\n+  };\r\n+\r\n+  const submitService = (cpState) => {\r\n+    let cpCategories = cpState.categories.value.map(\r\n+      (cat) => `${endPoints.ANONYMOUS_CATEGORY}${cat.value}`\r\n+    );\r\n+console.log(\"STEP PUT SERVICE\",cpState);\r\n+    connector({\r\n+      method: cpState.id.value ? \"put\" : \"post\",\r\n+      url: `${endPoints.SERVICE}${\r\n+        cpState.id.value ? \"/\" + cpState.id.value : \"\"\r\n+      }`,\r\n+      data: {\r\n+        name: cpState.name.value,\r\n+        description: cpState.description.value,\r\n+        bonusreparation:cpState.bonusreparation.value,\r\n+        picture: cpState.picture.value,\r\n+        universe: cpState.universe.value ? `${endPoints.ANONYMOUS_UNIVERSE}${cpState.universe.value}`: null,\r\n+        categories: cpCategories,\r\n+      },\r\n+      success: (response) => {\r\n+        getServices(true);\r\n+        response.data.categories = cpState.categories.value;\r\n+        setActiveService({\r\n+          ...response.data,\r\n+          totalBenefits: service.totalBenefits,\r\n+          universe : cpState.universe.value ? {id:cpState.universe.value}:\"\"\r\n+        });\r\n+        setIsPending(false);\r\n+        msgSuccess(\"Vos modifications ont bien été prises en compte.\");\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+        setIsPending(false);\r\n+        msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n+      },\r\n+    });\r\n+  };\r\n+\r\n+  const saveService = () => {\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      setMessage(null);\r\n+      setState(clearErrors(state));\r\n+      if (state.name.value && state.categories.value.length) {\r\n+        if (state.picture.file) {\r\n+          saveImage(state);\r\n+        } else {\r\n+          submitService(state);\r\n+        }\r\n+      } else {\r\n+        const msg = \"Vérifier si les champs obligatoires sont remplis.\";\r\n+        msgErrors({\r\n+          name: !state.name.value,\r\n+          categories: !state.categories.value.length,\r\n+          msg,\r\n+        });\r\n+        setIsPending(false);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const deleteService = () => {\r\n+    if (!isPending) {\r\n+      setIsPending(true);\r\n+      connector({\r\n+        method: \"delete\",\r\n+        url: endPoints.SERVICE + \"/\" + service.id,\r\n+        success: () => {\r\n+          getServices(true);\r\n+          setService(false);\r\n+          setIsPending(false);\r\n+          setShowModal(false);\r\n+          NotificationManager.success(\"Service supprimé avec succès.\", \"\");\r\n+        },\r\n+        catch: (error) => {\r\n+          setIsPending(false);\r\n+          setShowModal(false);\r\n+          msgErrors({ msg: getMsgError(error) });\r\n+        },\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const msgErrors = (e) => {\r\n+    scrollTop(\"side-content-dashboard\");\r\n+    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n+    const cpState = { ...state };\r\n+    if (e.name !== undefined) cpState.name.error = e.name;\r\n+    if (e.categories !== undefined) cpState.categories.error = e.categories;\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const msgSuccess = (text) => {\r\n+    scrollTop(\"side-content-dashboard\");\r\n+    if (text !== undefined) setMessage({ type: \"success\", text });\r\n+    setTimeout(() => {\r\n+      setMessage(null);\r\n+    }, 5000);\r\n+  };\r\n+\r\n+  const saveImage = (cpState) => {\r\n+    const data = new FormData();\r\n+    data.append(\"file\", cpState.picture.file);\r\n+    connector({\r\n+      method: \"post\",\r\n+      url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n+      data,\r\n+      success: (response) => {\r\n+        cpState.picture.file = null;\r\n+        cpState.picture.value = response.data.contentUrl;\r\n+        setState(cpState);\r\n+        submitService(cpState);\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      },\r\n+    });\r\n+  };\r\n+\r\n+  const setActiveRow = (item = {}) => {\r\n+    if (service && parseInt(item.id) === parseInt(service.id)) {\r\n+      setService(false);\r\n+    } else {\r\n+      setActiveService(item);\r\n+    }\r\n+  };\r\n+\r\n+  const setActiveService = (item = {}) => {\r\n+    setMessage(null);\r\n+    const cpState = { ...clearErrors(state) };\r\n+    if (!item.id) {\r\n+      item = {\r\n+        id: null,\r\n+        name: \"\",\r\n+        description: \"\",\r\n+        picture: null,\r\n+        universe: \"\",\r\n+        categories: [],\r\n+      };\r\n+    }\r\n+    cpState.id.value = item.id;\r\n+    cpState.name.value = item.name;\r\n+    cpState.description.value = item.description;\r\n+    cpState.picture.value = item.picture;\r\n+    cpState.bonusreparation = item.bonusreparation;\r\n+    cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n+    const options = [];\r\n+    for (let i = 0; i < item.categories.length; i++) {\r\n+      options.push({\r\n+        label: item.categories[i].name || item.categories[i].label,\r\n+        value: item.categories[i].id || item.categories[i].value,\r\n+      });\r\n+    }\r\n+    cpState.categories.value = options;\r\n+    cpState.picture.file = \"\";\r\n+    setState(cpState);\r\n+    setService(item);\r\n+  };\r\n+\r\n+  const getUrlBenefits = (item) => {\r\n+    return `${ROUTES.PRESTATIONS.url}?service=${item.id}`;\r\n+  };\r\n+\r\n+  const universeCategoriesOptions = () => {\r\n+    const cpState = { ...state };\r\n+    const categoriesOptions = [];\r\n+    const universeOptions = [...filter.universe.options];\r\n+    for (let i = 0; i < universeOptions.length; i++) {\r\n+      const option = universeOptions[i];\r\n+      if (\r\n+        option.value &&\r\n+        (!state.universe.value || state.universe.value === option.value)\r\n+      ) {\r\n+        option.category.map((obj) => {\r\n+          categoriesOptions.push({\r\n+            label: obj.label,\r\n+            value: obj.value,\r\n+            options: obj.subCategory,\r\n+          });\r\n+        });\r\n+      }\r\n+    }\r\n+    cpState.categories.options = [...categoriesOptions];\r\n+    setState(cpState);\r\n+  };\r\n+\r\n+  const rowRenderservices = (row) => (\r\n+    <div\r\n+      onClick={() => setActiveRow(row)}\r\n+      className={`divTableRow ${service.id === row.id ? \"active\" : \"\"}`}\r\n+      key={`row-${row.id}`}\r\n+    >\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Nom: </label>}\r\n+        <div>{row.name}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Prix moyen: </label>}\r\n+        <div>{parseFloat(row.averagePrice).toFixed(2)}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Prix min: </label>}\r\n+        <div>{parseFloat(row.minPrice).toFixed(2)}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Prix max: </label>}\r\n+        <div>{parseFloat(row.maxPrice).toFixed(2)}</div>\r\n+      </div>\r\n+      <div className=\"divTableCell\">\r\n+        {isMobile && <label> Commandes: </label>}\r\n+        <div>{row.totalCommands}</div>\r\n+      </div>\r\n+      {isMobile && (\r\n+        <div className=\"divTableCell m-action\">\r\n+          <div>\r\n+            <ButtonDef\r\n+              textButton=\"Voir le service\"\r\n+              onClick={() => setActiveRow(row)}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+\r\n+  return (\r\n+    <AdminBase>\r\n+      <BlocAdminContent>\r\n+        <DashboardContent titlePage=\"Services\" className=\"services-page\">\r\n+          <ServicesTableStyle>\r\n+            <ButtonDef\r\n+              spinner={isPending}\r\n+              onClick={() => setActiveService({})}\r\n+              textButton={\r\n+                <>\r\n+                  Nouveau service <AddGreenIcon />{\" \"}\r\n+                </>\r\n+              }\r\n+              className=\"btn-add\"\r\n+            />\r\n+            <FilterDefault\r\n+              className=\"services-filter\"\r\n+              formItems={\r\n+                <>\r\n+                  <Select\r\n+                    {...filter.universe}\r\n+                    onChange={(e) => {\r\n+                      const cpFilter = { ...filter };\r\n+                      cpFilter.universe.value = e.value;\r\n+                      cpFilter.activeElement = \"universe\";\r\n+                      setPageIndex(0);\r\n+                      setFilter(cpFilter);\r\n+                    }}\r\n+                  />\r\n+                  {filter.universe.value ? (\r\n+                    <Select\r\n+                      {...filter.category}\r\n+                      onChange={(e) => {\r\n+                        let cpFilter = { ...filter };\r\n+                        cpFilter.category.value = e.value;\r\n+                        cpFilter.activeElement = \"category\";\r\n+                        setPageIndex(0);\r\n+                        setFilter(cpFilter);\r\n+                      }}\r\n+                    />\r\n+                  ) : null}\r\n+\r\n+                  {filter.category.value ? (\r\n+                    <Select\r\n+                      {...filter.subCategory}\r\n+                      onChange={(e) => {\r\n+                        const cpFilter = { ...filter };\r\n+                        cpFilter.subCategory.value = e.value;\r\n+                        cpFilter.activeElement = \"subCategory\";\r\n+                        setPageIndex(0);\r\n+                        setFilter(cpFilter);\r\n+                      }}\r\n+                    />\r\n+                  ) : (\r\n+                    \"\"\r\n+                  )}\r\n+                </>\r\n+              }\r\n+            />\r\n+            <Tableau\r\n+              columns={[\r\n+                { key: \"name\", text: \"Nom\", sort: true },\r\n+                { key: \"averagePrice\", text: \"Prix moyen\", sort: true },\r\n+                { key: \"minPrice\", text: \"Prix min\", sort: true },\r\n+                { key: \"maxPrice\", text: \"Prix max\", sort: true },\r\n+                { key: \"commands\", text: \"Commandes\", sort: true },\r\n+              ]}\r\n+              perPage={perPage}\r\n+              setPerPage={setPerPage}\r\n+              pageIndex={pageIndex}\r\n+              setPageIndex={setPageIndex}\r\n+              activeSort={activeSort}\r\n+              setActiveSort={setActiveSort}\r\n+              switshSort={switshSort}\r\n+              setSwitshSort={setSwitshSort}\r\n+              pagination={true}\r\n+              totalItemsLength={totalServices}\r\n+              data={services}\r\n+              rowRender={rowRenderservices}\r\n+            />\r\n+          </ServicesTableStyle>\r\n+        </DashboardContent>\r\n+\r\n+        {service ? (\r\n+          <DashboardSide>\r\n+            {isMobile && (\r\n+              <>\r\n+                <CloseButton\r\n+                  onClick={(e) => {\r\n+                    e.preventDefault();\r\n+                    setService(false);\r\n+                  }}\r\n+                />\r\n+              </>\r\n+            )}\r\n+            <h2 className=\"title-side-dashboard\">\r\n+              {service.name ? service.name : \"Nouveau service\"}\r\n+            </h2>\r\n+            <Form>\r\n+              {message && message.type && message.text ? (\r\n+                <span\r\n+                  className={\r\n+                    message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n+                  }\r\n+                >\r\n+                  {message.text}\r\n+                </span>\r\n+              ) : (\r\n+                \"\"\r\n+              )}\r\n+              <Select\r\n+                {...state.universe}\r\n+                onChange={(e) => {\r\n+                  const cpState = { ...state };\r\n+                  if(e.value && cpState.universe.value !== e.value){\r\n+                    cpState.categories.value = [];\r\n+                  }\r\n+                  cpState.universe.value = e.value;\r\n+                  setState(cpState);\r\n+                  universeCategoriesOptions();\r\n+                }}\r\n+              />\r\n+              <SelectCat\r\n+                {...state.categories}\r\n+                onChangeCallback={(response) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.categories.value = response;\r\n+                  cpState.categories.error = false;\r\n+                  setState(cpState);\r\n+                  setMessage(null);\r\n+                }}\r\n+              />\r\n+              <Input\r\n+                {...state.name}\r\n+                onChange={(e) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.name.value = e.target.value;\r\n+                  cpState.name.error = false;\r\n+                  setState(cpState);\r\n+                  setMessage(null);\r\n+                }}\r\n+              />\r\n+              <RadioButton\r\n+                {...state.bonusreparation}\r\n+                onChange={(val) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.bonusreparation.value = val.value;\r\n+                  cpState.bonusreparation.error = false;\r\n+                  setState(cpState);\r\n+                  setMessage(null);\r\n+                }}\r\n+              />\r\n+              <div className=\"image-service\">\r\n+                <img src={getPathImage(state.picture)} alt=\"\" />\r\n+                <input\r\n+                  type=\"file\"\r\n+                  name=\"file\"\r\n+                  id=\"uploadImage\"\r\n+                  accept=\"image/png, image/jpeg\"\r\n+                  onChange={(e) => {\r\n+                    const cpState = { ...state };\r\n+                    cpState.picture.file = e.target.files[0];\r\n+                    e.target.value = \"\";\r\n+                    setState(cpState);\r\n+                    setMessage(null);\r\n+                  }}\r\n+                />\r\n+                <div className=\"btns-file\">\r\n+                  <label htmlFor=\"uploadImage\" className=\"edit-image\">\r\n+                    <EditIcon />\r\n+                  </label>\r\n+                  {state.picture.value || state.picture.file ? (\r\n+                    <button\r\n+                      className=\"delete-image\"\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        const cpState = { ...state };\r\n+                        cpState.picture.value = \"\";\r\n+                        cpState.picture.file = null;\r\n+                        setState(cpState);\r\n+                      }}\r\n+                    >\r\n+                      <DeleteIcon />\r\n+                    </button>\r\n+                  ) : (\r\n+                    \"\"\r\n+                  )}\r\n+                </div>\r\n+              </div>\r\n+              {/*<WysiwygEditor\r\n+                {...state.description}\r\n+                onChange={(e) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.description.value = e || \"\";\r\n+                  setState(cpState);\r\n+                  setMessage(null);\r\n+                }\r\n+              />*/}\r\n+              <Input\r\n+                {...state.description}\r\n+                onChange={(e) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.description.value = e.target.value;\r\n+                  setState(cpState);\r\n+                  setMessage(null);\r\n+                }}\r\n+              />\r\n+              <div className=\"btns-alings service-btns-action\">\r\n+                {service.name ? (\r\n+                  <ButtonDef\r\n+                    className=\"btn-delete\"\r\n+                    textButton=\"Supprimer\"\r\n+                    spinner={isPending}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({\r\n+                        type: \"modal-save\",\r\n+                        title: \"Confirmer la suppression\",\r\n+                      });\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                  />\r\n+                ) : null}\r\n+                <ButtonDef\r\n+                  textButton=\"Enregistrer\"\r\n+                  spinner={isPending}\r\n+                  onClick={(e) => {\r\n+                    e.preventDefault();\r\n+                    saveService();\r\n+                  }}\r\n+                />\r\n+              </div>\r\n+\r\n+              {!state.id.value ? (\r\n+                \"\"\r\n+              ) : service.totalBenefits ? (\r\n+                <div className=\"link-voir\">\r\n+                  <Link to={getUrlBenefits(service)}>\r\n+                    {\" \"}\r\n+                    {service.totalBenefits} prestation(s) lié(s){\" \"}\r\n+                  </Link>\r\n+                </div>\r\n+              ) : (\r\n+                <div className=\"link-voir-0\">\r\n+                  <Link to={\"#\"}> 0 prestation(s) lié(s) </Link>\r\n+                </div>\r\n+              )}\r\n+\r\n+              <PopinModal\r\n+                show={showModal}\r\n+                handleClose={() => {\r\n+                  setShowModal(false);\r\n+                }}\r\n+                title={dataModal.title}\r\n+              >\r\n+                <div className=\"btns-confirm\">\r\n+                  <ButtonDef\r\n+                    className=\"btn-light\"\r\n+                    textButton=\"Non\"\r\n+                    spinner={isPending}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setShowModal(false);\r\n+                    }}\r\n+                  />\r\n+                  <ButtonDef\r\n+                    textButton=\"Oui\"\r\n+                    spinner={isPending}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      deleteService();\r\n+                    }}\r\n+                  />\r\n+                </div>\r\n+              </PopinModal>\r\n+            </Form>\r\n+          </DashboardSide>\r\n+        ) : null}\r\n+      </BlocAdminContent>\r\n+    </AdminBase>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1709028277817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,842 +90,8 @@\n       value: [],\r\n       options: [],\r\n       required: true,\r\n     },\r\n-    bonusreparation: {\r\n-      name: \"bonusreparation\",\r\n-      label: \"Eligible Bonus réparation\",\r\n-      required: false,\r\n-      id: \"bonusreparation\",\r\n-      value: \"0\",\r\n-      options: [\r\n-        { value: \"0\", label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n-        { value: \"1\", label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n-      ],\r\n-    },\r\n-    \r\n-    universe: {\r\n-      name: \"universe\",\r\n-      label: \"Univers\",\r\n-      placeholder: \"Filtrer\",\r\n-      options: [],\r\n-      value: \"\",\r\n-      isSearchable: true,\r\n-    },\r\n-  });\r\n-  const [filter, setFilter] = useState({\r\n-    universe: {\r\n-      placeholder: \"Univers\",\r\n-      options: [{ label: \"Tous les univers\", value: \"\", category: [] }],\r\n-      value: defaultUniverse,\r\n-      isSearchable: true,\r\n-    },\r\n-    category: {\r\n-      placeholder: \"catégorie(s)\",\r\n-      options: [{ label: \"Toutes les catégories\", value: \"\", subCategory: [] }],\r\n-      value: defaultCategory,\r\n-      isSearchable: true,\r\n-    },\r\n-    subCategory: {\r\n-      placeholder: \"Sous catégorie(s)\",\r\n-      options: [{ label: \"Toutes les sous-catégories\", value: \"\" }],\r\n-      value: defaultSubCategory,\r\n-      isSearchable: true,\r\n-    },\r\n-    activeElement: \"\",\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    getUniversesCategories();\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    getServices(false);\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [pageIndex, perPage, filter, activeSort, switshSort]);\r\n-\r\n-  useEffect(() => {\r\n-    const cpFilter = copy(filter);\r\n-    if (filter.activeElement === \"universe\") {\r\n-      cpFilter.category.options = [\r\n-        { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n-      ];\r\n-      if (filter.universe.value) {\r\n-        const index = indexOfValue(\r\n-          filter.universe.value,\r\n-          universesCategories,\r\n-          \"value\"\r\n-        );\r\n-        if (index > -1) {\r\n-          cpFilter.category.options.push(\r\n-            ...universesCategories[index].category\r\n-          );\r\n-          if (\r\n-            indexOfValue(\r\n-              filter.category.value,\r\n-              universesCategories[index].category,\r\n-              \"value\"\r\n-            ) === -1\r\n-          ) {\r\n-            cpFilter.category.value = \"\";\r\n-          }\r\n-        }\r\n-      }\r\n-      if (!isEqual(cpFilter.category.options, filter.category.options)) {\r\n-        cpFilter.activeElement = \"category\";\r\n-        cpFilter.category.value = \"\";\r\n-        setFilter(cpFilter);\r\n-        setPageIndex(0);\r\n-      }\r\n-    } else if (filter.activeElement === \"category\") {\r\n-      cpFilter.subCategory.options = [\r\n-        { label: \"Toutes les sous-catégories\", value: \"\" },\r\n-      ];\r\n-      if (filter.category.value) {\r\n-        const index = indexOfValue(\r\n-          filter.category.value,\r\n-          filter.category.options,\r\n-          \"value\"\r\n-        );\r\n-        if (index > -1) {\r\n-          cpFilter.subCategory.options.push(\r\n-            ...filter.category.options[index].subCategory\r\n-          );\r\n-          if (\r\n-            indexOfValue(\r\n-              filter.subCategory.value,\r\n-              filter.category.options[index].subCategory,\r\n-              \"value\"\r\n-            ) === -1\r\n-          ) {\r\n-            cpFilter.subCategory.value = \"\";\r\n-          }\r\n-        }\r\n-      }\r\n-      if (!isEqual(cpFilter.subCategory.options, filter.subCategory.options)) {\r\n-        cpFilter.activeElement = \"subCategory\";\r\n-        cpFilter.subCategory.value = \"\";\r\n-        setFilter(cpFilter);\r\n-        setPageIndex(0);\r\n-      }\r\n-    }\r\n-    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n-  }, [filter]);\r\n-\r\n-  const getServices = (refresh = false) => {\r\n-    let condition = \"\";\r\n-    if (filter.universe.value) {\r\n-      condition += `&categories.parent.universe.id=${filter.universe.value}`;\r\n-    }\r\n-    if (filter.category.value) {\r\n-      condition += `&categories.parent.id=${filter.category.value}`;\r\n-    }\r\n-    if (filter.subCategory.value) {\r\n-      condition += `&categories.id=${filter.subCategory.value}`;\r\n-    }\r\n-    const cpParamsUrlService = `page=${\r\n-      parseInt(pageIndex) + 1\r\n-    }&itemsPerPage=${perPage}&order[${activeSort}]=${\r\n-      switshSort ? \"desc\" : \"asc\"\r\n-    }${condition}`;\r\n-\r\n-    if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n-      setParamsUrlService(cpParamsUrlService);\r\n-      connector({\r\n-        method: \"get\",\r\n-        url: `${endPoints.ANONYMOUS_SERVICES_PRICES}?${cpParamsUrlService}`,\r\n-        success: (response) => {\r\n-          setServices(response.data[\"hydra:member\"] || []);\r\n-          setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n-        },\r\n-        catch: (error) => {\r\n-          console.log(error);\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const getUniversesCategories = () => {\r\n-    connector({\r\n-      method: \"get\",\r\n-      url: endPoints.ANONYMOUS_UNIVERSES_CATEGORIES,\r\n-      data: {},\r\n-      success: (response) => {\r\n-        const arrayObj = response.data[\"hydra:member\"] || [];\r\n-        const cpFilter = { ...filter };\r\n-        cpFilter.universe.options = [\r\n-          { label: \"Tous les univers\", value: \"\", category: [] },\r\n-        ];\r\n-        cpFilter.category.options = [\r\n-          { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n-        ];\r\n-        cpFilter.subCategory.options = [\r\n-          { label: \"Toutes les sous-catégories\", value: \"\" },\r\n-        ];\r\n-        let universeOptions = [];\r\n-        let categoryOptions = [];\r\n-        let categoriesOptions = [];\r\n-        let subCategoryOptions = [];\r\n-        for (let i = 0; i < arrayObj.length; i++) {\r\n-          let o = arrayObj[i];\r\n-          let category = [];\r\n-          for (let j = 0; j < o.categories.length; j++) {\r\n-            let subCategory = [];\r\n-            for (let k = 0; k < o.categories[j].children.length; k++) {\r\n-              const subRow = {\r\n-                label: o.categories[j].children[k].name,\r\n-                value: o.categories[j].children[k].id,\r\n-              };\r\n-              subCategoryOptions.push(subRow);\r\n-              subCategory.push(subRow);\r\n-            }\r\n-            const row = {\r\n-              label: o.categories[j].name,\r\n-              value: o.categories[j].id,\r\n-            };\r\n-            categoryOptions.push({ ...row, subCategory });\r\n-            category.push({ ...row, subCategory });\r\n-            categoriesOptions.push({ ...row, options: subCategory });\r\n-          }\r\n-          universeOptions.push({\r\n-            label: o.name,\r\n-            value: o.id,\r\n-            category,\r\n-          });\r\n-        }\r\n-        universeOptions = sortObjectsText(universeOptions, \"label\", \"asc\");\r\n-        cpFilter.universe.options = [\r\n-          ...cpFilter.universe.options,\r\n-          ...universeOptions,\r\n-        ];\r\n-        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n-        cpFilter.category.options = [\r\n-          ...cpFilter.category.options,\r\n-          ...categoryOptions,\r\n-        ];\r\n-        subCategoryOptions = sortObjectsText(\r\n-          subCategoryOptions,\r\n-          \"label\",\r\n-          \"asc\"\r\n-        );\r\n-        cpFilter.subCategory.options = [\r\n-          ...cpFilter.subCategory.options,\r\n-          ...subCategoryOptions,\r\n-        ];\r\n-        setUniversesCategories(cpFilter.universe.options);\r\n-        setFilter(cpFilter);\r\n-\r\n-        const cpState = { ...state };\r\n-        cpState.universe.options = [...cpFilter.universe.options];\r\n-        cpState.categories.options = [...categoriesOptions];\r\n-        setState(cpState);\r\n-      },\r\n-      catch: (error) => {\r\n-        console.log(error);\r\n-      },\r\n-    });\r\n-  };\r\n-\r\n-  const submitService = (cpState) => {\r\n-    let cpCategories = cpState.categories.value.map(\r\n-      (cat) => `${endPoints.ANONYMOUS_CATEGORY}${cat.value}`\r\n-    );\r\n-console.log(\"STEP PUT SERVICE\",cpState);\r\n-    connector({\r\n-      method: cpState.id.value ? \"put\" : \"post\",\r\n-      url: `${endPoints.SERVICE}${\r\n-        cpState.id.value ? \"/\" + cpState.id.value : \"\"\r\n-      }`,\r\n-      data: {\r\n-        name: cpState.name.value,\r\n-        description: cpState.description.value,\r\n-        bonusreparation:cpState.bonusreparation.value,\r\n-        picture: cpState.picture.value,\r\n-        universe: cpState.universe.value ? `${endPoints.ANONYMOUS_UNIVERSE}${cpState.universe.value}`: null,\r\n-        categories: cpCategories,\r\n-      },\r\n-      success: (response) => {\r\n-        getServices(true);\r\n-        response.data.categories = cpState.categories.value;\r\n-        setActiveService({\r\n-          ...response.data,\r\n-          totalBenefits: service.totalBenefits,\r\n-          universe : cpState.universe.value ? {id:cpState.universe.value}:\"\"\r\n-        });\r\n-        setIsPending(false);\r\n-        msgSuccess(\"Vos modifications ont bien été prises en compte.\");\r\n-      },\r\n-      catch: (error) => {\r\n-        console.log(error);\r\n-        setIsPending(false);\r\n-        msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n-      },\r\n-    });\r\n-  };\r\n-\r\n-  const saveService = () => {\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      setMessage(null);\r\n-      setState(clearErrors(state));\r\n-      if (state.name.value && state.categories.value.length) {\r\n-        if (state.picture.file) {\r\n-          saveImage(state);\r\n-        } else {\r\n-          submitService(state);\r\n-        }\r\n-      } else {\r\n-        const msg = \"Vérifier si les champs obligatoires sont remplis.\";\r\n-        msgErrors({\r\n-          name: !state.name.value,\r\n-          categories: !state.categories.value.length,\r\n-          msg,\r\n-        });\r\n-        setIsPending(false);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  const deleteService = () => {\r\n-    if (!isPending) {\r\n-      setIsPending(true);\r\n-      connector({\r\n-        method: \"delete\",\r\n-        url: endPoints.SERVICE + \"/\" + service.id,\r\n-        success: () => {\r\n-          getServices(true);\r\n-          setService(false);\r\n-          setIsPending(false);\r\n-          setShowModal(false);\r\n-          NotificationManager.success(\"Service supprimé avec succès.\", \"\");\r\n-        },\r\n-        catch: (error) => {\r\n-          setIsPending(false);\r\n-          setShowModal(false);\r\n-          msgErrors({ msg: getMsgError(error) });\r\n-        },\r\n-      });\r\n-    }\r\n-  };\r\n-\r\n-  const msgErrors = (e) => {\r\n-    scrollTop(\"side-content-dashboard\");\r\n-    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n-    const cpState = { ...state };\r\n-    if (e.name !== undefined) cpState.name.error = e.name;\r\n-    if (e.categories !== undefined) cpState.categories.error = e.categories;\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const msgSuccess = (text) => {\r\n-    scrollTop(\"side-content-dashboard\");\r\n-    if (text !== undefined) setMessage({ type: \"success\", text });\r\n-    setTimeout(() => {\r\n-      setMessage(null);\r\n-    }, 5000);\r\n-  };\r\n-\r\n-  const saveImage = (cpState) => {\r\n-    const data = new FormData();\r\n-    data.append(\"file\", cpState.picture.file);\r\n-    connector({\r\n-      method: \"post\",\r\n-      url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n-      data,\r\n-      success: (response) => {\r\n-        cpState.picture.file = null;\r\n-        cpState.picture.value = response.data.contentUrl;\r\n-        setState(cpState);\r\n-        submitService(cpState);\r\n-      },\r\n-      catch: (error) => {\r\n-        console.log(error);\r\n-      },\r\n-    });\r\n-  };\r\n-\r\n-  const setActiveRow = (item = {}) => {\r\n-    if (service && parseInt(item.id) === parseInt(service.id)) {\r\n-      setService(false);\r\n-    } else {\r\n-      setActiveService(item);\r\n-    }\r\n-  };\r\n-\r\n-  const setActiveService = (item = {}) => {\r\n-    setMessage(null);\r\n-    const cpState = { ...clearErrors(state) };\r\n-    if (!item.id) {\r\n-      item = {\r\n-        id: null,\r\n-        name: \"\",\r\n-        description: \"\",\r\n-        picture: null,\r\n-        universe: \"\",\r\n-        categories: [],\r\n-      };\r\n-    }\r\n-    cpState.id.value = item.id;\r\n-    cpState.name.value = item.name;\r\n-    cpState.description.value = item.description;\r\n-    cpState.picture.value = item.picture;\r\n-    cpState.bonusreparation = item.bonusreparation;\r\n-    cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n-    const options = [];\r\n-    for (let i = 0; i < item.categories.length; i++) {\r\n-      options.push({\r\n-        label: item.categories[i].name || item.categories[i].label,\r\n-        value: item.categories[i].id || item.categories[i].value,\r\n-      });\r\n-    }\r\n-    cpState.categories.value = options;\r\n-    cpState.picture.file = \"\";\r\n-    setState(cpState);\r\n-    setService(item);\r\n-  };\r\n-\r\n-  const getUrlBenefits = (item) => {\r\n-    return `${ROUTES.PRESTATIONS.url}?service=${item.id}`;\r\n-  };\r\n-\r\n-  const universeCategoriesOptions = () => {\r\n-    const cpState = { ...state };\r\n-    const categoriesOptions = [];\r\n-    const universeOptions = [...filter.universe.options];\r\n-    for (let i = 0; i < universeOptions.length; i++) {\r\n-      const option = universeOptions[i];\r\n-      if (\r\n-        option.value &&\r\n-        (!state.universe.value || state.universe.value === option.value)\r\n-      ) {\r\n-        option.category.map((obj) => {\r\n-          categoriesOptions.push({\r\n-            label: obj.label,\r\n-            value: obj.value,\r\n-            options: obj.subCategory,\r\n-          });\r\n-        });\r\n-      }\r\n-    }\r\n-    cpState.categories.options = [...categoriesOptions];\r\n-    setState(cpState);\r\n-  };\r\n-\r\n-  const rowRenderservices = (row) => (\r\n-    <div\r\n-      onClick={() => setActiveRow(row)}\r\n-      className={`divTableRow ${service.id === row.id ? \"active\" : \"\"}`}\r\n-      key={`row-${row.id}`}\r\n-    >\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Nom: </label>}\r\n-        <div>{row.name}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Prix moyen: </label>}\r\n-        <div>{parseFloat(row.averagePrice).toFixed(2)}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Prix min: </label>}\r\n-        <div>{parseFloat(row.minPrice).toFixed(2)}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Prix max: </label>}\r\n-        <div>{parseFloat(row.maxPrice).toFixed(2)}</div>\r\n-      </div>\r\n-      <div className=\"divTableCell\">\r\n-        {isMobile && <label> Commandes: </label>}\r\n-        <div>{row.totalCommands}</div>\r\n-      </div>\r\n-      {isMobile && (\r\n-        <div className=\"divTableCell m-action\">\r\n-          <div>\r\n-            <ButtonDef\r\n-              textButton=\"Voir le service\"\r\n-              onClick={() => setActiveRow(row)}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-\r\n-  return (\r\n-    <AdminBase>\r\n-      <BlocAdminContent>\r\n-        <DashboardContent titlePage=\"Services\" className=\"services-page\">\r\n-          <ServicesTableStyle>\r\n-            <ButtonDef\r\n-              spinner={isPending}\r\n-              onClick={() => setActiveService({})}\r\n-              textButton={\r\n-                <>\r\n-                  Nouveau service <AddGreenIcon />{\" \"}\r\n-                </>\r\n-              }\r\n-              className=\"btn-add\"\r\n-            />\r\n-            <FilterDefault\r\n-              className=\"services-filter\"\r\n-              formItems={\r\n-                <>\r\n-                  <Select\r\n-                    {...filter.universe}\r\n-                    onChange={(e) => {\r\n-                      const cpFilter = { ...filter };\r\n-                      cpFilter.universe.value = e.value;\r\n-                      cpFilter.activeElement = \"universe\";\r\n-                      setPageIndex(0);\r\n-                      setFilter(cpFilter);\r\n-                    }}\r\n-                  />\r\n-                  {filter.universe.value ? (\r\n-                    <Select\r\n-                      {...filter.category}\r\n-                      onChange={(e) => {\r\n-                        let cpFilter = { ...filter };\r\n-                        cpFilter.category.value = e.value;\r\n-                        cpFilter.activeElement = \"category\";\r\n-                        setPageIndex(0);\r\n-                        setFilter(cpFilter);\r\n-                      }}\r\n-                    />\r\n-                  ) : null}\r\n-\r\n-                  {filter.category.value ? (\r\n-                    <Select\r\n-                      {...filter.subCategory}\r\n-                      onChange={(e) => {\r\n-                        const cpFilter = { ...filter };\r\n-                        cpFilter.subCategory.value = e.value;\r\n-                        cpFilter.activeElement = \"subCategory\";\r\n-                        setPageIndex(0);\r\n-                        setFilter(cpFilter);\r\n-                      }}\r\n-                    />\r\n-                  ) : (\r\n-                    \"\"\r\n-                  )}\r\n-                </>\r\n-              }\r\n-            />\r\n-            <Tableau\r\n-              columns={[\r\n-                { key: \"name\", text: \"Nom\", sort: true },\r\n-                { key: \"averagePrice\", text: \"Prix moyen\", sort: true },\r\n-                { key: \"minPrice\", text: \"Prix min\", sort: true },\r\n-                { key: \"maxPrice\", text: \"Prix max\", sort: true },\r\n-                { key: \"commands\", text: \"Commandes\", sort: true },\r\n-              ]}\r\n-              perPage={perPage}\r\n-              setPerPage={setPerPage}\r\n-              pageIndex={pageIndex}\r\n-              setPageIndex={setPageIndex}\r\n-              activeSort={activeSort}\r\n-              setActiveSort={setActiveSort}\r\n-              switshSort={switshSort}\r\n-              setSwitshSort={setSwitshSort}\r\n-              pagination={true}\r\n-              totalItemsLength={totalServices}\r\n-              data={services}\r\n-              rowRender={rowRenderservices}\r\n-            />\r\n-          </ServicesTableStyle>\r\n-        </DashboardContent>\r\n-\r\n-        {service ? (\r\n-          <DashboardSide>\r\n-            {isMobile && (\r\n-              <>\r\n-                <CloseButton\r\n-                  onClick={(e) => {\r\n-                    e.preventDefault();\r\n-                    setService(false);\r\n-                  }}\r\n-                />\r\n-              </>\r\n-            )}\r\n-            <h2 className=\"title-side-dashboard\">\r\n-              {service.name ? service.name : \"Nouveau service\"}\r\n-            </h2>\r\n-            <Form>\r\n-              {message && message.type && message.text ? (\r\n-                <span\r\n-                  className={\r\n-                    message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n-                  }\r\n-                >\r\n-                  {message.text}\r\n-                </span>\r\n-              ) : (\r\n-                \"\"\r\n-              )}\r\n-              <Select\r\n-                {...state.universe}\r\n-                onChange={(e) => {\r\n-                  const cpState = { ...state };\r\n-                  if(e.value && cpState.universe.value !== e.value){\r\n-                    cpState.categories.value = [];\r\n-                  }\r\n-                  cpState.universe.value = e.value;\r\n-                  setState(cpState);\r\n-                  universeCategoriesOptions();\r\n-                }}\r\n-              />\r\n-              <SelectCat\r\n-                {...state.categories}\r\n-                onChangeCallback={(response) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.categories.value = response;\r\n-                  cpState.categories.error = false;\r\n-                  setState(cpState);\r\n-                  setMessage(null);\r\n-                }}\r\n-              />\r\n-              <Input\r\n-                {...state.name}\r\n-                onChange={(e) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.name.value = e.target.value;\r\n-                  cpState.name.error = false;\r\n-                  setState(cpState);\r\n-                  setMessage(null);\r\n-                }}\r\n-              />\r\n-              <RadioButton\r\n-                {...state.bonusreparation}\r\n-                onChange={(val) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.bonusreparation.value = val.value;\r\n-                  cpState.bonusreparation.error = false;\r\n-                  setState(cpState);\r\n-                  setMessage(null);\r\n-                }}\r\n-              />\r\n-              <div className=\"image-service\">\r\n-                <img src={getPathImage(state.picture)} alt=\"\" />\r\n-                <input\r\n-                  type=\"file\"\r\n-                  name=\"file\"\r\n-                  id=\"uploadImage\"\r\n-                  accept=\"image/png, image/jpeg\"\r\n-                  onChange={(e) => {\r\n-                    const cpState = { ...state };\r\n-                    cpState.picture.file = e.target.files[0];\r\n-                    e.target.value = \"\";\r\n-                    setState(cpState);\r\n-                    setMessage(null);\r\n-                  }}\r\n-                />\r\n-                <div className=\"btns-file\">\r\n-                  <label htmlFor=\"uploadImage\" className=\"edit-image\">\r\n-                    <EditIcon />\r\n-                  </label>\r\n-                  {state.picture.value || state.picture.file ? (\r\n-                    <button\r\n-                      className=\"delete-image\"\r\n-                      onClick={(e) => {\r\n-                        e.preventDefault();\r\n-                        const cpState = { ...state };\r\n-                        cpState.picture.value = \"\";\r\n-                        cpState.picture.file = null;\r\n-                        setState(cpState);\r\n-                      }}\r\n-                    >\r\n-                      <DeleteIcon />\r\n-                    </button>\r\n-                  ) : (\r\n-                    \"\"\r\n-                  )}\r\n-                </div>\r\n-              </div>\r\n-              {/*<WysiwygEditor\r\n-                {...state.description}\r\n-                onChange={(e) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.description.value = e || \"\";\r\n-                  setState(cpState);\r\n-                  setMessage(null);\r\n-                }\r\n-              />*/}\r\n-              <Input\r\n-                {...state.description}\r\n-                onChange={(e) => {\r\n-                  const cpState = { ...state };\r\n-                  cpState.description.value = e.target.value;\r\n-                  setState(cpState);\r\n-                  setMessage(null);\r\n-                }}\r\n-              />\r\n-              <div className=\"btns-alings service-btns-action\">\r\n-                {service.name ? (\r\n-                  <ButtonDef\r\n-                    className=\"btn-delete\"\r\n-                    textButton=\"Supprimer\"\r\n-                    spinner={isPending}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setDataModal({\r\n-                        type: \"modal-save\",\r\n-                        title: \"Confirmer la suppression\",\r\n-                      });\r\n-                      setShowModal(true);\r\n-                    }}\r\n-                  />\r\n-                ) : null}\r\n-                <ButtonDef\r\n-                  textButton=\"Enregistrer\"\r\n-                  spinner={isPending}\r\n-                  onClick={(e) => {\r\n-                    e.preventDefault();\r\n-                    saveService();\r\n-                  }}\r\n-                />\r\n-              </div>\r\n-\r\n-              {!state.id.value ? (\r\n-                \"\"\r\n-              ) : service.totalBenefits ? (\r\n-                <div className=\"link-voir\">\r\n-                  <Link to={getUrlBenefits(service)}>\r\n-                    {\" \"}\r\n-                    {service.totalBenefits} prestation(s) lié(s){\" \"}\r\n-                  </Link>\r\n-                </div>\r\n-              ) : (\r\n-                <div className=\"link-voir-0\">\r\n-                  <Link to={\"#\"}> 0 prestation(s) lié(s) </Link>\r\n-                </div>\r\n-              )}\r\n-\r\n-              <PopinModal\r\n-                show={showModal}\r\n-                handleClose={() => {\r\n-                  setShowModal(false);\r\n-                }}\r\n-                title={dataModal.title}\r\n-              >\r\n-                <div className=\"btns-confirm\">\r\n-                  <ButtonDef\r\n-                    className=\"btn-light\"\r\n-                    textButton=\"Non\"\r\n-                    spinner={isPending}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      setShowModal(false);\r\n-                    }}\r\n-                  />\r\n-                  <ButtonDef\r\n-                    textButton=\"Oui\"\r\n-                    spinner={isPending}\r\n-                    onClick={(e) => {\r\n-                      e.preventDefault();\r\n-                      deleteService();\r\n-                    }}\r\n-                  />\r\n-                </div>\r\n-              </PopinModal>\r\n-            </Form>\r\n-          </DashboardSide>\r\n-        ) : null}\r\n-      </BlocAdminContent>\r\n-    </AdminBase>\r\n-  );\r\n-}\r\n-import React, { useEffect, useState } from \"react\";\r\n-import { Form } from \"react-bootstrap\";\r\n-import { Link, useLocation } from \"react-router-dom\";\r\n-import { NotificationManager } from \"react-notifications\";\r\n-import { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import { DeleteIcon, EditIcon } from \"../../../assets/styles/icons\";\r\n-import SelectCat from \"../../../components/categories/selectCat\";\r\n-import DashboardContent from \"../../../components/dashboardContent\";\r\n-import DashboardSide from \"../../../components/dashboardSide\";\r\n-import { ButtonDef, Input } from \"../../../components/ui\";\r\n-import RadioButton from \"../../../components/ui-elements/radioButton\";\r\n-import AdminBase from \"../../../theme/back/adminBase\";\r\n-import * as vars from \"../../../vars\";\r\n-import endPoints from \"../../../config/endPoints\";\r\n-import connector from \"../../../connector\";\r\n-import noImage from \"../../../assets/images/noImage.png\";\r\n-import { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\n-import { AddGreenIcon } from \"../../../assets/styles/icons\";\r\n-import Tableau from \"../../../components/ui-elements/tableau\";\r\n-import Select from \"../../../components/ui-elements/select\";\r\n-import FilterDefault from \"../../../components/filterDefault\";\r\n-import { clearErrors } from \"../../../helper/form\";\r\n-import ROUTES from \"../../../config/routes\";\r\n-import PopinModal from \"../../../components/ui-elements/popinModal\";\r\n-import { useMediaQuery } from \"react-responsive\";\r\n-import CloseButton from \"../../../components/ui-elements/closeButton\";\r\n-import {\r\n-  scrollTop,\r\n-  sortObjectsText,\r\n-  indexOfValue,\r\n-  isEqual,\r\n-  copy,\r\n-  getMsgError,\r\n-  getPathImage,\r\n-} from \"../../../helper/functions\";\r\n-\r\n-export default function Services() {\r\n-  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n-  const query = new URLSearchParams(useLocation().search);\r\n-  const defaultUniverse = query.get(\"universe\")\r\n-    ? parseInt(query.get(\"universe\"))\r\n-    : \"\";\r\n-  const defaultCategory = query.get(\"category\")\r\n-    ? parseInt(query.get(\"category\"))\r\n-    : \"\";\r\n-  const defaultSubCategory = query.get(\"subCategory\")\r\n-    ? parseInt(query.get(\"subCategory\"))\r\n-    : \"\";\r\n-  const perPageDesMob = isMobile ? 10 : 20;\r\n-  const [services, setServices] = useState([]);\r\n-  const [totalServices, setTotalServices] = useState(0);\r\n-  const [universesCategories, setUniversesCategories] = useState([]);\r\n-  const [message, setMessage] = useState(null);\r\n-  const [service, setService] = useState(false);\r\n-  const [perPage, setPerPage] = useState(perPageDesMob);\r\n-  const [pageIndex, setPageIndex] = useState(0);\r\n-  const [activeSort, setActiveSort] = useState(\"name\");\r\n-  const [switshSort, setSwitshSort] = useState(false);\r\n-  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n-  const [isPending, setIsPending] = useState(false);\r\n-  const [showModal, setShowModal] = useState(false);\r\n-  const [dataModal, setDataModal] = useState({ title: \"\", type: \"\" });\r\n-  const [state, setState] = useState({\r\n-    id: { value: null },\r\n-    name: {\r\n-      name: \"name\",\r\n-      label: \"Nom\",\r\n-      type: \"text\",\r\n-      required: true,\r\n-      placeholder: \"Nom\",\r\n-      value: \"\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-    },\r\n-    description: {\r\n-      name: \"description\",\r\n-      label: \"Description\",\r\n-      placeholder: \"Description\",\r\n-      value: \"\",\r\n-      error: false,\r\n-      errorMessage: \"\",\r\n-      required: false,\r\n-      as: \"textarea\",\r\n-    },\r\n-    picture: { name: \"picture\", value: \"\", file: null, required: false },\r\n-    categories: {\r\n-      name: \"categories\",\r\n-      label: \"Sous-catégorie(s)\",\r\n-      placeholder: \"Affiner votre recherche\",\r\n-      value: [],\r\n-      options: [],\r\n-      required: true,\r\n-    },\r\n     bonusReparation: {\r\n       name: \"bonusreparation\",\r\n       label: \"Eligible Bonus réparation\",\r\n       required: false,\r\n@@ -1302,9 +468,9 @@\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-  \r\n+  cpState.bonusReparation = item.bonusReparation;\r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709028528676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -468,9 +468,9 @@\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-  cpState.bonusReparation = item.bonusReparation;\r\n+    cpState.bonusReparation = item.bonusReparation;\r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709028706366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,10 @@\n       required: false,\r\n       id: \"bonusreparation\",\r\n       value: \"0\",\r\n       options: [\r\n-        { value: \"0\", label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n-        { value: \"1\", label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n+        { value: 0, label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n+        { value: 1, label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n       ],\r\n     },\r\n     \r\n     universe: {\r\n"
                },
                {
                    "date": 1709028895811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,10 @@\n       required: false,\r\n       id: \"bonusreparation\",\r\n       value: \"0\",\r\n       options: [\r\n-        { value: 0, label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n-        { value: 1, label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n+        { value: \"0\", label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n+        { value: \"1\", label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n       ],\r\n     },\r\n     \r\n     universe: {\r\n@@ -468,9 +468,9 @@\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-    cpState.bonusReparation = item.bonusReparation;\r\n+  \r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709028945196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,17 +460,18 @@\n         id: null,\r\n         name: \"\",\r\n         description: \"\",\r\n         picture: null,\r\n+        bonusReparation:null,\r\n         universe: \"\",\r\n         categories: [],\r\n       };\r\n     }\r\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-  \r\n+    cpState.bonusReparation = item.bonusReparation;\r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709029110730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n       value: [],\r\n       options: [],\r\n       required: true,\r\n     },\r\n-    bonusReparation: {\r\n+    bonusreparation: {\r\n       name: \"bonusreparation\",\r\n       label: \"Eligible Bonus réparation\",\r\n       required: false,\r\n       id: \"bonusreparation\",\r\n"
                },
                {
                    "date": 1709029246018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,13 +95,10 @@\n       name: \"bonusreparation\",\r\n       label: \"Eligible Bonus réparation\",\r\n       required: false,\r\n       id: \"bonusreparation\",\r\n-      value: \"0\",\r\n-      options: [\r\n-        { value: \"0\", label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n-        { value: \"1\", label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n-      ],\r\n+      value: \"0\"\r\n+     \r\n     },\r\n     \r\n     universe: {\r\n       name: \"universe\",\r\n"
                },
                {
                    "date": 1709029268541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,16 +90,9 @@\n       value: [],\r\n       options: [],\r\n       required: true,\r\n     },\r\n-    bonusreparation: {\r\n-      name: \"bonusreparation\",\r\n-      label: \"Eligible Bonus réparation\",\r\n-      required: false,\r\n-      id: \"bonusreparation\",\r\n-      value: \"0\"\r\n-     \r\n-    },\r\n+\r\n     \r\n     universe: {\r\n       name: \"universe\",\r\n       label: \"Univers\",\r\n"
                },
                {
                    "date": 1709029327351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,9 +459,9 @@\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-    cpState.bonusReparation = item.bonusReparation;\r\n+    //cpState.bonusReparation = item.bonusReparation;\r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709029336390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -450,9 +450,9 @@\n         id: null,\r\n         name: \"\",\r\n         description: \"\",\r\n         picture: null,\r\n-        bonusReparation:null,\r\n+       // bonusReparation:null,\r\n         universe: \"\",\r\n         categories: [],\r\n       };\r\n     }\r\n"
                },
                {
                    "date": 1709029481865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -450,18 +450,16 @@\n         id: null,\r\n         name: \"\",\r\n         description: \"\",\r\n         picture: null,\r\n-       // bonusReparation:null,\r\n         universe: \"\",\r\n         categories: [],\r\n       };\r\n     }\r\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-    //cpState.bonusReparation = item.bonusReparation;\r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709029622248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,19 @@\n       value: [],\r\n       options: [],\r\n       required: true,\r\n     },\r\n-\r\n+    bonusReparation: {\r\n+      name: \"bonusreparation\",\r\n+      label: \"Bonus réparation\",\r\n+      required: false,\r\n+      id: \"bonusreparation\",\r\n+      value: \"0\",\r\n+      options: [\r\n+        { value: \"0\", label: \"Aucune prestation\", id: \"sansbonusrepa_radio\" },\r\n+        { value: \"1\", label: \"avec des prestations eligibles\", id: \"avecbonusrepa_radio\" },\r\n+      ],\r\n+    },\r\n     \r\n     universe: {\r\n       name: \"universe\",\r\n       label: \"Univers\",\r\n"
                },
                {
                    "date": 1709029791727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -461,8 +461,9 @@\n         name: \"\",\r\n         description: \"\",\r\n         picture: null,\r\n         universe: \"\",\r\n+        bonusReparation:\"\",\r\n         categories: [],\r\n       };\r\n     }\r\n     cpState.id.value = item.id;\r\n"
                },
                {
                    "date": 1709029855026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -469,8 +469,9 @@\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n+    cpState.bonusReparation.value = item.bonusReparation; \r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1709030228939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,8 +452,9 @@\n     }\r\n   };\r\n \r\n   const setActiveService = (item = {}) => {\r\n+    console.log(\"setActiveService\",item)\r\n     setMessage(null);\r\n     const cpState = { ...clearErrors(state) };\r\n     if (!item.id) {\r\n       item = {\r\n@@ -461,9 +462,9 @@\n         name: \"\",\r\n         description: \"\",\r\n         picture: null,\r\n         universe: \"\",\r\n-        bonusReparation:\"\",\r\n+        bonusReparation: \"\",\r\n         categories: [],\r\n       };\r\n     }\r\n     cpState.id.value = item.id;\r\n"
                },
                {
                    "date": 1709030500565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,9 +452,9 @@\n     }\r\n   };\r\n \r\n   const setActiveService = (item = {}) => {\r\n-    console.log(\"setActiveService\",item)\r\n+    console.log(\"setActiveService\",item);\r\n     setMessage(null);\r\n     const cpState = { ...clearErrors(state) };\r\n     if (!item.id) {\r\n       item = {\r\n@@ -462,17 +462,17 @@\n         name: \"\",\r\n         description: \"\",\r\n         picture: null,\r\n         universe: \"\",\r\n-        bonusReparation: \"\",\r\n+        bonusreparation: \"\",\r\n         categories: [],\r\n       };\r\n     }\r\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n-    cpState.bonusReparation.value = item.bonusReparation; \r\n+    cpState.bonusReparation.value = item.bonusreparation; \r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n"
                },
                {
                    "date": 1717754457260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,9 +329,9 @@\n   const submitService = (cpState) => {\r\n     let cpCategories = cpState.categories.value.map(\r\n       (cat) => `${endPoints.ANONYMOUS_CATEGORY}${cat.value}`\r\n     );\r\n-console.log(\"STEP PUT SERVICE\",cpState);\r\n+//console.log(\"STEP PUT SERVICE\",cpState);\r\n     connector({\r\n       method: cpState.id.value ? \"put\" : \"post\",\r\n       url: `${endPoints.SERVICE}${\r\n         cpState.id.value ? \"/\" + cpState.id.value : \"\"\r\n@@ -452,9 +452,9 @@\n     }\r\n   };\r\n \r\n   const setActiveService = (item = {}) => {\r\n-    console.log(\"setActiveService\",item);\r\n+    //(\"setActiveService\",item);\r\n     setMessage(null);\r\n     const cpState = { ...clearErrors(state) };\r\n     if (!item.id) {\r\n       item = {\r\n"
                },
                {
                    "date": 1719307484204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,19 @@\n         { value: \"0\", label: \"Aucune prestation\", id: \"sansbonusrepa_radio\" },\r\n         { value: \"1\", label: \"avec des prestations eligibles\", id: \"avecbonusrepa_radio\" },\r\n       ],\r\n     },\r\n+    displayedinfront: {\r\n+      name: \"isdeleted\",\r\n+      label: \"Affiché sur le front\",\r\n+      required: false,\r\n+      id: \"isdeleted\",\r\n+      value: \"0\",\r\n+      options: [\r\n+        { value: \"1\", label: \"Affiché sur le front\", id: \"displayedinfront_radio\" },\r\n+        { value: \"0\", label: \"Archivé\", id: \"isdesactivated_radio\" },\r\n+      ],\r\n+    },\r\n     \r\n     universe: {\r\n       name: \"universe\",\r\n       label: \"Univers\",\r\n"
                },
                {
                    "date": 1719307739479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,12 +102,12 @@\n         { value: \"1\", label: \"avec des prestations eligibles\", id: \"avecbonusrepa_radio\" },\r\n       ],\r\n     },\r\n     displayedinfront: {\r\n-      name: \"isdeleted\",\r\n+      name: \"displayedinfront\",\r\n       label: \"Affiché sur le front\",\r\n       required: false,\r\n-      id: \"isdeleted\",\r\n+      id: \"displayedinfront\",\r\n       value: \"0\",\r\n       options: [\r\n         { value: \"1\", label: \"Affiché sur le front\", id: \"displayedinfront_radio\" },\r\n         { value: \"0\", label: \"Archivé\", id: \"isdesactivated_radio\" },\r\n@@ -350,8 +350,9 @@\n       data: {\r\n         name: cpState.name.value,\r\n         description: cpState.description.value,\r\n         bonusreparation:cpState.bonusReparation.value,\r\n+        displayedinfront:cpState.displayedinfront.value,\r\n         picture: cpState.picture.value,\r\n         universe: cpState.universe.value ? `${endPoints.ANONYMOUS_UNIVERSE}${cpState.universe.value}`: null,\r\n         categories: cpCategories,\r\n       },\r\n@@ -474,16 +475,18 @@\n         description: \"\",\r\n         picture: null,\r\n         universe: \"\",\r\n         bonusreparation: \"\",\r\n+        displayedinfront: \"1\",\r\n         categories: [],\r\n       };\r\n     }\r\n     cpState.id.value = item.id;\r\n     cpState.name.value = item.name;\r\n     cpState.description.value = item.description;\r\n     cpState.picture.value = item.picture;\r\n     cpState.bonusReparation.value = item.bonusreparation; \r\n+    cpState.displayedinfront.value  = item.displayedinfront;\r\n     cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n     const options = [];\r\n     for (let i = 0; i < item.categories.length; i++) {\r\n       options.push({\r\n@@ -714,8 +717,19 @@\n                   setState(cpState);\r\n                   setMessage(null);\r\n                 }}\r\n               />\r\n+              <RadioButton\r\n+                {...state.displayedinfront}\r\n+                onChange={(val) => {\r\n+                  const cpState = { ...state };\r\n+                  cpState.displayedinfront.value = val.value;\r\n+                  cpState.displayedinfront.error = false;\r\n+                  setState(cpState);\r\n+                  setMessage(null);\r\n+                }}\r\n+              />\r\n+              \r\n               <div className=\"image-service\">\r\n                 <img src={getPathImage(state.picture)} alt=\"\" />\r\n                 <input\r\n                   type=\"file\"\r\n"
                }
            ],
            "date": 1708472322278,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport { DeleteIcon, EditIcon } from \"../../../assets/styles/icons\";\r\nimport SelectCat from \"../../../components/categories/selectCat\";\r\nimport DashboardContent from \"../../../components/dashboardContent\";\r\nimport DashboardSide from \"../../../components/dashboardSide\";\r\nimport { ButtonDef, Input } from \"../../../components/ui\";\r\nimport AdminBase from \"../../../theme/back/adminBase\";\r\nimport * as vars from \"../../../vars\";\r\nimport endPoints from \"../../../config/endPoints\";\r\nimport connector from \"../../../connector\";\r\nimport noImage from \"../../../assets/images/noImage.png\";\r\nimport { ServicesTableStyle } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport { AddGreenIcon } from \"../../../assets/styles/icons\";\r\nimport Tableau from \"../../../components/ui-elements/tableau\";\r\nimport Select from \"../../../components/ui-elements/select\";\r\nimport FilterDefault from \"../../../components/filterDefault\";\r\nimport { clearErrors } from \"../../../helper/form\";\r\nimport ROUTES from \"../../../config/routes\";\r\nimport PopinModal from \"../../../components/ui-elements/popinModal\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport CloseButton from \"../../../components/ui-elements/closeButton\";\r\nimport {\r\n  scrollTop,\r\n  sortObjectsText,\r\n  indexOfValue,\r\n  isEqual,\r\n  copy,\r\n  getMsgError,\r\n  getPathImage,\r\n} from \"../../../helper/functions\";\r\n\r\nexport default function Services() {\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const query = new URLSearchParams(useLocation().search);\r\n  const defaultUniverse = query.get(\"universe\")\r\n    ? parseInt(query.get(\"universe\"))\r\n    : \"\";\r\n  const defaultCategory = query.get(\"category\")\r\n    ? parseInt(query.get(\"category\"))\r\n    : \"\";\r\n  const defaultSubCategory = query.get(\"subCategory\")\r\n    ? parseInt(query.get(\"subCategory\"))\r\n    : \"\";\r\n  const perPageDesMob = isMobile ? 10 : 20;\r\n  const [services, setServices] = useState([]);\r\n  const [totalServices, setTotalServices] = useState(0);\r\n  const [universesCategories, setUniversesCategories] = useState([]);\r\n  const [message, setMessage] = useState(null);\r\n  const [service, setService] = useState(false);\r\n  const [perPage, setPerPage] = useState(perPageDesMob);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [activeSort, setActiveSort] = useState(\"name\");\r\n  const [switshSort, setSwitshSort] = useState(false);\r\n  const [paramsUrlService, setParamsUrlService] = useState(\"\");\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [dataModal, setDataModal] = useState({ title: \"\", type: \"\" });\r\n  const [state, setState] = useState({\r\n    id: { value: null },\r\n    name: {\r\n      name: \"name\",\r\n      label: \"Nom\",\r\n      type: \"text\",\r\n      required: true,\r\n      placeholder: \"Nom\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    description: {\r\n      name: \"description\",\r\n      label: \"Description\",\r\n      placeholder: \"Description\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n      as: \"textarea\",\r\n    },\r\n    picture: { name: \"picture\", value: \"\", file: null, required: false },\r\n    categories: {\r\n      name: \"categories\",\r\n      label: \"Sous-catégorie(s)\",\r\n      placeholder: \"Affiner votre recherche\",\r\n      value: [],\r\n      options: [],\r\n      required: true,\r\n    },\r\n    bonusReparation: {\r\n      name: \"bonusreparation\",\r\n      label: \"Eligible Bonus réparation\",\r\n      required: false,\r\n      id: \"bonusreparation\",\r\n      value: \"0\",\r\n      options: [\r\n        { value: 0, label: \"Non Eligible \", id: \"sansbonusrepa_radio\" },\r\n        { value: 1, label: \"Eligible\", id: \"avecbonusrepa_radio\" },\r\n      ],\r\n    },\r\n    universe: {\r\n      name: \"universe\",\r\n      label: \"Univers\",\r\n      placeholder: \"Filtrer\",\r\n      options: [],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n  });\r\n  const [filter, setFilter] = useState({\r\n    universe: {\r\n      placeholder: \"Univers\",\r\n      options: [{ label: \"Tous les univers\", value: \"\", category: [] }],\r\n      value: defaultUniverse,\r\n      isSearchable: true,\r\n    },\r\n    category: {\r\n      placeholder: \"catégorie(s)\",\r\n      options: [{ label: \"Toutes les catégories\", value: \"\", subCategory: [] }],\r\n      value: defaultCategory,\r\n      isSearchable: true,\r\n    },\r\n    subCategory: {\r\n      placeholder: \"Sous catégorie(s)\",\r\n      options: [{ label: \"Toutes les sous-catégories\", value: \"\" }],\r\n      value: defaultSubCategory,\r\n      isSearchable: true,\r\n    },\r\n    activeElement: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    getUniversesCategories();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getServices(false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pageIndex, perPage, filter, activeSort, switshSort]);\r\n\r\n  useEffect(() => {\r\n    const cpFilter = copy(filter);\r\n    if (filter.activeElement === \"universe\") {\r\n      cpFilter.category.options = [\r\n        { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n      ];\r\n      if (filter.universe.value) {\r\n        const index = indexOfValue(\r\n          filter.universe.value,\r\n          universesCategories,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          cpFilter.category.options.push(\r\n            ...universesCategories[index].category\r\n          );\r\n          if (\r\n            indexOfValue(\r\n              filter.category.value,\r\n              universesCategories[index].category,\r\n              \"value\"\r\n            ) === -1\r\n          ) {\r\n            cpFilter.category.value = \"\";\r\n          }\r\n        }\r\n      }\r\n      if (!isEqual(cpFilter.category.options, filter.category.options)) {\r\n        cpFilter.activeElement = \"category\";\r\n        cpFilter.category.value = \"\";\r\n        setFilter(cpFilter);\r\n        setPageIndex(0);\r\n      }\r\n    } else if (filter.activeElement === \"category\") {\r\n      cpFilter.subCategory.options = [\r\n        { label: \"Toutes les sous-catégories\", value: \"\" },\r\n      ];\r\n      if (filter.category.value) {\r\n        const index = indexOfValue(\r\n          filter.category.value,\r\n          filter.category.options,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          cpFilter.subCategory.options.push(\r\n            ...filter.category.options[index].subCategory\r\n          );\r\n          if (\r\n            indexOfValue(\r\n              filter.subCategory.value,\r\n              filter.category.options[index].subCategory,\r\n              \"value\"\r\n            ) === -1\r\n          ) {\r\n            cpFilter.subCategory.value = \"\";\r\n          }\r\n        }\r\n      }\r\n      if (!isEqual(cpFilter.subCategory.options, filter.subCategory.options)) {\r\n        cpFilter.activeElement = \"subCategory\";\r\n        cpFilter.subCategory.value = \"\";\r\n        setFilter(cpFilter);\r\n        setPageIndex(0);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filter]);\r\n\r\n  const getServices = (refresh = false) => {\r\n    let condition = \"\";\r\n    if (filter.universe.value) {\r\n      condition += `&categories.parent.universe.id=${filter.universe.value}`;\r\n    }\r\n    if (filter.category.value) {\r\n      condition += `&categories.parent.id=${filter.category.value}`;\r\n    }\r\n    if (filter.subCategory.value) {\r\n      condition += `&categories.id=${filter.subCategory.value}`;\r\n    }\r\n    const cpParamsUrlService = `page=${\r\n      parseInt(pageIndex) + 1\r\n    }&itemsPerPage=${perPage}&order[${activeSort}]=${\r\n      switshSort ? \"desc\" : \"asc\"\r\n    }${condition}`;\r\n\r\n    if (refresh || cpParamsUrlService !== paramsUrlService) {\r\n      setParamsUrlService(cpParamsUrlService);\r\n      connector({\r\n        method: \"get\",\r\n        url: `${endPoints.ANONYMOUS_SERVICES_PRICES}?${cpParamsUrlService}`,\r\n        success: (response) => {\r\n          setServices(response.data[\"hydra:member\"] || []);\r\n          setTotalServices(response.data[\"hydra:totalItems\"] || 0);\r\n        },\r\n        catch: (error) => {\r\n          console.log(error);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const getUniversesCategories = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: endPoints.ANONYMOUS_UNIVERSES_CATEGORIES,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        cpFilter.universe.options = [\r\n          { label: \"Tous les univers\", value: \"\", category: [] },\r\n        ];\r\n        cpFilter.category.options = [\r\n          { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n        ];\r\n        cpFilter.subCategory.options = [\r\n          { label: \"Toutes les sous-catégories\", value: \"\" },\r\n        ];\r\n        let universeOptions = [];\r\n        let categoryOptions = [];\r\n        let categoriesOptions = [];\r\n        let subCategoryOptions = [];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          let o = arrayObj[i];\r\n          let category = [];\r\n          for (let j = 0; j < o.categories.length; j++) {\r\n            let subCategory = [];\r\n            for (let k = 0; k < o.categories[j].children.length; k++) {\r\n              const subRow = {\r\n                label: o.categories[j].children[k].name,\r\n                value: o.categories[j].children[k].id,\r\n              };\r\n              subCategoryOptions.push(subRow);\r\n              subCategory.push(subRow);\r\n            }\r\n            const row = {\r\n              label: o.categories[j].name,\r\n              value: o.categories[j].id,\r\n            };\r\n            categoryOptions.push({ ...row, subCategory });\r\n            category.push({ ...row, subCategory });\r\n            categoriesOptions.push({ ...row, options: subCategory });\r\n          }\r\n          universeOptions.push({\r\n            label: o.name,\r\n            value: o.id,\r\n            category,\r\n          });\r\n        }\r\n        universeOptions = sortObjectsText(universeOptions, \"label\", \"asc\");\r\n        cpFilter.universe.options = [\r\n          ...cpFilter.universe.options,\r\n          ...universeOptions,\r\n        ];\r\n        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n        cpFilter.category.options = [\r\n          ...cpFilter.category.options,\r\n          ...categoryOptions,\r\n        ];\r\n        subCategoryOptions = sortObjectsText(\r\n          subCategoryOptions,\r\n          \"label\",\r\n          \"asc\"\r\n        );\r\n        cpFilter.subCategory.options = [\r\n          ...cpFilter.subCategory.options,\r\n          ...subCategoryOptions,\r\n        ];\r\n        setUniversesCategories(cpFilter.universe.options);\r\n        setFilter(cpFilter);\r\n\r\n        const cpState = { ...state };\r\n        cpState.universe.options = [...cpFilter.universe.options];\r\n        cpState.categories.options = [...categoriesOptions];\r\n        setState(cpState);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const submitService = (cpState) => {\r\n    let cpCategories = cpState.categories.value.map(\r\n      (cat) => `${endPoints.ANONYMOUS_CATEGORY}${cat.value}`\r\n    );\r\n\r\n    connector({\r\n      method: cpState.id.value ? \"put\" : \"post\",\r\n      url: `${endPoints.SERVICE}${\r\n        cpState.id.value ? \"/\" + cpState.id.value : \"\"\r\n      }`,\r\n      data: {\r\n        name: cpState.name.value,\r\n        description: cpState.description.value,\r\n        picture: cpState.picture.value,\r\n        universe: cpState.universe.value ? `${endPoints.ANONYMOUS_UNIVERSE}${cpState.universe.value}`: null,\r\n        categories: cpCategories,\r\n      },\r\n      success: (response) => {\r\n        getServices(true);\r\n        response.data.categories = cpState.categories.value;\r\n        setActiveService({\r\n          ...response.data,\r\n          totalBenefits: service.totalBenefits,\r\n          universe : cpState.universe.value ? {id:cpState.universe.value}:\"\"\r\n        });\r\n        setIsPending(false);\r\n        msgSuccess(\"Vos modifications ont bien été prises en compte.\");\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n        setIsPending(false);\r\n        msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n      },\r\n    });\r\n  };\r\n\r\n  const saveService = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      setMessage(null);\r\n      setState(clearErrors(state));\r\n      if (state.name.value && state.categories.value.length) {\r\n        if (state.picture.file) {\r\n          saveImage(state);\r\n        } else {\r\n          submitService(state);\r\n        }\r\n      } else {\r\n        const msg = \"Vérifier si les champs obligatoires sont remplis.\";\r\n        msgErrors({\r\n          name: !state.name.value,\r\n          categories: !state.categories.value.length,\r\n          msg,\r\n        });\r\n        setIsPending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteService = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      connector({\r\n        method: \"delete\",\r\n        url: endPoints.SERVICE + \"/\" + service.id,\r\n        success: () => {\r\n          getServices(true);\r\n          setService(false);\r\n          setIsPending(false);\r\n          setShowModal(false);\r\n          NotificationManager.success(\"Service supprimé avec succès.\", \"\");\r\n        },\r\n        catch: (error) => {\r\n          setIsPending(false);\r\n          setShowModal(false);\r\n          msgErrors({ msg: getMsgError(error) });\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    scrollTop(\"side-content-dashboard\");\r\n    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n    const cpState = { ...state };\r\n    if (e.name !== undefined) cpState.name.error = e.name;\r\n    if (e.categories !== undefined) cpState.categories.error = e.categories;\r\n    setState(cpState);\r\n  };\r\n\r\n  const msgSuccess = (text) => {\r\n    scrollTop(\"side-content-dashboard\");\r\n    if (text !== undefined) setMessage({ type: \"success\", text });\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 5000);\r\n  };\r\n\r\n  const saveImage = (cpState) => {\r\n    const data = new FormData();\r\n    data.append(\"file\", cpState.picture.file);\r\n    connector({\r\n      method: \"post\",\r\n      url: endPoints.ANONYMOUS_MEDIA_OBJECT,\r\n      data,\r\n      success: (response) => {\r\n        cpState.picture.file = null;\r\n        cpState.picture.value = response.data.contentUrl;\r\n        setState(cpState);\r\n        submitService(cpState);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const setActiveRow = (item = {}) => {\r\n    if (service && parseInt(item.id) === parseInt(service.id)) {\r\n      setService(false);\r\n    } else {\r\n      setActiveService(item);\r\n    }\r\n  };\r\n\r\n  const setActiveService = (item = {}) => {\r\n    setMessage(null);\r\n    const cpState = { ...clearErrors(state) };\r\n    if (!item.id) {\r\n      item = {\r\n        id: null,\r\n        name: \"\",\r\n        description: \"\",\r\n        picture: null,\r\n        universe: \"\",\r\n        categories: [],\r\n      };\r\n    }\r\n    cpState.id.value = item.id;\r\n    cpState.name.value = item.name;\r\n    cpState.description.value = item.description;\r\n    cpState.picture.value = item.picture;\r\n    cpState.universe.value = item.universe ? item.universe.id :\"\";\r\n    const options = [];\r\n    for (let i = 0; i < item.categories.length; i++) {\r\n      options.push({\r\n        label: item.categories[i].name || item.categories[i].label,\r\n        value: item.categories[i].id || item.categories[i].value,\r\n      });\r\n    }\r\n    cpState.categories.value = options;\r\n    cpState.picture.file = \"\";\r\n    setState(cpState);\r\n    setService(item);\r\n  };\r\n\r\n  const getUrlBenefits = (item) => {\r\n    return `${ROUTES.PRESTATIONS.url}?service=${item.id}`;\r\n  };\r\n\r\n  const universeCategoriesOptions = () => {\r\n    const cpState = { ...state };\r\n    const categoriesOptions = [];\r\n    const universeOptions = [...filter.universe.options];\r\n    for (let i = 0; i < universeOptions.length; i++) {\r\n      const option = universeOptions[i];\r\n      if (\r\n        option.value &&\r\n        (!state.universe.value || state.universe.value === option.value)\r\n      ) {\r\n        option.category.map((obj) => {\r\n          categoriesOptions.push({\r\n            label: obj.label,\r\n            value: obj.value,\r\n            options: obj.subCategory,\r\n          });\r\n        });\r\n      }\r\n    }\r\n    cpState.categories.options = [...categoriesOptions];\r\n    setState(cpState);\r\n  };\r\n\r\n  const rowRenderservices = (row) => (\r\n    <div\r\n      onClick={() => setActiveRow(row)}\r\n      className={`divTableRow ${service.id === row.id ? \"active\" : \"\"}`}\r\n      key={`row-${row.id}`}\r\n    >\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Nom: </label>}\r\n        <div>{row.name}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Prix moyen: </label>}\r\n        <div>{parseFloat(row.averagePrice).toFixed(2)}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Prix min: </label>}\r\n        <div>{parseFloat(row.minPrice).toFixed(2)}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Prix max: </label>}\r\n        <div>{parseFloat(row.maxPrice).toFixed(2)}</div>\r\n      </div>\r\n      <div className=\"divTableCell\">\r\n        {isMobile && <label> Commandes: </label>}\r\n        <div>{row.totalCommands}</div>\r\n      </div>\r\n      {isMobile && (\r\n        <div className=\"divTableCell m-action\">\r\n          <div>\r\n            <ButtonDef\r\n              textButton=\"Voir le service\"\r\n              onClick={() => setActiveRow(row)}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <AdminBase>\r\n      <BlocAdminContent>\r\n        <DashboardContent titlePage=\"Services\" className=\"services-page\">\r\n          <ServicesTableStyle>\r\n            <ButtonDef\r\n              spinner={isPending}\r\n              onClick={() => setActiveService({})}\r\n              textButton={\r\n                <>\r\n                  Nouveau service <AddGreenIcon />{\" \"}\r\n                </>\r\n              }\r\n              className=\"btn-add\"\r\n            />\r\n            <FilterDefault\r\n              className=\"services-filter\"\r\n              formItems={\r\n                <>\r\n                  <Select\r\n                    {...filter.universe}\r\n                    onChange={(e) => {\r\n                      const cpFilter = { ...filter };\r\n                      cpFilter.universe.value = e.value;\r\n                      cpFilter.activeElement = \"universe\";\r\n                      setPageIndex(0);\r\n                      setFilter(cpFilter);\r\n                    }}\r\n                  />\r\n                  {filter.universe.value ? (\r\n                    <Select\r\n                      {...filter.category}\r\n                      onChange={(e) => {\r\n                        let cpFilter = { ...filter };\r\n                        cpFilter.category.value = e.value;\r\n                        cpFilter.activeElement = \"category\";\r\n                        setPageIndex(0);\r\n                        setFilter(cpFilter);\r\n                      }}\r\n                    />\r\n                  ) : null}\r\n\r\n                  {filter.category.value ? (\r\n                    <Select\r\n                      {...filter.subCategory}\r\n                      onChange={(e) => {\r\n                        const cpFilter = { ...filter };\r\n                        cpFilter.subCategory.value = e.value;\r\n                        cpFilter.activeElement = \"subCategory\";\r\n                        setPageIndex(0);\r\n                        setFilter(cpFilter);\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </>\r\n              }\r\n            />\r\n            <Tableau\r\n              columns={[\r\n                { key: \"name\", text: \"Nom\", sort: true },\r\n                { key: \"averagePrice\", text: \"Prix moyen\", sort: true },\r\n                { key: \"minPrice\", text: \"Prix min\", sort: true },\r\n                { key: \"maxPrice\", text: \"Prix max\", sort: true },\r\n                { key: \"commands\", text: \"Commandes\", sort: true },\r\n              ]}\r\n              perPage={perPage}\r\n              setPerPage={setPerPage}\r\n              pageIndex={pageIndex}\r\n              setPageIndex={setPageIndex}\r\n              activeSort={activeSort}\r\n              setActiveSort={setActiveSort}\r\n              switshSort={switshSort}\r\n              setSwitshSort={setSwitshSort}\r\n              pagination={true}\r\n              totalItemsLength={totalServices}\r\n              data={services}\r\n              rowRender={rowRenderservices}\r\n            />\r\n          </ServicesTableStyle>\r\n        </DashboardContent>\r\n\r\n        {service ? (\r\n          <DashboardSide>\r\n            {isMobile && (\r\n              <>\r\n                <CloseButton\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setService(false);\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n            <h2 className=\"title-side-dashboard\">\r\n              {service.name ? service.name : \"Nouveau service\"}\r\n            </h2>\r\n            <Form>\r\n              {message && message.type && message.text ? (\r\n                <span\r\n                  className={\r\n                    message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n                  }\r\n                >\r\n                  {message.text}\r\n                </span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <Select\r\n                {...state.universe}\r\n                onChange={(e) => {\r\n                  const cpState = { ...state };\r\n                  if(e.value && cpState.universe.value !== e.value){\r\n                    cpState.categories.value = [];\r\n                  }\r\n                  cpState.universe.value = e.value;\r\n                  setState(cpState);\r\n                  universeCategoriesOptions();\r\n                }}\r\n              />\r\n              <SelectCat\r\n                {...state.categories}\r\n                onChangeCallback={(response) => {\r\n                  const cpState = { ...state };\r\n                  cpState.categories.value = response;\r\n                  cpState.categories.error = false;\r\n                  setState(cpState);\r\n                  setMessage(null);\r\n                }}\r\n              />\r\n              <Input\r\n                {...state.name}\r\n                onChange={(e) => {\r\n                  const cpState = { ...state };\r\n                  cpState.name.value = e.target.value;\r\n                  cpState.name.error = false;\r\n                  setState(cpState);\r\n                  setMessage(null);\r\n                }}\r\n              />\r\n              <RadioButton\r\n                {...state.bonusReparation}\r\n                onChange={(val) => {\r\n                  const cpState = { ...state };\r\n                  cpState.bonusReparation.value = val.value;\r\n                  cpState.bonusReparation.error = false;\r\n                  setState(cpState);\r\n                  setMessage(null);\r\n                }}\r\n              />\r\n              <div className=\"image-service\">\r\n                <img src={getPathImage(state.picture)} alt=\"\" />\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"file\"\r\n                  id=\"uploadImage\"\r\n                  accept=\"image/png, image/jpeg\"\r\n                  onChange={(e) => {\r\n                    const cpState = { ...state };\r\n                    cpState.picture.file = e.target.files[0];\r\n                    e.target.value = \"\";\r\n                    setState(cpState);\r\n                    setMessage(null);\r\n                  }}\r\n                />\r\n                <div className=\"btns-file\">\r\n                  <label htmlFor=\"uploadImage\" className=\"edit-image\">\r\n                    <EditIcon />\r\n                  </label>\r\n                  {state.picture.value || state.picture.file ? (\r\n                    <button\r\n                      className=\"delete-image\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        const cpState = { ...state };\r\n                        cpState.picture.value = \"\";\r\n                        cpState.picture.file = null;\r\n                        setState(cpState);\r\n                      }}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </button>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              </div>\r\n              {/*<WysiwygEditor\r\n                {...state.description}\r\n                onChange={(e) => {\r\n                  const cpState = { ...state };\r\n                  cpState.description.value = e || \"\";\r\n                  setState(cpState);\r\n                  setMessage(null);\r\n                }\r\n              />*/}\r\n              <Input\r\n                {...state.description}\r\n                onChange={(e) => {\r\n                  const cpState = { ...state };\r\n                  cpState.description.value = e.target.value;\r\n                  setState(cpState);\r\n                  setMessage(null);\r\n                }}\r\n              />\r\n              <div className=\"btns-alings service-btns-action\">\r\n                {service.name ? (\r\n                  <ButtonDef\r\n                    className=\"btn-delete\"\r\n                    textButton=\"Supprimer\"\r\n                    spinner={isPending}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setDataModal({\r\n                        type: \"modal-save\",\r\n                        title: \"Confirmer la suppression\",\r\n                      });\r\n                      setShowModal(true);\r\n                    }}\r\n                  />\r\n                ) : null}\r\n                <ButtonDef\r\n                  textButton=\"Enregistrer\"\r\n                  spinner={isPending}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    saveService();\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              {!state.id.value ? (\r\n                \"\"\r\n              ) : service.totalBenefits ? (\r\n                <div className=\"link-voir\">\r\n                  <Link to={getUrlBenefits(service)}>\r\n                    {\" \"}\r\n                    {service.totalBenefits} prestation(s) lié(s){\" \"}\r\n                  </Link>\r\n                </div>\r\n              ) : (\r\n                <div className=\"link-voir-0\">\r\n                  <Link to={\"#\"}> 0 prestation(s) lié(s) </Link>\r\n                </div>\r\n              )}\r\n\r\n              <PopinModal\r\n                show={showModal}\r\n                handleClose={() => {\r\n                  setShowModal(false);\r\n                }}\r\n                title={dataModal.title}\r\n              >\r\n                <div className=\"btns-confirm\">\r\n                  <ButtonDef\r\n                    className=\"btn-light\"\r\n                    textButton=\"Non\"\r\n                    spinner={isPending}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setShowModal(false);\r\n                    }}\r\n                  />\r\n                  <ButtonDef\r\n                    textButton=\"Oui\"\r\n                    spinner={isPending}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      deleteService();\r\n                    }}\r\n                  />\r\n                </div>\r\n              </PopinModal>\r\n            </Form>\r\n          </DashboardSide>\r\n        ) : null}\r\n      </BlocAdminContent>\r\n    </AdminBase>\r\n  );\r\n}\r\n"
        }
    ]
}