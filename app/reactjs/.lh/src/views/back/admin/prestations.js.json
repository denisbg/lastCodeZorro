{
    "sourceFile": "src/views/back/admin/prestations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1711438829733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711439031916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -671,8 +671,9 @@\n           data: {\r\n             priceQuote: cpState.priceQuote.value\r\n               ? cpState.priceQuote.value\r\n               : null,\r\n+            typeService:  cpState.typeService.value,\r\n             precisionQuote: cpState.precisionQuote.value,\r\n             deliveryModes: cpDeliveryModes.data,\r\n           },\r\n           success: (response) => {\r\n"
                },
                {
                    "date": 1713876947836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n       isSearchable: true,\r\n     },\r\n     repairMan: {\r\n       placeholder: \"Réparateurs\",\r\n-      options: [{ label: \"Tous les réparateurs\", value: \"\", showcases: [] }],\r\n+      options: [{ label: \"Tous les réparacteurs\", value: \"\", showcases: [] }],\r\n       value: \"\",\r\n       isSearchable: true,\r\n     },\r\n     activeElement: \"\",\r\n"
                },
                {
                    "date": 1713877087804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,9 +366,9 @@\n           }\r\n         }\r\n       }\r\n \r\n-      all = { label: \"Tous les réparateurs\", value: \"\" };\r\n+      all = { label: \"Tous les réparacateurs\", value: \"\" };\r\n       if (!isEqual([all, ...repairManOptions], filter.repairMan.options)) {\r\n         repairManOptions = sortObjectsText(repairManOptions, \"label\", \"asc\");\r\n         cpFilter.repairMan.options = [all, ...repairManOptions];\r\n       }\r\n@@ -541,9 +541,9 @@\n       success: (response) => {\r\n         const arrayObj = response.data[\"hydra:member\"] || [];\r\n         const cpFilter = { ...filter };\r\n         cpFilter.repairMan.options = [\r\n-          { label: \"Tous les réparateurs\", value: \"\", showcases: [] },\r\n+          { label: \"Tous les répariteurs\", value: \"\", showcases: [] },\r\n         ];\r\n         for (let i = 0; i < arrayObj.length; i++) {\r\n           let o = arrayObj[i];\r\n           let showcases = [];\r\n"
                },
                {
                    "date": 1714435271165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,9 +366,9 @@\n           }\r\n         }\r\n       }\r\n \r\n-      all = { label: \"Tous les réparacateurs\", value: \"\" };\r\n+      all = { label: \"Tous les réparateurs\", value: \"\" };\r\n       if (!isEqual([all, ...repairManOptions], filter.repairMan.options)) {\r\n         repairManOptions = sortObjectsText(repairManOptions, \"label\", \"asc\");\r\n         cpFilter.repairMan.options = [all, ...repairManOptions];\r\n       }\r\n"
                },
                {
                    "date": 1714650785540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -535,15 +535,15 @@\n \r\n   const getRepairMans = () => {\r\n     connector({\r\n       method: \"get\",\r\n-      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES}?order[enterprise]=asc`,\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES}?itemsPerPage=1000&order[enterprise]=asc`,\r\n       data: {},\r\n       success: (response) => {\r\n         const arrayObj = response.data[\"hydra:member\"] || [];\r\n         const cpFilter = { ...filter };\r\n         cpFilter.repairMan.options = [\r\n-          { label: \"Tous les répariteurs\", value: \"\", showcases: [] },\r\n+          { label: \"Tous les réparteurs\", value: \"\", showcases: [] },\r\n         ];\r\n         for (let i = 0; i < arrayObj.length; i++) {\r\n           let o = arrayObj[i];\r\n           let showcases = [];\r\n"
                }
            ],
            "date": 1711438829733,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Input, ButtonDef } from \"../../../components/ui\";\r\nimport AdminBase from \"../../../theme/back/adminBase\";\r\nimport DashboardContent from \"../../../components/dashboardContent\";\r\nimport DashboardSide from \"../../../components/dashboardSide\";\r\nimport { BlocAdminContent } from \"../../../assets/styles/adminStyle/adminGlobalStyle\";\r\nimport ListsAdmin from \"../../../components/prestations/listsAdmin\";\r\nimport endPoints from \"./../../../config/endPoints\";\r\nimport connector from \"./../../../connector\";\r\nimport { QuestionIcon } from \"../../../assets/styles/icons\";\r\nimport RadioButton from \"../../../components/ui-elements/radioButton\";\r\nimport Checkbox from \"../../../components/ui-elements/checkBox\";\r\nimport DeliveryModesContent from \"../../../components/deliveryModesContent\";\r\nimport noImage from \"../../../assets/images/noImage.png\";\r\nimport * as vars from \"../../../vars\";\r\nimport { clearErrors } from \"../../../helper/form\";\r\nimport PopinModal from \"../../../components/ui-elements/popinModal\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport CloseButton from \"../../../components/ui-elements/closeButton\";\r\nimport {\r\n  getFloat,\r\n  parentCategories,\r\n  scrollTop,\r\n  sortObjectsText,\r\n  indexOfValue,\r\n  isEqual,\r\n  copy,\r\n} from \"../../../helper/functions\";\r\n\r\nexport default function Services() {\r\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n  const query = new URLSearchParams(useLocation().search);\r\n  const defaultService = query.get(\"service\")\r\n    ? parseInt(query.get(\"service\"))\r\n    : \"\";\r\n  const [defaultBenefit, setDefaultBenefit] = useState(\r\n    query.get(\"benefit\") ? parseInt(query.get(\"benefit\")) : \"\"\r\n  );\r\n  const perPageDesMob = isMobile ? 10 : 20;\r\n  const [benefits, setBenefits] = useState([]);\r\n  const [totalBenefits, setTotalBenefits] = useState(0);\r\n  const [benefit, setBenefit] = useState(false);\r\n  const [universesCategories, setUniversesCategories] = useState([]);\r\n  const [repairMans, setRepairMans] = useState([]);\r\n  const [services, setServices] = useState([]);\r\n  const [perPage, setPerPage] = useState(perPageDesMob);\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [filter, setFilter] = useState({\r\n    universe: {\r\n      placeholder: \"Univers\",\r\n      options: [{ label: \"Tous les univers\", value: \"\", category: [] }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    category: {\r\n      placeholder: \"catégorie(s)\",\r\n      options: [{ label: \"Toutes les catégories\", value: \"\", subCategory: [] }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    subCategory: {\r\n      placeholder: \"Sous catégorie(s)\",\r\n      options: [{ label: \"Toutes les sous-catégories\", value: \"\" }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    service: {\r\n      placeholder: \"Services\",\r\n      options: [\r\n        {\r\n          label: \"Tous les services\",\r\n          value: \"\",\r\n          subCategory: [],\r\n          benefits: [],\r\n        },\r\n      ],\r\n      value: defaultService,\r\n      isSearchable: true,\r\n    },\r\n    repairMan: {\r\n      placeholder: \"Réparateurs\",\r\n      options: [{ label: \"Tous les réparateurs\", value: \"\", showcases: [] }],\r\n      value: \"\",\r\n      isSearchable: true,\r\n    },\r\n    activeElement: \"\",\r\n  });\r\n  const [paramsUrlBenefit, setParamsUrlBenefit] = useState(\"\");\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [message, setMessage] = useState(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [dataModal, setDataModal] = useState({\r\n    title: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const stateDeliveryModes = (parent) => {\r\n    return {\r\n      id: { value: \"\" },\r\n      price: {\r\n        name: `${parent}_price`,\r\n        label: \"Prix\",\r\n        type: \"text\",\r\n        placeholder: \"Prix\",\r\n        value: \"\",\r\n        empty: true,\r\n        min: 0,\r\n        required: true,\r\n        error: false,\r\n        errorMessage: \"\",\r\n        isNumber: true,\r\n      },\r\n      radius: {\r\n        name: `${parent}_radius`,\r\n        label: \"Rayon max\",\r\n        value: false,\r\n        options: [\r\n          { value: false, label: \"France\" },\r\n          { value: true, label: \"Rayon défini\" },\r\n        ],\r\n        required: false,\r\n        error: false,\r\n        errorMessage: \"\",\r\n      },\r\n      distance: {\r\n        name: `${parent}_distance`,\r\n        label: \"\",\r\n        type: \"text\",\r\n        value: \"\",\r\n        empty: true,\r\n        min: 1,\r\n        max: 999,\r\n        required: false,\r\n        error: false,\r\n        errorMessage: \"\",\r\n        isNumber: true,\r\n      },\r\n    };\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    id: { value: null },\r\n    typeService: {\r\n      name: \"typeService\",\r\n      label: \"Type de prestation\",\r\n      value: \"\",\r\n      options: [\r\n        { value: \"forfait\", label: \"Forfait\" },\r\n        { value: \"devis\", label: \"Devis\" },\r\n      ],\r\n      disabled: false,\r\n      error: false,\r\n      errorMessage: \"\",\r\n    },\r\n    deliveryModes: {\r\n      label: \"Modes de délivrance\",\r\n      options: [],\r\n      error: false,\r\n      other: { typeService: null },\r\n    },\r\n    priceQuote: {\r\n      type: \"text\",\r\n      name: \"priceQuote\",\r\n      placeholder: \"Prix\",\r\n      value: \"\",\r\n      required: false,\r\n      empty: true,\r\n      min: 0,\r\n      max: 5000,\r\n      error: false,\r\n      errorMessage: \"\",\r\n      isNumber: true,\r\n    },\r\n    precisionQuote: {\r\n      name: \"precisionQuote\",\r\n      label: \"Précision de prise en charge du devis\",\r\n      placeholder:\r\n        \"Indiquez votre fonctionnement : déplacement à domicile, visioconférence etc..\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: false,\r\n      as: \"textarea\",\r\n    },\r\n    motif: {\r\n      name: \"motif\",\r\n      label: \"\",\r\n      placeholder: \"Motif de suppression\",\r\n      value: \"\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      required: true,\r\n      type: \"text\",\r\n    },\r\n  });\r\n\r\n  const setChildren = (index, data) => {\r\n    const cpState = { ...state };\r\n    cpState.deliveryModes.options[index].stateChildren = data;\r\n    cpState.deliveryModes.error = false;\r\n    setState(cpState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBenefits();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pageIndex, perPage]);\r\n\r\n  useEffect(() => {\r\n    if (benefits && benefits.length && defaultBenefit) {\r\n      for (let i = 0; i < benefits.length; i++) {\r\n        if (parseInt(benefits[i].id) === defaultBenefit) {\r\n          setActiveBenefit(benefits[i]);\r\n          break;\r\n        }\r\n      }\r\n      setDefaultBenefit(false);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [benefits, defaultBenefit]);\r\n\r\n  useEffect(() => {\r\n    const cpFilter = copy(filter);\r\n    let all = \"\";\r\n    if (filter.activeElement === \"universe\") {\r\n      let categoryOptions = [];\r\n\r\n      if (filter.universe.value) {\r\n        const index = indexOfValue(\r\n          filter.universe.value,\r\n          universesCategories,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          categoryOptions.push(...universesCategories[index].category);\r\n          if (\r\n            indexOfValue(filter.category.value, categoryOptions, \"value\") === -1\r\n          ) {\r\n            cpFilter.category.value = \"\";\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < universesCategories.length; i++) {\r\n          categoryOptions.push(...universesCategories[i].category);\r\n        }\r\n      }\r\n\r\n      all = { label: \"Toutes les catégories\", value: \"\", subCategory: [] };\r\n      if (!isEqual([all, ...categoryOptions], filter.category.options)) {\r\n        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n        cpFilter.category.options = [all, ...categoryOptions];\r\n      }\r\n      cpFilter.category.value = \"\";\r\n      cpFilter.activeElement = \"category\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"category\") {\r\n      let subCategoryOptions = [];\r\n      if (filter.category.value) {\r\n        const index = indexOfValue(\r\n          filter.category.value,\r\n          filter.category.options,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          subCategoryOptions.push(\r\n            ...filter.category.options[index].subCategory\r\n          );\r\n          if (\r\n            indexOfValue(\r\n              filter.subCategory.value,\r\n              subCategoryOptions,\r\n              \"value\"\r\n            ) === -1\r\n          ) {\r\n            cpFilter.subCategory.value = \"\";\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < filter.category.options.length; i++) {\r\n          subCategoryOptions.push(...filter.category.options[i].subCategory);\r\n        }\r\n      }\r\n      all = { label: \"Toutes les sous-catégories\", value: \"\" };\r\n      if (!isEqual([all, ...subCategoryOptions], filter.subCategory.options)) {\r\n        subCategoryOptions = sortObjectsText(\r\n          subCategoryOptions,\r\n          \"label\",\r\n          \"asc\"\r\n        );\r\n        cpFilter.subCategory.options = [all, ...subCategoryOptions];\r\n      }\r\n      cpFilter.subCategory.value = \"\";\r\n      cpFilter.activeElement = \"subCategory\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"subCategory\") {\r\n      let serviceOptions = [];\r\n      let subCategoryOptions = [];\r\n      if (filter.subCategory.value) {\r\n        const index = indexOfValue(\r\n          filter.subCategory.value,\r\n          filter.subCategory.options,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          subCategoryOptions.push(filter.subCategory.options[index]);\r\n        }\r\n      } else {\r\n        subCategoryOptions = filter.subCategory.options;\r\n      }\r\n\r\n      for (let i = 0; i < subCategoryOptions.length; i++) {\r\n        for (let j = 0; j < services.length; j++) {\r\n          if (\r\n            indexOfValue(subCategoryOptions[i].value, services[j].subCategory, \"value\") > -1 && \r\n            indexOfValue(services[j].value, serviceOptions, \"value\") === -1\r\n          ) {\r\n            serviceOptions.push(services[j]);\r\n          }\r\n        }\r\n      }\r\n\r\n      all = {\r\n        label: \"Tous les services\",\r\n        value: \"\",\r\n        subCategory: [],\r\n        benefits: [],\r\n      };\r\n      if (!isEqual([all, ...serviceOptions], filter.service.options)) {\r\n        serviceOptions = sortObjectsText(serviceOptions, \"label\", \"asc\");\r\n        cpFilter.service.options = [all, ...serviceOptions];\r\n      }\r\n      cpFilter.service.value = \"\";\r\n      cpFilter.activeElement = \"service\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"service\") {\r\n\r\n      let serviceOptions = [];\r\n      if (filter.service.value) {\r\n        const index = indexOfValue(\r\n          filter.service.value,\r\n          filter.service.options,\r\n          \"value\"\r\n        );\r\n        if (index > -1) {\r\n          serviceOptions.push(filter.service.options[index]);\r\n        }\r\n      } else {\r\n        serviceOptions = filter.service.options;\r\n      }\r\n\r\n      let repairManOptions = [];\r\n\r\n      for (let i = 0; i < serviceOptions.length; i++) {\r\n        for (let j = 0; j < serviceOptions[i].benefits.length; j++) {\r\n          const userBenefit = serviceOptions[i].benefits[j].user.id;\r\n          const index = indexOfValue(userBenefit, repairMans, \"value\");\r\n          if (\r\n            userBenefit &&\r\n            index > -1 &&\r\n            indexOfValue(userBenefit, repairManOptions, \"value\") === -1\r\n          ) {\r\n            repairManOptions.push(repairMans[index]);\r\n          }\r\n        }\r\n      }\r\n\r\n      all = { label: \"Tous les réparateurs\", value: \"\" };\r\n      if (!isEqual([all, ...repairManOptions], filter.repairMan.options)) {\r\n        repairManOptions = sortObjectsText(repairManOptions, \"label\", \"asc\");\r\n        cpFilter.repairMan.options = [all, ...repairManOptions];\r\n      }\r\n      cpFilter.repairMan.value = \"\";\r\n      cpFilter.activeElement = \"repairMan\";\r\n      setFilter(cpFilter);\r\n    } else if (filter.activeElement === \"repairMan\") {\r\n      if (pageIndex === 0) {\r\n        getBenefits();\r\n      } else {\r\n        setPageIndex(0);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    getUniversesCategories();\r\n    getRepairMans();\r\n    getServices();\r\n    getDeliveryModeTypes();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getDeliveryModeTypes = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: endPoints.DELIVERY_MODE_TYPES,\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpState = { ...state };\r\n        let options = [];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          options.push({\r\n            value: arrayObj[i].id,\r\n            checked: false,\r\n            label: arrayObj[i].name,\r\n            data: { ...arrayObj[i] },\r\n            children: DeliveryModesContent,\r\n            setChildren: (key, data) => setChildren(key, data),\r\n            stateChildren: stateDeliveryModes(arrayObj[i].id),\r\n          });\r\n        }\r\n        cpState.deliveryModes.options = options;\r\n        setState(cpState);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getBenefits = (refresh = false) => {\r\n    let condition = \"\";\r\n    if (filter.repairMan.value) {\r\n      condition += `&user.id=${filter.repairMan.value}`;\r\n    }\r\n    if (filter.universe.value) {\r\n      condition += `&service.categories.parent.universe.id=${filter.universe.value}`;\r\n    }\r\n    if (filter.category.value) {\r\n      condition += `&service.categories.parent.id=${filter.category.value}`;\r\n    }\r\n    if (filter.subCategory.value) {\r\n      condition += `&service.categories.id=${filter.subCategory.value}`;\r\n    }\r\n    if (filter.service.value) {\r\n      condition += `&service.id=${filter.service.value}`;\r\n    }\r\n\r\n    const cpParamsUrlBenefit = `page=${\r\n      parseInt(pageIndex) + 1\r\n    }&itemsPerPage=${perPage}&order[updatedAt]=desc&order[updatedAt]=desc${condition}`;\r\n\r\n    if (refresh || cpParamsUrlBenefit !== paramsUrlBenefit) {\r\n      setParamsUrlBenefit(cpParamsUrlBenefit);\r\n      connector({\r\n        method: \"get\",\r\n        url: `${endPoints.BENEFITS_ADMIN}?${cpParamsUrlBenefit}`,\r\n        success: (response) => {\r\n          setBenefits(response.data[\"hydra:member\"] || []);\r\n          setTotalBenefits(response.data[\"hydra:totalItems\"] || 0);\r\n        },\r\n        catch: (error) => {\r\n          console.log(error);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const getUniversesCategories = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: endPoints.ANONYMOUS_UNIVERSES_CATEGORIES,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        cpFilter.universe.options = [\r\n          { label: \"Tous les univers\", value: \"\", category: [] },\r\n        ];\r\n        cpFilter.category.options = [\r\n          { label: \"Toutes les catégories\", value: \"\", subCategory: [] },\r\n        ];\r\n        cpFilter.subCategory.options = [\r\n          { label: \"Toutes les sous-catégories\", value: \"\" },\r\n        ];\r\n        let universeOptions = [];\r\n        let categoryOptions = [];\r\n        let subCategoryOptions = [];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          let o = arrayObj[i];\r\n          let category = [];\r\n          for (let j = 0; j < o.categories.length; j++) {\r\n            let subCategory = [];\r\n            for (let k = 0; k < o.categories[j].children.length; k++) {\r\n              const subRow = {\r\n                label: o.categories[j].children[k].name,\r\n                value: o.categories[j].children[k].id,\r\n              };\r\n              subCategoryOptions.push(subRow);\r\n              subCategory.push(subRow);\r\n            }\r\n            const row = {\r\n              label: o.categories[j].name,\r\n              value: o.categories[j].id,\r\n            };\r\n            categoryOptions.push({ ...row, subCategory });\r\n            category.push({ ...row, subCategory });\r\n          }\r\n          universeOptions.push({\r\n            label: o.name,\r\n            value: o.id,\r\n            category,\r\n          });\r\n        }\r\n        universeOptions = sortObjectsText(universeOptions, \"label\", \"asc\");\r\n        cpFilter.universe.options = [\r\n          ...cpFilter.universe.options,\r\n          ...universeOptions,\r\n        ];\r\n        categoryOptions = sortObjectsText(categoryOptions, \"label\", \"asc\");\r\n        cpFilter.category.options = [\r\n          ...cpFilter.category.options,\r\n          ...categoryOptions,\r\n        ];\r\n        subCategoryOptions = sortObjectsText(\r\n          subCategoryOptions,\r\n          \"label\",\r\n          \"asc\"\r\n        );\r\n        cpFilter.subCategory.options = [\r\n          ...cpFilter.subCategory.options,\r\n          ...subCategoryOptions,\r\n        ];\r\n        setUniversesCategories(cpFilter.universe.options);\r\n        setFilter(cpFilter);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getRepairMans = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES}?order[enterprise]=asc`,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        cpFilter.repairMan.options = [\r\n          { label: \"Tous les réparateurs\", value: \"\", showcases: [] },\r\n        ];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          let o = arrayObj[i];\r\n          let showcases = [];\r\n          for (let j = 0; j < o.showcases.length; j++) {\r\n            showcases.push({\r\n              label: o.showcases[j].name,\r\n              value: o.showcases[j].id,\r\n            });\r\n          }\r\n          cpFilter.repairMan.options.push({\r\n            label: o.enterprise,\r\n            value: o.id,\r\n            showcases,\r\n          });\r\n        }\r\n        setFilter(cpFilter);\r\n        setRepairMans(cpFilter.repairMan.options);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getServices = () => {\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.ANONYMOUS_SERVICES}?atLeastOne=${true}&order[name]=asc`,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        const cpFilter = { ...filter };\r\n        cpFilter.service.options = [\r\n          {\r\n            label: \"Tous les services\",\r\n            value: \"\",\r\n            subCategory: [],\r\n            benefits: [],\r\n          },\r\n        ];\r\n        for (let i = 0; i < arrayObj.length; i++) {\r\n          let o = arrayObj[i];\r\n          const subCategory = [];\r\n          for (let j = 0; j < o.categories.length; j++) {\r\n            subCategory.push({\r\n              label: o.categories[j].name,\r\n              value: o.categories[j].id,\r\n              //parent: o.categories[j].parent,\r\n            });\r\n          }\r\n          cpFilter.service.options.push({\r\n            label: o.name,\r\n            value: o.id,\r\n            subCategory,\r\n            benefits: o.benefits,\r\n          });\r\n        }\r\n        setServices(cpFilter.service.options);\r\n        setFilter(cpFilter);\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n  };\r\n\r\n  const setActiveRow = (item = {}) => {\r\n    if (benefit && parseInt(item.id) === parseInt(benefit.id)) {\r\n      setBenefit(false);\r\n    } else {\r\n      setActiveBenefit(item);\r\n    }\r\n  };\r\n\r\n  const setActiveBenefit = (item = {}) => {\r\n    setMessage(null);\r\n    setIsPending(false);\r\n    const cpState = clearErrors({ ...state });\r\n    cpState.id.value = item.id;\r\n    cpState.typeService.value = item.typeService;\r\n    {\r\n      /*\r\n    cpState.typeService.disabled =\r\n      item.typeService === \"devis\" || item.typeService === \"forfait\"\r\n        ? true\r\n        : false;*/\r\n    }\r\n    cpState.typeService.disabled = false;\r\n    cpState.priceQuote.value = item.priceQuote;\r\n    cpState.precisionQuote.value = item.precisionQuote\r\n      ? item.precisionQuote\r\n      : \"\";\r\n\r\n    let cpDeliveryModes = checkDeliveryModes({\r\n      cpState,\r\n      action: \"init\",\r\n      options: item.deliveryModes,\r\n    });\r\n    setState(cpDeliveryModes.cpState);\r\n    setBenefit(item);\r\n  };\r\n\r\n  const getPathImage = (image) => (image ? vars.pathImage + image : noImage);\r\n\r\n  const saveBenefit = () => {\r\n    if (!isPending) {\r\n      setIsPending(true);\r\n      setMessage(null);\r\n      setState(clearErrors({ ...state }));\r\n      const cpDeliveryModes = checkDeliveryModes({\r\n        cpState: { ...state },\r\n        action: \"check\",\r\n      });\r\n      const cpState = cpDeliveryModes.cpState;\r\n\r\n      if (\r\n        cpDeliveryModes.data.length &&\r\n        !cpDeliveryModes.error &&\r\n        (cpState.typeService.value === \"forfait\" ||\r\n          cpState.typeService.value === \"devis\")\r\n      ) {\r\n        connector({\r\n          method: \"put\",\r\n          url: `${endPoints.BENEFIT}/${cpState.id.value}/repairman`,\r\n          data: {\r\n            priceQuote: cpState.priceQuote.value\r\n              ? cpState.priceQuote.value\r\n              : null,\r\n            precisionQuote: cpState.precisionQuote.value,\r\n            deliveryModes: cpDeliveryModes.data,\r\n          },\r\n          success: (response) => {\r\n            getBenefits(true);\r\n            setActiveBenefit(response.data);\r\n            setIsPending(false);\r\n            msgSuccess(\"Vos modifications ont bien été prises en compte.\");\r\n          },\r\n          catch: (error) => {\r\n            console.log(error);\r\n            setIsPending(false);\r\n            if (\r\n              error?.response?.data &&\r\n              error.response.data[\"hydra:description\"]\r\n            ) {\r\n              const msg = error.response.data[\"hydra:description\"];\r\n              msgErrors({ msg });\r\n            } else {\r\n              msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n            }\r\n          },\r\n        });\r\n      } else {\r\n        const msg = \"Vérifier si les champs obligatoires sont remplis.\";\r\n        msgErrors({\r\n          typeService: !cpState.typeService.value,\r\n          deliveryModes: !cpDeliveryModes.data.length,\r\n          msg,\r\n        });\r\n        setState(cpState);\r\n        setIsPending(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkDeliveryModes = ({ cpState, action, options = [] }) => {\r\n    let data = [];\r\n    let error = false;\r\n    cpState.deliveryModes.other = {\r\n      ...cpState.deliveryModes.other,\r\n      typeService: cpState.typeService.value,\r\n    };\r\n    for (let i = 0; i < cpState.deliveryModes.options.length; i++) {\r\n      const o = cpState.deliveryModes.options[i];\r\n\r\n      if (action === \"init\") {\r\n        cpState.deliveryModes.options[i].checked = false;\r\n        for (let j = 0; j < options.length; j++) {\r\n          if (options[j].deliveryModeType.id === o.value) {\r\n            cpState.deliveryModes.options[i].checked = true;\r\n            for (const key in o.stateChildren) {\r\n              cpState.deliveryModes.options[i].stateChildren[key].value =\r\n                options[j][key];\r\n            }\r\n          }\r\n        }\r\n        if (!cpState.deliveryModes.options[i].checked) {\r\n          cpState.deliveryModes.options[i].stateChildren[\"id\"].value = null;\r\n          cpState.deliveryModes.options[i].stateChildren[\"price\"].value = 0;\r\n          cpState.deliveryModes.options[i].stateChildren[\r\n            \"radius\"\r\n          ].value = false;\r\n          cpState.deliveryModes.options[i].stateChildren[\"distance\"].value = 0;\r\n        }\r\n      } else if (action === \"check\") {\r\n        if (o.checked) {\r\n          const row = {};\r\n          for (const key in o.stateChildren) {\r\n            const value = o.stateChildren[key].value;\r\n            if (key === \"id\") {\r\n              row[key] = value ? `${endPoints.DELIVERY_MODES}/${value}` : null;\r\n            } else if (o.stateChildren[key].isNumber) {\r\n              row[key] = value !== undefined ? parseFloat(value) : \"\";\r\n            } else {\r\n              row[key] = value !== undefined ? value : \"\";\r\n            }\r\n            if (o.stateChildren[key].required && !value) {\r\n              cpState.deliveryModes.options[i].stateChildren[key].error = true;\r\n              error = true;\r\n            }\r\n          }\r\n          row[\"deliveryModeType\"] = o.value\r\n            ? `${endPoints.DELIVERY_MODE_TYPE}/${o.value}`\r\n            : null;\r\n          data.push(row);\r\n        }\r\n      }\r\n    }\r\n    return { cpState, data, error };\r\n  };\r\n\r\n  const deleteBenefit = () => {\r\n    if (!isPending) {\r\n      setState(clearErrors(state));\r\n      if (state.motif.value) {\r\n        setIsPending(true);\r\n        connector({\r\n          method: \"delete\",\r\n          url: `${endPoints.BENEFIT}/${benefit.id}/repairman?motif=${state.motif.value}`,\r\n          success: () => {\r\n            getBenefits(true);\r\n            setBenefit(false);\r\n            setIsPending(false);\r\n            setShowModal(false);\r\n            const cpState = { ...state };\r\n            cpState.motif.value = \"\";\r\n            setState(cpState);\r\n            NotificationManager.success(\r\n              \"Prestation supprimée avec succès.\",\r\n              \"\"\r\n            );\r\n          },\r\n          catch: (error) => {\r\n            setIsPending(false);\r\n            setShowModal(false);\r\n            if (\r\n              error?.response?.data &&\r\n              error.response.data[\"hydra:description\"]\r\n            ) {\r\n              const msg = error.response.data[\"hydra:description\"];\r\n              msgErrors({ msg });\r\n            } else {\r\n              msgErrors({ msg: \"Quelque chose s'est mal passé.\" });\r\n            }\r\n          },\r\n        });\r\n      } else {\r\n        msgErrors({ motif: !state.motif.value });\r\n      }\r\n    }\r\n  };\r\n\r\n  const msgErrors = (e) => {\r\n    scrollTop(\"side-content-dashboard\");\r\n    if (e.msg !== undefined) setMessage({ type: \"error\", text: e.msg });\r\n    const cpState = { ...state };\r\n    if (e.typeService !== undefined) cpState.typeService.error = e.typeService;\r\n    if (e.deliveryModes !== undefined)\r\n      cpState.deliveryModes.error = e.deliveryModes;\r\n    if (e.motif !== undefined) cpState.motif.error = e.motif;\r\n    setState(cpState);\r\n  };\r\n\r\n  const msgSuccess = (text) => {\r\n    scrollTop(\"side-content-dashboard\");\r\n    if (text !== undefined) setMessage({ type: \"success\", text });\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <AdminBase>\r\n      <BlocAdminContent>\r\n        <DashboardContent\r\n          titlePage=\"Catalogue des prestations\"\r\n          className={benefit ? \"side-is-opened\" : null}\r\n        >\r\n          <ListsAdmin\r\n            setActiveItem={setActiveRow}\r\n            item={benefit}\r\n            items={benefits}\r\n            filter={filter}\r\n            setFilter={setFilter}\r\n            totalItems={totalBenefits}\r\n            perPage={perPage}\r\n            setPerPage={setPerPage}\r\n            pageIndex={pageIndex}\r\n            setPageIndex={setPageIndex}\r\n          />\r\n        </DashboardContent>\r\n        {benefit ? (\r\n          <DashboardSide className=\"prestations-side\">\r\n            {isMobile && (\r\n              <>\r\n                <CloseButton\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setBenefit(false);\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n            <div className=\"bloc-name-societe\">\r\n              <img\r\n                src={getPathImage(\r\n                  benefit?.user?.picture ? benefit.user.picture : \"\"\r\n                )}\r\n                alt=\"\"\r\n              />\r\n              <span>\r\n                {benefit?.user?.enterprise ? benefit.user.enterprise : \"\"}\r\n              </span>\r\n            </div>\r\n            <h2 className=\"title-side-dashboard\">{benefit.service.name}</h2>\r\n            <Form className=\"form-prestations reparateur-form-prestation\">\r\n              {message && message.type && message.text ? (\r\n                <span\r\n                  className={\r\n                    message.type === \"error\" ? \"text-danger\" : \"text-success\"\r\n                  }\r\n                >\r\n                  {message.text}\r\n                </span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <div className=\"image-service-prestation\">\r\n                <img\r\n                  src={getPathImage(\r\n                    benefit?.service?.picture ? benefit.service.picture : \"\"\r\n                  )}\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"desc-service-prestation\">\r\n                <p>\r\n                  {benefit?.service?.description\r\n                    ? benefit.service.description\r\n                    : \"\"}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"cats-service-prestation\">\r\n                <span>Catégories :</span>\r\n                <div className=\"item-cats-prestation\">\r\n                  {benefit?.service?.categories\r\n                    ? parentCategories(benefit.service.categories).map(\r\n                        (cat) => (\r\n                          <p key={cat.id}>\r\n                            <span>{cat.name}</span>\r\n                          </p>\r\n                        )\r\n                      )\r\n                    : null}\r\n                </div>\r\n              </div>\r\n              <div className=\"type-modes-prestation\">\r\n                <div className=\"type-prestation\">\r\n                  <RadioButton\r\n                    {...state.typeService}\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      if (!state.typeService.disabled) {\r\n                        cpState.typeService.value = e.value;\r\n                        cpState.typeService.error = false;\r\n                      }\r\n                      cpState.deliveryModes.other = {\r\n                        ...cpState.deliveryModes.other,\r\n                        typeService: e.value,\r\n                      };\r\n                      setState(cpState);\r\n                      setMessage(null);\r\n                    }}\r\n                  />\r\n                  {state.typeService.value === \"devis\" ? (\r\n                    <div className=\"devis-detail\">\r\n                      <div className=\"price-devis\">\r\n                        <label>\r\n                          Prix du devis :\r\n                          <div className=\"info-tooltip\">\r\n                            <QuestionIcon />\r\n                            <span>Si votre devis est gratuit, laissez 0 €</span>\r\n                          </div>\r\n                        </label>\r\n                        <Input\r\n                          {...state.priceQuote}\r\n                          onChange={(e) => {\r\n                            const cpState = { ...state };\r\n                            if (\r\n                              !e.target.value ||\r\n                              parseFloat(e.target.value) <= 5000\r\n                            )\r\n                              cpState.priceQuote.value = getFloat(\r\n                                e.target.value\r\n                              );\r\n                            cpState.priceQuote.error = false;\r\n                            setState(cpState);\r\n                            setMessage(null);\r\n                          }}\r\n                        />\r\n                        <span className=\"symbol\">€ TTC</span>\r\n                      </div>\r\n                      <Input\r\n                        {...state.precisionQuote}\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.precisionQuote.value = e.target.value;\r\n                          cpState.precisionQuote.error = false;\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n\r\n                <div className=\"bloc-mode-delivrance\">\r\n                  <Checkbox\r\n                    {...state.deliveryModes}\r\n                    notice={\r\n                      benefit?.service?.averagePrice\r\n                        ? `Le prix moyen de ce service est de : ${parseFloat(\r\n                            benefit.service.averagePrice\r\n                          ).toFixed(2)} € TTC`\r\n                        : \"\"\r\n                    }\r\n                    onChange={(e) => {\r\n                      const cpState = { ...state };\r\n                      cpState.deliveryModes.options = e;\r\n                      cpState.deliveryModes.error = false;\r\n                      setState(cpState);\r\n                      setMessage(null);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"btns-alings service-btns-action\">\r\n                <ButtonDef\r\n                  className=\"btn-delete\"\r\n                  textButton=\"Supprimer\"\r\n                  spinner={isPending}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setDataModal({\r\n                      type: \"modal-save\",\r\n                      title: \"Confirmer la suppression\",\r\n                    });\r\n                    setShowModal(true);\r\n                  }}\r\n                />\r\n                <ButtonDef\r\n                  textButton=\"Enregistrer\"\r\n                  spinner={isPending}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    saveBenefit();\r\n                  }}\r\n                />\r\n              </div>\r\n              <PopinModal\r\n                show={showModal}\r\n                handleClose={() => {\r\n                  setShowModal(false);\r\n                }}\r\n                title={dataModal.title}\r\n              >\r\n                <Input\r\n                  {...state.motif}\r\n                  onChange={(e) => {\r\n                    const cpState = { ...state };\r\n                    cpState.motif.value = e.target.value;\r\n                    cpState.motif.error = false;\r\n                    setState(cpState);\r\n                    setMessage(null);\r\n                  }}\r\n                />\r\n                <div className=\"btns-confirm\">\r\n                  <ButtonDef\r\n                    className=\"btn-light\"\r\n                    textButton=\"Non\"\r\n                    spinner={isPending}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setShowModal(false);\r\n                    }}\r\n                  />\r\n                  <ButtonDef\r\n                    textButton=\"Oui\"\r\n                    spinner={isPending}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      deleteBenefit();\r\n                    }}\r\n                  />\r\n                </div>\r\n              </PopinModal>\r\n            </Form>\r\n          </DashboardSide>\r\n        ) : null}\r\n      </BlocAdminContent>\r\n    </AdminBase>\r\n  );\r\n}\r\n"
        }
    ]
}