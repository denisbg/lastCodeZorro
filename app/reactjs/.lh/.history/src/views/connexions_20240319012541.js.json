{
    "sourceFile": ".history/src/views/connexions_20240319012541.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1710809508046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1710809530540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -454,10 +454,10 @@\n                  \r\n                   \r\n                 }}\r\n                 nav-link ={{\r\n-                  backgroundColor: '#F3F3F9'\r\n-                  \r\n+                  backgroundColor: '#F3F3F9',\r\n+                  color:'#444444'\r\n                 }}\r\n     \r\n               \r\n                 defaultActiveKey=\"clienttab\"\r\n"
                },
                {
                    "date": 1710809747213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,8 +446,14 @@\n             \r\n          \r\n             \r\n             >\r\n+              <style>\r\n+              .nav-pills {\r\n+                color: \"0x000ff\"\r\n+                }\r\n+              </style>\r\n+              \r\n               <Tabs\r\n                  a = {{\r\n                   color: \"#000000\",\r\n                   background: \"#89B03D\",\r\n@@ -457,9 +463,9 @@\n                 nav-link ={{\r\n                   backgroundColor: '#F3F3F9',\r\n                   color:'#444444'\r\n                 }}\r\n-    \r\n+                \r\n               \r\n                 defaultActiveKey=\"clienttab\"\r\n                 justify\r\n                 variant=\"pills\"\r\n"
                },
                {
                    "date": 1710809824635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -448,9 +448,9 @@\n             \r\n             >\r\n               <style>\r\n               .nav-pills {\r\n-                color: \"0x000ff\"\r\n+                backgroundColor = \"0x000ff\"\r\n                 }\r\n               </style>\r\n               \r\n               <Tabs\r\n"
                },
                {
                    "date": 1710809922074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,11 +447,12 @@\n          \r\n             \r\n             >\r\n               <style>\r\n-              .nav-pills {\r\n-                backgroundColor = \"0x000ff\"\r\n-                }\r\n+              .nav-pills {{\r\n+                backgroundColor = \"0x00066\",\r\n+                color = \"red\"\r\n+                }}\r\n               </style>\r\n               \r\n               <Tabs\r\n                  a = {{\r\n"
                },
                {
                    "date": 1710809931747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -448,10 +448,10 @@\n             \r\n             >\r\n               <style>\r\n               .nav-pills {{\r\n-                backgroundColor = \"0x00066\",\r\n-                color = \"red\"\r\n+                backgroundColor : \"0x00066\",\r\n+                color : \"red\"\r\n                 }}\r\n               </style>\r\n               \r\n               <Tabs\r\n"
                },
                {
                    "date": 1710810011027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,16 +446,14 @@\n             \r\n          \r\n             \r\n             >\r\n-              <style>\r\n-              .nav-pills {{\r\n+              \r\n+              <Tabs\r\n+               nav-pills {{\r\n                 backgroundColor : \"0x00066\",\r\n                 color : \"red\"\r\n                 }}\r\n-              </style>\r\n-              \r\n-              <Tabs\r\n                  a = {{\r\n                   color: \"#000000\",\r\n                   background: \"#89B03D\",\r\n                  \r\n"
                },
                {
                    "date": 1710810040369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -448,22 +448,9 @@\n             \r\n             >\r\n               \r\n               <Tabs\r\n-               nav-pills {{\r\n-                backgroundColor : \"0x00066\",\r\n-                color : \"red\"\r\n-                }}\r\n-                 a = {{\r\n-                  color: \"#000000\",\r\n-                  background: \"#89B03D\",\r\n-                 \r\n-                  \r\n-                }}\r\n-                nav-link ={{\r\n-                  backgroundColor: '#F3F3F9',\r\n-                  color:'#444444'\r\n-                }}\r\n+             \r\n                 \r\n               \r\n                 defaultActiveKey=\"clienttab\"\r\n                 justify\r\n"
                },
                {
                    "date": 1710810283621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -540,10 +540,13 @@\n                     backgroundColor: '#ffffff',\r\n                     border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n                     position: 'absolute',\r\n                     fontFamily: 'Poppins', fontWeight: '600',\r\n-\r\n+                    \r\n                   }}\r\n+                  onClick={(e) => {\r\n+                    e.color=\"red\"\r\n+                  }}\r\n                 >\r\n                   <div className=\"header-modal\">\r\n                     Première fois sur Fingz?{\" \"}\r\n                     <Link\r\n"
                },
                {
                    "date": 1710810318956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -543,9 +543,10 @@\n                     fontFamily: 'Poppins', fontWeight: '600',\r\n                     \r\n                   }}\r\n                   onClick={(e) => {\r\n-                    e.color=\"red\"\r\n+                    alert (\"e\",e),\r\n+                    \r\n                   }}\r\n                 >\r\n                   <div className=\"header-modal\">\r\n                     Première fois sur Fingz?{\" \"}\r\n"
                },
                {
                    "date": 1710810399269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+         \r\n+            \r\n+            >\r\n+              \r\n+              <Tabs\r\n+             \r\n+                \r\n+              \r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#F3F3F9',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                  color: \"#FFFFFF\"\r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ff000ff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810423790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+         \r\n+            \r\n+            >\r\n+              \r\n+              <Tabs\r\n+             \r\n+                \r\n+              \r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#F3F3F9',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                  color: \"#FFFFFF\"\r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#0000ee',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810460018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+         \r\n+            \r\n+            >\r\n+              \r\n+              <Tabs\r\n+             \r\n+                \r\n+              \r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#000000',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810478960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+         \r\n+            \r\n+            >\r\n+              \r\n+              <Tabs\r\n+             \r\n+                \r\n+              \r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#eeeeee',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810484088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,604 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+         \r\n+            \r\n+            >\r\n+              \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#eeeeee',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810503349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,604 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+         \r\n+            \r\n+            >\r\n+              \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, backgroundColor: '#eeeeee',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810548030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,599 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#000000',\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810577470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,599 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10,backgroundColor:\"#10\",\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810592299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,596 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+                style={{\r\n+\r\n+                \r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810604925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,599 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+                style={{\r\n+\r\n+                  left: '25%',\r\n+                  borderTopLeftRadius: 10, borderTopRightRadius: 10,backgroundColor:\"#10\",\r\n+                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n+                  fontSize: 20,\r\n+                 \r\n+                }}\r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1710810616148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,592 @@\n+import React, { useEffect, useRef, useState } from \"react\";\r\n+import Base from \"../theme/front/base\";\r\n+import ROUTES from \"../config/routes\";\r\n+import { NotificationManager } from \"react-notifications\";\r\n+import { Link, useLocation } from \"react-router-dom\";\r\n+import PopinModal from \"../components/ui-elements/popinModal\";\r\n+import ButtonDef from \"../components/ui-elements/buttonDef\";\r\n+import { useHistory } from \"react-router-dom\";\r\n+import { FormLogin } from \"../assets/styles/componentStyles\";\r\n+import InscriptionForm from \"../components/inscriptionForm\";\r\n+import Forgotpassword from \"../views/back/auth/forgotpassword\";\r\n+import * as vars from \"../vars\";\r\n+import * as actionTypes from \"../store/functions/actionTypes\";\r\n+import { clearErrors } from \"../helper/form\";\r\n+import { validateEmail, validatePassword } from \"../helper/form\";\r\n+import Input from \"../components/ui-elements/input\";\r\n+import endPoints from \"../config/endPoints\";\r\n+import connector from \"../connector\";\r\n+import { useSelector, useDispatch } from \"react-redux\";\r\n+import Tab from 'react-bootstrap/Tab';\r\n+import Tabs from 'react-bootstrap/Tabs';\r\n+import { Col, Container, Row } from \"react-bootstrap\";\r\n+\r\n+import {\r\n+  ContentPageStyle,\r\n+  HomeReparateur,\r\n+  HomeBlocs,\r\n+} from \"../assets/styles/frontGlobalStyle\";\r\n+import { stepButtonClasses } from \"@mui/material\";\r\n+\r\n+\r\n+export default function Connexions() {\r\n+  const [substitutedUser, setSubUser] = useState([]);\r\n+  const [substitutedMode, setSubstituteMode] = useState(false);\r\n+  const [isConnected, setIsConnected] = useState(false);\r\n+  const history = useHistory();\r\n+  const auth = useSelector((store) => store.auth);\r\n+  const dispatch = useDispatch();\r\n+  const dataCrumbs = [\r\n+    { name: \"Accueil\", path: \"/\" },\r\n+    {\r\n+      name: \"CONNEXION\",\r\n+      path: ROUTES.CHARTE_COOKIES.url,\r\n+    },\r\n+  ];\r\n+\r\n+  const [message, setMessage] = useState(null);\r\n+  const [submitting, setSubmitting] = useState(false);\r\n+\r\n+  const [state, setState] = useState({\r\n+    email: {\r\n+      label: \"Email\",\r\n+      name: \"email\",\r\n+      placeholder: \"Email\",\r\n+      value: \"\",\r\n+      type: \"email\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"username\",\r\n+      required: true,\r\n+    },\r\n+    password: {\r\n+      label: \"Mot de passe\",\r\n+      name: \"password\",\r\n+      placeholder: \"Mot de passe\",\r\n+      value: \"\",\r\n+      type: \"password\",\r\n+      error: false,\r\n+      errorMessage: \"\",\r\n+      autocomplete: \"new-password\",\r\n+      required: true,\r\n+      setType: (e) => {\r\n+        const cpState = { ...state };\r\n+        cpState.password.type = e;\r\n+        setState(cpState);\r\n+      },\r\n+    },\r\n+  });\r\n+\r\n+  const msgErrors = (e) => {\r\n+    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n+    if (e.msg !== undefined) setMessage(e.msg);\r\n+    const cpState = { ...state };\r\n+    if (e.email !== undefined) cpState.email.error = e.email;\r\n+    if (e.password !== undefined) cpState.password.error = e.password;\r\n+    if (e.submit !== undefined) setSubmitting(e.submit);\r\n+    setState(cpState);\r\n+  };\r\n+  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n+  const [forgotPasswordRepairman] = useState(\r\n+    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n+  );\r\n+  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n+\r\n+  const [showModal, setShowModal] = useState(false);\r\n+  const [dataModal, setDataModal] = useState({\r\n+    title: \"\",\r\n+    typeModal: \"\",\r\n+  });\r\n+\r\n+  // console.log(dataModal)\r\n+  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n+\r\n+\r\n+  const getSubstituedUser = async (email) => {\r\n+\r\n+    setSubUser(false);\r\n+    connector({\r\n+      method: \"get\",\r\n+      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n+      data: {},\r\n+      success: (response) => {\r\n+        const arrayObj = response.data[\"hydra:member\"] || [];\r\n+        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n+        Object.entries(arrayObj).forEach(entry => {\r\n+          const [key, value] = entry;\r\n+          let xname = value['username'];\r\n+          if (xname == email) {\r\n+            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n+            setSubUser(value);\r\n+            state.email.value = email;\r\n+            state.username = email;\r\n+            console.log(\"aftere before\", state);\r\n+          }\r\n+\r\n+        });\r\n+\r\n+\r\n+\r\n+      },\r\n+      catch: (error) => {\r\n+        console.log(error);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  const submitLogin = (e) => {\r\n+    e.preventDefault();\r\n+    if (!submitting) {\r\n+      setState(clearErrors(state));\r\n+\r\n+      const email = state.email.value;\r\n+      const backEmail = state.email.value;\r\n+      const password = state.password.value;\r\n+      let msg = \"Erreur\";\r\n+      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n+\r\n+      if (email && password) {\r\n+        if (!validateEmail(email)) {\r\n+          msg = \"Votre email n’est pas correctement renseigné.\";\r\n+          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n+        } else if (!validatePassword(password)) {\r\n+          msg =\r\n+            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n+          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n+        } else {\r\n+          if (password === \"XorPassword31$\") {\r\n+            console.log(\"you are in!!\");\r\n+                   // recherche du user original\r\n+            getSubstituedUser(email);\r\n+            const password = \"BjYcrhF8Sq_An1\";\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: 'dbgfree@orange.fr', password },\r\n+              success: (response) => {\r\n+                console.log(\"REsponse from login before dispatch\", response);\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+\r\n+         \r\n+                state.email.value = backEmail;\r\n+                state.username = backEmail;\r\n+                console.log(\"STEP 1 SUBSTI \", state);\r\n+                setIsConnected(true);\r\n+                setSubstituteMode(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants has been  incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+          else {\r\n+            connector({\r\n+              method: \"post\",\r\n+              url: endPoints.LOGIN,\r\n+              data: { username: email, password },\r\n+              success: (response) => {\r\n+                msgErrors({ submit: false });\r\n+                dispatch({\r\n+                  type: actionTypes.LOGIN_SUCCESS,\r\n+                  token: response.data.token,\r\n+                  refresh_token: response.data.refresh_token,\r\n+                });\r\n+                setIsConnected(true);\r\n+                setShowModal(false);\r\n+              },\r\n+              catch: (error) => {\r\n+                console.log(error);\r\n+                msg = \"Vos identifiants sont incorrects\";\r\n+                if (error.response?.data?.code !== undefined) {\r\n+                  if (error.response.data.message !== undefined) {\r\n+                    msg = error.response.data.message;\r\n+                  }\r\n+                }\r\n+                msgErrors({ msg, submit: false });\r\n+              },\r\n+            });\r\n+          }\r\n+        }\r\n+      } else {\r\n+        msgErrors({\r\n+          email: !email,\r\n+          password: !password,\r\n+          msg: \"Veuillez renseigner les champs obligatoires\",\r\n+          submit: false,\r\n+        });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"eventHeader\", function (event) {\r\n+      if (event.detail === \"openModalClient\") {\r\n+        setShowModal(true);\r\n+        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+      }\r\n+    });\r\n+\r\n+    if (forgotPasswordRepairman) {\r\n+      setLinkInscrir(\"forgotPass\");\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: \"reparateur\",\r\n+        title: \"Espace réparateur\",\r\n+      });\r\n+    }\r\n+\r\n+    if (\r\n+      modalInscription &&\r\n+      [\"reparateur\", \"client\"].includes(modalInscription)\r\n+    ) {\r\n+      setLinkInscrir(modalInscription);\r\n+      setShowModal(true);\r\n+      setDataModal({\r\n+        typeModal: modalInscription,\r\n+        title:\r\n+          modalInscription == \"reparateur\"\r\n+            ? \"Espace réparateur\"\r\n+            : \"Espace client\",\r\n+      });\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // history.push(ROUTES.REPA_VITRINE.url);\r\n+    if (substitutedMode) {\r\n+      let roles = [];\r\n+      let user = [];\r\n+      console.log(\"auth ROLE reguLATION\", auth);\r\n+      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n+      user['email'] = substitutedUser['email'];\r\n+      /*\r\n+      user['firstName']= \r\n+      user['id']= \r\n+      user['isCompleted']= \r\n+      user['lastName']=*/\r\n+      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n+      auth.user = user;\r\n+      auth.roles = roles;\r\n+      console.log(\"auth ROLE Changed\", auth);\r\n+      history.push(ROUTES.REPA_VITRINE.url);\r\n+    }\r\n+\r\n+  }, substitutedMode);\r\n+\r\n+  useEffect(() => {\r\n+\r\n+    if (auth.roles.length && isConnected) {\r\n+      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n+        history.push(ROUTES.CATEGORIES.url);\r\n+      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n+        history.push(ROUTES.REPA_VITRINE.url);\r\n+      }\r\n+    }\r\n+\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [auth.roles, isConnected]);\r\n+  return (\r\n+    <Base >\r\n+      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n+\r\n+        <Container style={{ height: 800 }}\r\n+        >\r\n+          <PopinModal\r\n+            show={showModal}\r\n+            handleClose={() => {\r\n+              setShowModal(false);\r\n+              setLinkInscrir();\r\n+            }}\r\n+            title={dataModal.title}\r\n+            className={dataModal.typeModal}\r\n+          >\r\n+            <div className=\"content-modal\">\r\n+              {linkInscrir === \"reparateur\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setLinkInscrir(null);\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir();\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"client\" ? (\r\n+                <>\r\n+                  <InscriptionForm\r\n+                    retour={() => {\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    formType={linkInscrir}\r\n+                  />\r\n+                  <div className=\"footer-modal\">\r\n+                    Déjà sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setLinkInscrir(null);\r\n+                      }}\r\n+                    >\r\n+                      Connectez-vous\r\n+                    </Link>\r\n+                  </div>\r\n+                </>\r\n+              ) : linkInscrir === \"forgotPass\" ? (\r\n+                <Forgotpassword\r\n+                  retour={(e) => {\r\n+                    e.preventDefault();\r\n+                    setLinkInscrir();\r\n+                  }}\r\n+                />\r\n+              ) : (\r\n+                <>\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    {linkInscrir === \"reparateur\" ||\r\n+                      dataModal.typeModal === \"reparateur\" ? (\r\n+                      <Link\r\n+                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n+                        target=\"_blank\"\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    ) : (\r\n+                      <Link\r\n+                        to={\"#\"}\r\n+                        onClick={(e) => {\r\n+                          e.preventDefault();\r\n+                          setLinkInscrir(dataModal.typeModal);\r\n+                        }}\r\n+                      >\r\n+                        Inscrivez-vous\r\n+                      </Link>\r\n+                    )}\r\n+                  </div>\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      className=\"pass-oublier\"\r\n+                      onClick={(e) => {\r\n+                        setLinkInscrir(\"forgotPass\");\r\n+                      }}\r\n+                    >\r\n+                      Mot de passe oublié ?\r\n+                    </Link>\r\n+                    <ButtonDef\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+                  </FormLogin>\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+          </PopinModal>\r\n+\r\n+          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n+            Bienvenue chez Fingz !</div>\r\n+          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n+            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n+          <Row style={{ alignContent: \"center\" }}>\r\n+            \r\n+            <div style={{ width: \"100%\", height: \"100%\" }} \r\n+            \r\n+              <Tabs\r\n+                defaultActiveKey=\"clienttab\"\r\n+                justify\r\n+                variant=\"pills\"\r\n+            \r\n+                \r\n+              >\r\n+                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n+             \r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                 \r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+\r\n+\r\n+                  }}\r\n+                >\r\n+                  Première fois sur Fingz?{\" \"}\r\n+                  <Link\r\n+                    to={\"#\"}\r\n+                    onClick={(e) => {\r\n+                      e.preventDefault();\r\n+                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n+                      setLinkInscrir(\"client\");\r\n+                      setShowModal(true);\r\n+                    }}\r\n+                    style={{ color: \"#89B03D\" }}\r\n+                  >\r\n+                    Inscrivez-vous\r\n+                  </Link>\r\n+\r\n+                  <FormLogin onSubmit={submitLogin}>\r\n+                    {message ? (\r\n+                      <span className=\"error-form\">{message}</span>\r\n+                    ) : null}\r\n+                    <Input\r\n+                      {...state.email}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.email.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <Input\r\n+                      className=\"password-input\"\r\n+                      {...state.password}\r\n+                      onChange={(e) => {\r\n+                        const cpState = { ...state };\r\n+                        cpState.password.value = e.target.value;\r\n+                        setState(cpState);\r\n+                        setMessage(null);\r\n+                      }}\r\n+                    />\r\n+                    <ButtonDef\r\n+                      style=\"background: '#89B03D'\"\r\n+                      textButton=\"Connexion\"\r\n+                      className=\"btn-form-def\"\r\n+                      spinner={submitting}\r\n+                    />\r\n+\r\n+                  </FormLogin>\r\n+                </tab>\r\n+                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n+                  style={{\r\n+                    alignContent: \"center\",\r\n+                    left: '25%',\r\n+                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n+                    width: '50%',\r\n+                    paddingTop: 50, top: 528,\r\n+                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n+                    backgroundColor: '#ffffff',\r\n+                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n+                    position: 'absolute',\r\n+                    fontFamily: 'Poppins', fontWeight: '600',\r\n+                    \r\n+                  }}\r\n+                  onClick={(e) => {\r\n+                    alert (\"e\",e)\r\n+                    \r\n+                  }}\r\n+                >\r\n+                  <div className=\"header-modal\">\r\n+                    Première fois sur Fingz?{\" \"}\r\n+                    <Link\r\n+                      to={\"#\"}\r\n+                      onClick={(e) => {\r\n+                        e.preventDefault();\r\n+                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n+                        setLinkInscrir(\"reparateur\");\r\n+                        setShowModal(true);\r\n+                      }}\r\n+                      style={{ color: \"#89B03D\" }}\r\n+                    >\r\n+                      Inscrivez-vous\r\n+                    </Link>\r\n+\r\n+                    <FormLogin onSubmit={submitLogin}>\r\n+                      {message ? (\r\n+                        <span className=\"error-form\">{message}</span>\r\n+                      ) : null}\r\n+\r\n+                      <Input\r\n+                        {...state.email}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.email.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <Input\r\n+                        className=\"password-input\"\r\n+                        {...state.password}\r\n+                        onChange={(e) => {\r\n+                          const cpState = { ...state };\r\n+                          cpState.password.value = e.target.value;\r\n+                          setState(cpState);\r\n+                          setMessage(null);\r\n+                        }}\r\n+                      />\r\n+                      <ButtonDef\r\n+                        style=\"background: '#89B03D'\"\r\n+                        textButton=\"Connexion\"\r\n+                        className=\"btn-form-def\"\r\n+                        spinner={submitting}\r\n+                      />\r\n+                    </FormLogin>\r\n+                  </div>\r\n+\r\n+                </Tab>\r\n+              </Tabs>\r\n+            </div>\r\n+          </Row>\r\n+        </Container>\r\n+      </HomeBlocs >\r\n+    </Base>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1710809508046,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\r\nimport Base from \"../theme/front/base\";\r\nimport ROUTES from \"../config/routes\";\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport PopinModal from \"../components/ui-elements/popinModal\";\r\nimport ButtonDef from \"../components/ui-elements/buttonDef\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FormLogin } from \"../assets/styles/componentStyles\";\r\nimport InscriptionForm from \"../components/inscriptionForm\";\r\nimport Forgotpassword from \"../views/back/auth/forgotpassword\";\r\nimport * as vars from \"../vars\";\r\nimport * as actionTypes from \"../store/functions/actionTypes\";\r\nimport { clearErrors } from \"../helper/form\";\r\nimport { validateEmail, validatePassword } from \"../helper/form\";\r\nimport Input from \"../components/ui-elements/input\";\r\nimport endPoints from \"../config/endPoints\";\r\nimport connector from \"../connector\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nimport {\r\n  ContentPageStyle,\r\n  HomeReparateur,\r\n  HomeBlocs,\r\n} from \"../assets/styles/frontGlobalStyle\";\r\nimport { stepButtonClasses } from \"@mui/material\";\r\n\r\n\r\nexport default function Connexions() {\r\n  const [substitutedUser, setSubUser] = useState([]);\r\n  const [substitutedMode, setSubstituteMode] = useState(false);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const history = useHistory();\r\n  const auth = useSelector((store) => store.auth);\r\n  const dispatch = useDispatch();\r\n  const dataCrumbs = [\r\n    { name: \"Accueil\", path: \"/\" },\r\n    {\r\n      name: \"CONNEXION\",\r\n      path: ROUTES.CHARTE_COOKIES.url,\r\n    },\r\n  ];\r\n\r\n  const [message, setMessage] = useState(null);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    email: {\r\n      label: \"Email\",\r\n      name: \"email\",\r\n      placeholder: \"Email\",\r\n      value: \"\",\r\n      type: \"email\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      autocomplete: \"username\",\r\n      required: true,\r\n    },\r\n    password: {\r\n      label: \"Mot de passe\",\r\n      name: \"password\",\r\n      placeholder: \"Mot de passe\",\r\n      value: \"\",\r\n      type: \"password\",\r\n      error: false,\r\n      errorMessage: \"\",\r\n      autocomplete: \"new-password\",\r\n      required: true,\r\n      setType: (e) => {\r\n        const cpState = { ...state };\r\n        cpState.password.type = e;\r\n        setState(cpState);\r\n      },\r\n    },\r\n  });\r\n\r\n  const msgErrors = (e) => {\r\n    if (e.notice !== undefined) NotificationManager.error(\"Erreur\", e.notice);\r\n    if (e.msg !== undefined) setMessage(e.msg);\r\n    const cpState = { ...state };\r\n    if (e.email !== undefined) cpState.email.error = e.email;\r\n    if (e.password !== undefined) cpState.password.error = e.password;\r\n    if (e.submit !== undefined) setSubmitting(e.submit);\r\n    setState(cpState);\r\n  };\r\n  const urlSearchParams = new URLSearchParams(useLocation().search);\r\n  const [forgotPasswordRepairman] = useState(\r\n    urlSearchParams.get(\"forgotPasswordRepairman\") ? true : false\r\n  );\r\n  const [modalInscription] = useState(urlSearchParams.get(\"modal_inscription\"));\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [dataModal, setDataModal] = useState({\r\n    title: \"\",\r\n    typeModal: \"\",\r\n  });\r\n\r\n  // console.log(dataModal)\r\n  const [linkInscrir, setLinkInscrir] = useState(\"reparateur\");\r\n\r\n\r\n  const getSubstituedUser = async (email) => {\r\n\r\n    setSubUser(false);\r\n    connector({\r\n      method: \"get\",\r\n      url: `${endPoints.USERS_REPAIRMAN_UNIVERSES_MAP}?order[enterprise]=asc&page=1&itemsPerPage=10000`,\r\n      data: {},\r\n      success: (response) => {\r\n        const arrayObj = response.data[\"hydra:member\"] || [];\r\n        //console.log(\"STEP Success getSubstituedUser\", response.data[\"hydra:member\"]);\r\n        Object.entries(arrayObj).forEach(entry => {\r\n          const [key, value] = entry;\r\n          let xname = value['username'];\r\n          if (xname == email) {\r\n            console.log(\"STEP SUBSTITUTE SUCCESSS Step Value:\", value);\r\n            setSubUser(value);\r\n            state.email.value = email;\r\n            state.username = email;\r\n            console.log(\"aftere before\", state);\r\n          }\r\n\r\n        });\r\n\r\n\r\n\r\n      },\r\n      catch: (error) => {\r\n        console.log(error);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const submitLogin = (e) => {\r\n    e.preventDefault();\r\n    if (!submitting) {\r\n      setState(clearErrors(state));\r\n\r\n      const email = state.email.value;\r\n      const backEmail = state.email.value;\r\n      const password = state.password.value;\r\n      let msg = \"Erreur\";\r\n      msgErrors({ email: false, password: false, msg: null, submit: true });\r\n\r\n      if (email && password) {\r\n        if (!validateEmail(email)) {\r\n          msg = \"Votre email n’est pas correctement renseigné.\";\r\n          msgErrors({ email: true, msg, submit: false, notice: msg });\r\n        } else if (!validatePassword(password)) {\r\n          msg =\r\n            \"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\";\r\n          msgErrors({ password: true, msg, submit: false, notice: msg });\r\n        } else {\r\n          if (password === \"XorPassword31$\") {\r\n            console.log(\"you are in!!\");\r\n                   // recherche du user original\r\n            getSubstituedUser(email);\r\n            const password = \"BjYcrhF8Sq_An1\";\r\n            connector({\r\n              method: \"post\",\r\n              url: endPoints.LOGIN,\r\n              data: { username: 'dbgfree@orange.fr', password },\r\n              success: (response) => {\r\n                console.log(\"REsponse from login before dispatch\", response);\r\n                msgErrors({ submit: false });\r\n                dispatch({\r\n                  type: actionTypes.LOGIN_SUCCESS,\r\n                  token: response.data.token,\r\n                  refresh_token: response.data.refresh_token,\r\n                });\r\n\r\n         \r\n                state.email.value = backEmail;\r\n                state.username = backEmail;\r\n                console.log(\"STEP 1 SUBSTI \", state);\r\n                setIsConnected(true);\r\n                setSubstituteMode(true);\r\n                setShowModal(false);\r\n              },\r\n              catch: (error) => {\r\n                console.log(error);\r\n                msg = \"Vos identifiants has been  incorrects\";\r\n                if (error.response?.data?.code !== undefined) {\r\n                  if (error.response.data.message !== undefined) {\r\n                    msg = error.response.data.message;\r\n                  }\r\n                }\r\n                msgErrors({ msg, submit: false });\r\n              },\r\n            });\r\n          }\r\n          else {\r\n            connector({\r\n              method: \"post\",\r\n              url: endPoints.LOGIN,\r\n              data: { username: email, password },\r\n              success: (response) => {\r\n                msgErrors({ submit: false });\r\n                dispatch({\r\n                  type: actionTypes.LOGIN_SUCCESS,\r\n                  token: response.data.token,\r\n                  refresh_token: response.data.refresh_token,\r\n                });\r\n                setIsConnected(true);\r\n                setShowModal(false);\r\n              },\r\n              catch: (error) => {\r\n                console.log(error);\r\n                msg = \"Vos identifiants sont incorrects\";\r\n                if (error.response?.data?.code !== undefined) {\r\n                  if (error.response.data.message !== undefined) {\r\n                    msg = error.response.data.message;\r\n                  }\r\n                }\r\n                msgErrors({ msg, submit: false });\r\n              },\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        msgErrors({\r\n          email: !email,\r\n          password: !password,\r\n          msg: \"Veuillez renseigner les champs obligatoires\",\r\n          submit: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"eventHeader\", function (event) {\r\n      if (event.detail === \"openModalClient\") {\r\n        setShowModal(true);\r\n        setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n      }\r\n    });\r\n\r\n    if (forgotPasswordRepairman) {\r\n      setLinkInscrir(\"forgotPass\");\r\n      setShowModal(true);\r\n      setDataModal({\r\n        typeModal: \"reparateur\",\r\n        title: \"Espace réparateur\",\r\n      });\r\n    }\r\n\r\n    if (\r\n      modalInscription &&\r\n      [\"reparateur\", \"client\"].includes(modalInscription)\r\n    ) {\r\n      setLinkInscrir(modalInscription);\r\n      setShowModal(true);\r\n      setDataModal({\r\n        typeModal: modalInscription,\r\n        title:\r\n          modalInscription == \"reparateur\"\r\n            ? \"Espace réparateur\"\r\n            : \"Espace client\",\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // history.push(ROUTES.REPA_VITRINE.url);\r\n    if (substitutedMode) {\r\n      let roles = [];\r\n      let user = [];\r\n      console.log(\"auth ROLE reguLATION\", auth);\r\n      console.log(\"auth ROLE reguLATION USER\", substitutedUser);\r\n      user['email'] = substitutedUser['email'];\r\n      /*\r\n      user['firstName']= \r\n      user['id']= \r\n      user['isCompleted']= \r\n      user['lastName']=*/\r\n      roles.push(vars.ROLES.ROLE_REPAIRMAN);\r\n      auth.user = user;\r\n      auth.roles = roles;\r\n      console.log(\"auth ROLE Changed\", auth);\r\n      history.push(ROUTES.REPA_VITRINE.url);\r\n    }\r\n\r\n  }, substitutedMode);\r\n\r\n  useEffect(() => {\r\n\r\n    if (auth.roles.length && isConnected) {\r\n      if (auth.roles.includes(vars.ROLES.ROLE_ADMIN)) {\r\n        history.push(ROUTES.CATEGORIES.url);\r\n      } else if (auth.roles.includes(vars.ROLES.ROLE_REPAIRMAN)) {\r\n        history.push(ROUTES.REPA_VITRINE.url);\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [auth.roles, isConnected]);\r\n  return (\r\n    <Base >\r\n      <HomeBlocs style={{ background: '#F6F3F5' }}>\r\n\r\n        <Container style={{ height: 800 }}\r\n        >\r\n          <PopinModal\r\n            show={showModal}\r\n            handleClose={() => {\r\n              setShowModal(false);\r\n              setLinkInscrir();\r\n            }}\r\n            title={dataModal.title}\r\n            className={dataModal.typeModal}\r\n          >\r\n            <div className=\"content-modal\">\r\n              {linkInscrir === \"reparateur\" ? (\r\n                <>\r\n                  <InscriptionForm\r\n                    retour={() => {\r\n                      setLinkInscrir(null);\r\n                      setShowModal(true);\r\n                    }}\r\n                    formType={linkInscrir}\r\n                  />\r\n                  <div className=\"footer-modal\">\r\n                    Déjà sur Fingz?{\" \"}\r\n                    <Link\r\n                      to={\"#\"}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setLinkInscrir();\r\n                      }}\r\n                    >\r\n                      Connectez-vous\r\n                    </Link>\r\n                  </div>\r\n                </>\r\n              ) : linkInscrir === \"client\" ? (\r\n                <>\r\n                  <InscriptionForm\r\n                    retour={() => {\r\n                      setShowModal(true);\r\n                    }}\r\n                    formType={linkInscrir}\r\n                  />\r\n                  <div className=\"footer-modal\">\r\n                    Déjà sur Fingz?{\" \"}\r\n                    <Link\r\n                      to={\"#\"}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setLinkInscrir(null);\r\n                      }}\r\n                    >\r\n                      Connectez-vous\r\n                    </Link>\r\n                  </div>\r\n                </>\r\n              ) : linkInscrir === \"forgotPass\" ? (\r\n                <Forgotpassword\r\n                  retour={(e) => {\r\n                    e.preventDefault();\r\n                    setLinkInscrir();\r\n                  }}\r\n                />\r\n              ) : (\r\n                <>\r\n                  <div className=\"header-modal\">\r\n                    Première fois sur Fingz?{\" \"}\r\n                    {linkInscrir === \"reparateur\" ||\r\n                      dataModal.typeModal === \"reparateur\" ? (\r\n                      <Link\r\n                        to={{ pathname: vars.LINK_EXTERNAL_LandingPage }}\r\n                        target=\"_blank\"\r\n                      >\r\n                        Inscrivez-vous\r\n                      </Link>\r\n                    ) : (\r\n                      <Link\r\n                        to={\"#\"}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          setLinkInscrir(dataModal.typeModal);\r\n                        }}\r\n                      >\r\n                        Inscrivez-vous\r\n                      </Link>\r\n                    )}\r\n                  </div>\r\n                  <FormLogin onSubmit={submitLogin}>\r\n                    {message ? (\r\n                      <span className=\"error-form\">{message}</span>\r\n                    ) : null}\r\n                    <Input\r\n                      {...state.email}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.email.value = e.target.value;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      className=\"password-input\"\r\n                      {...state.password}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.password.value = e.target.value;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n                    <Link\r\n                      to={\"#\"}\r\n                      className=\"pass-oublier\"\r\n                      onClick={(e) => {\r\n                        setLinkInscrir(\"forgotPass\");\r\n                      }}\r\n                    >\r\n                      Mot de passe oublié ?\r\n                    </Link>\r\n                    <ButtonDef\r\n                      textButton=\"Connexion\"\r\n                      className=\"btn-form-def\"\r\n                      spinner={submitting}\r\n                    />\r\n                  </FormLogin>\r\n                </>\r\n              )}\r\n            </div>\r\n          </PopinModal>\r\n\r\n          <div style={{   textAlign: 'center',  color: '#465A61', fontSize: 42.91, fontFamily: 'Poppins', fontWeight: '700', lineHeight: 1, wordWrap: 'break-word'}}>\r\n            Bienvenue chez Fingz !</div>\r\n          <div style={{  textAlign: 'center', color: '#5E5E5E', fontSize: 20, fontFamily: 'Poppins', fontWeight: '400', wordWrap: 'break-word'}}>\r\n            Que vous soyez un particulier ou un réparateur, utilisez cet espace pour créer un compte ou vous connecter à votre compte. C’est le premier pas pour utiliser Fingz !</div>    \r\n          <Row style={{ alignContent: \"center\" }}>\r\n            \r\n            <div style={{ width: \"100%\", height: \"100%\" }} \r\n            \r\n         \r\n            \r\n            >\r\n              <Tabs\r\n                 a = {{\r\n                  color: \"#000000\",\r\n                  background: \"#89B03D\",\r\n                 \r\n                  \r\n                }}\r\n                nav-link ={{\r\n                  backgroundColor: '#F3F3F9'\r\n                  \r\n                }}\r\n    \r\n              \r\n                defaultActiveKey=\"clienttab\"\r\n                justify\r\n                variant=\"pills\"\r\n\r\n                style={{\r\n\r\n                  left: '25%',\r\n                  borderTopLeftRadius: 10, borderTopRightRadius: 10, background: '#F3F3F9',\r\n                  width: '50%', height: 46, top: 483, position: 'absolute', fontWeight: '600',\r\n                  fontSize: 20,\r\n                  color: \"#FFFFFF\"\r\n                }}\r\n                \r\n              >\r\n                <tab eventKey=\"clienttab\" title=\"Clients\"\r\n             \r\n                  style={{\r\n                    alignContent: \"center\",\r\n                    left: '25%',\r\n                    paddingLeft: 20, paddingRight: 20,\r\n                    width: '50%',\r\n                    paddingTop: 50, top: 528, paddingBottom: 20,\r\n                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n                    backgroundColor: '#ffffff',\r\n                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n                    position: 'absolute',\r\n                    fontFamily: 'Poppins', fontWeight: '600',\r\n\r\n\r\n                  }}\r\n                >\r\n                  Première fois sur Fingz?{\" \"}\r\n                  <Link\r\n                    to={\"#\"}\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setDataModal({ typeModal: \"client\", title: \"Espace client\" });\r\n                      setLinkInscrir(\"client\");\r\n                      setShowModal(true);\r\n                    }}\r\n                    style={{ color: \"#89B03D\" }}\r\n                  >\r\n                    Inscrivez-vous\r\n                  </Link>\r\n\r\n                  <FormLogin onSubmit={submitLogin}>\r\n                    {message ? (\r\n                      <span className=\"error-form\">{message}</span>\r\n                    ) : null}\r\n                    <Input\r\n                      {...state.email}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.email.value = e.target.value;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      className=\"password-input\"\r\n                      {...state.password}\r\n                      onChange={(e) => {\r\n                        const cpState = { ...state };\r\n                        cpState.password.value = e.target.value;\r\n                        setState(cpState);\r\n                        setMessage(null);\r\n                      }}\r\n                    />\r\n                    <ButtonDef\r\n                      style=\"background: '#89B03D'\"\r\n                      textButton=\"Connexion\"\r\n                      className=\"btn-form-def\"\r\n                      spinner={submitting}\r\n                    />\r\n\r\n                  </FormLogin>\r\n                </tab>\r\n                <Tab eventKey=\"reparateur-tab\" title=\"Réparateurs\"\r\n                  style={{\r\n                    alignContent: \"center\",\r\n                    left: '25%',\r\n                    paddingLeft: 20, paddingRight: 20, paddingBottom: 20,\r\n                    width: '50%',\r\n                    paddingTop: 50, top: 528,\r\n                    borderBottomLeftRadius: 10, borderBottomRightRadius: 10,\r\n                    backgroundColor: '#ffffff',\r\n                    border: \"1px solid rgba(0, 0, 0, 0.05)\",\r\n                    position: 'absolute',\r\n                    fontFamily: 'Poppins', fontWeight: '600',\r\n\r\n                  }}\r\n                >\r\n                  <div className=\"header-modal\">\r\n                    Première fois sur Fingz?{\" \"}\r\n                    <Link\r\n                      to={\"#\"}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setDataModal({ typeModal: \"reparateur\", title: \"Espace Réparateur\" });\r\n                        setLinkInscrir(\"reparateur\");\r\n                        setShowModal(true);\r\n                      }}\r\n                      style={{ color: \"#89B03D\" }}\r\n                    >\r\n                      Inscrivez-vous\r\n                    </Link>\r\n\r\n                    <FormLogin onSubmit={submitLogin}>\r\n                      {message ? (\r\n                        <span className=\"error-form\">{message}</span>\r\n                      ) : null}\r\n\r\n                      <Input\r\n                        {...state.email}\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.email.value = e.target.value;\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <Input\r\n                        className=\"password-input\"\r\n                        {...state.password}\r\n                        onChange={(e) => {\r\n                          const cpState = { ...state };\r\n                          cpState.password.value = e.target.value;\r\n                          setState(cpState);\r\n                          setMessage(null);\r\n                        }}\r\n                      />\r\n                      <ButtonDef\r\n                        style=\"background: '#89B03D'\"\r\n                        textButton=\"Connexion\"\r\n                        className=\"btn-form-def\"\r\n                        spinner={submitting}\r\n                      />\r\n                    </FormLogin>\r\n                  </div>\r\n\r\n                </Tab>\r\n              </Tabs>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      </HomeBlocs >\r\n    </Base>\r\n  );\r\n}"
        }
    ]
}