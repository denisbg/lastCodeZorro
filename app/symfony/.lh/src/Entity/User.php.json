{
    "sourceFile": "src/Entity/User.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1707086536989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707086646677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,9 +475,9 @@\n \r\n     /**\r\n      * @ORM\\Column(type=\"float\", nullable=true)\r\n      * @Assert\\NotBlank(groups={})\r\n-     * @Groups({\"write:user\", \"read:user\",\"read:user:repairman\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n+     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"read:user:repairman\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n      */\r\n     private ?float $latitudeBilling;\r\n \r\n     /**\r\n"
                }
            ],
            "date": 1707086536989,
            "name": "Commit-0",
            "content": "<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Entity;\r\n\r\nuse App\\Repository\\UserRepository;\r\nuse DateTime;\r\nuse DateTimeInterface;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Doctrine\\Common\\Collections\\Collection;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\nuse App\\Entity\\Traits\\IdentifiableTrait;\r\nuse App\\Entity\\Traits\\TimestampableTrait;\r\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\r\nuse ApiPlatform\\Core\\Annotation\\ApiFilter;\r\nuse App\\Controller\\Api\\CreateRepairManAction;\r\nuse App\\Controller\\Api\\CreateClientAction;\r\nuse App\\Controller\\Api\\CreateAdminAction;\r\nuse App\\Controller\\Api\\PutUserShowcasesAction;\r\nuse App\\Controller\\Api\\PutUserAction;\r\nuse App\\Controller\\Api\\PutUserLastSeenAction;\r\nuse App\\Controller\\Api\\GetUsersRepairManAction;\r\nuse App\\Controller\\Api\\GetUsersClientAction;\r\nuse App\\Controller\\Api\\GetUserRepairManAction;\r\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter;\r\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\SearchFilter;\r\n\r\n/**\r\n * @ORM\\Entity(repositoryClass=UserRepository::class)\r\n * @ORM\\HasLifecycleCallbacks()\r\n * @ApiResource(\r\n *     collectionOperations={\r\n *          \"get_users_repairman\" = {\r\n *              \"pagination_items_per_page\" = 20,\r\n *              \"maximum_items_per_page\" = 80,\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/repairman\",\r\n *              \"controller\" = GetUsersRepairManAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\",\"read:user:repairman\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"get_users_client\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/client\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"controller\" = GetUsersClientAction::class,\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') or is_granted('ROLE_REPAIRMAN')\",\r\n *          },\r\n *          \"get_users_client_list\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/client/list\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user:client\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"get_users_client_devis\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/devis/clients\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') or is_granted('ROLE_REPAIRMAN')\",\r\n *          },\r\n *          \"get_users_client_commands\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/commands/clients\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') or is_granted('ROLE_REPAIRMAN')\",\r\n *          },\r\n *          \"get_users_repairman_devis\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/devis/repairmans\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') or is_granted('ROLE_CLIENT')\",\r\n *          },\r\n *          \"get_users_repairman_commands\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/commands/repairmans\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') or is_granted('ROLE_CLIENT')\",\r\n *          },\r\n *          \"get_users_admin\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/admin\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"get_users_repairman_universes\" = {\r\n *              \"pagination_items_per_page\" = 20,\r\n *              \"maximum_items_per_page\" = 80,\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/users/repairman/universes\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user:gender\",\"read:user:enterprise\",\"read:user:firstName\",\"read:user:lastName\",\"read:user:showcases\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"post_repairman\" = {\r\n *              \"method\" = \"post\",\r\n *              \"path\" = \"/anonymous/user/repairman\",\r\n *              \"controller\" = CreateRepairManAction::class,\r\n *              \"normalization_context\" = {\r\n *                  \"groups\" = {\"read\",\"read:user\",\"read:user:repairman\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"write:user\",\"write:user:repairman\"}\r\n *              },\r\n *               \"validation_groups\"={\"validation:user:create\",\"validation:user:create:password\",\"validation:user:repairman:create\"},\r\n *          },\r\n *          \"post_admin_repairman\" = {\r\n *              \"method\" = \"post\",\r\n *              \"path\" = \"/user/admin/repairman\",\r\n *              \"controller\" = CreateRepairManAction::class,\r\n *              \"normalization_context\" = {\r\n *                  \"groups\" = {\"read\",\"read:user\",\"read:user:repairman\",\"read:user:status\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"write:user\",\"write:user:repairman\",\"write:user:status\"}\r\n *              },\r\n *              \"validation_groups\"={\"validation:user:create\",\"validation:user:repairman:create\"},\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"post_client\" = {\r\n *              \"method\" = \"post\",\r\n *              \"path\" = \"/anonymous/user/client\",\r\n *              \"controller\" = CreateClientAction::class,\r\n *              \"normalization_context\" = {\r\n *                  \"groups\" = {\"read\",\"read:user\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"write:user\"}\r\n *              },\r\n *              \"validation_groups\"={\"validation:user:create\",\"validation:user:create:password\"},\r\n *          },\r\n *          \"post_admin\" = {\r\n *              \"method\" = \"post\",\r\n *              \"path\" = \"/user/admin\",\r\n *              \"controller\" = CreateAdminAction::class,\r\n *              \"normalization_context\" = {\r\n *                  \"groups\" = {\"read\",\"read:user\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"write:user\",\"write:user:status\"}\r\n *              },\r\n *              \"validation_groups\"={\"validation:user:create\"},\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          }\r\n *     },\r\n *     itemOperations={\r\n *          \"get_user\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/user/{id}\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"get_user_repairman\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/user/{id}/repairman\",\r\n *              \"controller\" = GetUserRepairManAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\", \"read:user\", \"read:user:repairman\",\"read:user:showcases\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_REPAIRMAN') and object.getId() == user.getId() and user.getStatus() == 1\",\r\n *          },\r\n *          \"get_user_repairman_benefits\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/user/repairman/{id}/benefits\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\", \"read:user:benefits\"}\r\n *              },\r\n *          },\r\n *          \"get_user_client\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/user/{id}/client\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\", \"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_CLIENT') and object.getId() == user.getId() and user.getStatus() == 1\",\r\n *          },\r\n *          \"get_user_admin\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/user/{id}/admin\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\", \"read:user\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') and object.getId() == user.getId() and user.getStatus() == 1\",\r\n *          },\r\n *          \"put_user_last_seen\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/{id}/lastseen\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:lastseen\" }\r\n *              },\r\n *              \"controller\" = PutUserLastSeenAction::class,\r\n *          },\r\n *          \"put_user_showcases\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/{id}/showcases\",\r\n *              \"controller\" = PutUserShowcasesAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read:user\",\"read:user:showcases\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"edit:user:showcases\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"put_user_repairman\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/{id}/repairman\",\r\n *              \"controller\" = PutUserAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read:user\",\"read:user:repairman\",\"read:user:showcases\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"edit:user:repairman\",\"edit:user:showcases\"}\r\n *              },\r\n *              \"validation_groups\"={\"validation:user:edit\",\"validation:user:repairman:edit\"},\r\n *              \"security\" = \"is_granted('ROLE_REPAIRMAN') and object.getId() == user.getId() and user.getStatus() == 1\",\r\n *          },\r\n *          \"put_user_client\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/{id}/client\",\r\n *              \"controller\" = PutUserAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"edit:user:client\"}\r\n *              },\r\n *              \"validation_groups\"={\"validation:user:edit\"},\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') or (is_granted('ROLE_CLIENT') and object.getId() == user.getId() and user.getStatus() == 1)\",\r\n *          },\r\n *          \"put_user_admin\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/{id}/admin\",\r\n *              \"controller\" = PutUserAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"edit:user:admin\"}\r\n *              },\r\n *              \"validation_groups\"={\"validation:user:edit\"},\r\n *              \"security\" = \"is_granted('ROLE_ADMIN') and object.getId() == user.getId() and user.getStatus() == 1\",\r\n *          },\r\n *          \"put_user_client_addresses\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/{id}/addresses\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:user\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\" = {\"edit:user:addresses\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_CLIENT') and object.getId() == user.getId() and user.getStatus() == 1\",\r\n *          },\r\n *          \"put_admin_repairman\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/user/admin/repairman/{id}\",\r\n *              \"controller\" = PutUserAction::class,\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *     },\r\n * )\r\n * @ApiFilter(OrderFilter::class, properties={\"firstName\", \"lastName\", \"email\", \"enterprise\", \"phone\", \"status\"})\r\n * @ApiFilter(SearchFilter::class, properties={\"id\": \"exact\", \"status\": \"exact\"})\r\n * @method string getUserIdentifier()\r\n */\r\nclass User implements UserInterface\r\n{\r\n    use IdentifiableTrait;\r\n    use TimestampableTrait;\r\n\r\n    const TYPES_STATUS = ['0' => 'En attente', '1' => 'En ligne',  '2' => 'Hors ligne'];\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=180, unique=true)\r\n     * @Groups({\"write:user\",\"read:user\",\"read:command:user\",\"edit:user:repairman\",\"edit:user:client\"})\r\n     */\r\n    private ?string $username;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"array\")\r\n     * @Groups({\"read:user\",\"read:command:user\"})\r\n     */\r\n    private ?array $roles = [];\r\n\r\n    /**\r\n     * @var string The hashed password\r\n     * @ORM\\Column(type=\"string\")\r\n     * @Assert\\NotBlank(groups={\"validation:user:create:password\",\"validation:user:edit\"})\r\n     * @Groups({\"write:user\",\"edit:user:repairman\",\"edit:user:client\"})\r\n     */\r\n    private string $password;\r\n\r\n    /**\r\n     * @Assert\\NotBlank(groups={\"validation:user:create:password\"})\r\n     * @Assert\\Regex(\r\n     *     pattern=\"/^(?=\\S*[a-z])(?=\\S*[A-Z])(?=\\S*\\d)(?=\\S*([^\\w\\s]|[_]))\\S{8,}$/\",\r\n     *     message=\"Votre mot de passe doit contenir au moins 8 caractères, 1 majuscule, 1 chiffre et 1 caractère spécial.\",\r\n     *     groups={\"validation:user:create:password\",\"validation:user:edit\"}\r\n     * )\r\n     * @Assert\\Length(max=4096)\r\n     * @Groups({\"write:user\",\"edit:user:repairman\",\"edit:user:client\"})\r\n     */\r\n    private string $plainPassword = \"\";\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=Universe::class, inversedBy=\"users\")\r\n     * @Groups({\"read:user:showcases\",\"edit:user:showcases\"})\r\n     */\r\n    private $showcases;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     * @Assert\\NotBlank(groups={\"validation:user:create\",\"validation:user:edit\"})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"read:user:firstName\",\"read:benefit:user\",\"read:user:repairman:list\",\"edit:user:repairman\",\"edit:user:client\",\"edit:user:admin\",\"read:user:client\"})\r\n     */\r\n    private ?string $firstName;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     * @Assert\\NotBlank(groups={\"validation:user:create\",\"validation:user:edit\"})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"read:user:lastName\",\"read:benefit:user\",\"read:user:repairman:list\",\"edit:user:repairman\",\"edit:user:client\",\"edit:user:admin\",\"read:user:client\"})\r\n     */\r\n    private ?string $lastName;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, unique=true)\r\n     * @Assert\\NotBlank(groups={\"validation:user:create\",\"validation:user:edit\"})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"read:user:repairman:list\",\"edit:user:repairman\",\"edit:user:client\",\"edit:user:admin\"})\r\n     */\r\n    private ?string $email;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=NewService::class, mappedBy=\"user\")\r\n     */\r\n    private $newServices;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Benefit::class, mappedBy=\"user\")\r\n     * @Groups({\"read:user:benefits\"})\r\n     */\r\n    private $benefits;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=30)\r\n     * @Assert\\NotBlank(groups={\"validation:user:create\",\"validation:user:edit\"})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"read:user:gender\",\"edit:user:repairman\",\"edit:user:client\",\"edit:user:admin\",\"read:user:client\"})\r\n     */\r\n    private ?string $gender;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"smallint\", options={\"default\" : 0})\r\n     * @Groups({\"write:user:status\", \"read:user\", \"read:command:user\",\"read:user:status\", \"read:user:repairman\",\"edit:user:client\",\"edit:user:admin\"})\r\n     */\r\n    private ?int $status = 0;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\", nullable=true)\r\n     * @Groups({\"read:user\",\"read:command:user\",\"read:user:repairman\"})\r\n     */\r\n    private ?DateTime $lastConnection;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=30, nullable=true)\r\n     * @Assert\\NotBlank(groups={\"validation:user:repairman:create\",\"validation:user:repairman:edit\"})\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $SIRET;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Assert\\NotBlank(groups={\"validation:user:repairman:create\",\"validation:user:repairman:edit\"})\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\",\"read:benefit:user\",\"read:user:enterprise\",\"read:user\",\"read:command:user\"})\r\n     */\r\n    private ?string $enterprise;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Assert\\NotBlank(groups={\"validation:user:repairman:create\",\"validation:user:repairman:edit\"})\r\n     * @Groups({\"read:user\",\"read:command:user\",\"write:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $address;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $additionalAddress;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=30, nullable=true)\r\n     * @Assert\\NotBlank(groups={\"validation:user:repairman:create\",\"validation:user:repairman:edit\"})\r\n     * @Groups({\"read:user\",\"read:command:user\",\"write:user:repairman\",\"edit:user:repairman\",\"read:user:postalCode\"})\r\n     */\r\n    private ?string $postalCode;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Assert\\NotBlank(groups={\"validation:user:repairman:create\",\"validation:user:repairman:edit\"})\r\n     * @Groups({\"read:user\",\"read:command:user\",\"write:user:repairman\",\"edit:user:repairman\",\"read:user:city\"})\r\n     */\r\n    private  ?string $city;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private $addressBilling;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $additionalAddressBilling;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=30, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $postalCodeBilling;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private  ?string $cityBilling;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=30, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $intraCommunityVAT;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=30, nullable=true)\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"edit:user:repairman\",\"edit:user:admin\"})\r\n     */\r\n    private ?string $phone;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"float\", nullable=true)\r\n     * @Assert\\NotBlank(groups={})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n     */\r\n    private ?float $latitude;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"float\", nullable=true)\r\n     * @Assert\\NotBlank(groups={})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n     */\r\n    private ?float $longitude;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"float\", nullable=true)\r\n     * @Assert\\NotBlank(groups={})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:user:repairman\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n     */\r\n    private ?float $latitudeBilling;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"float\", nullable=true)\r\n     * @Assert\\NotBlank(groups={})\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n     */\r\n    private ?float $longitudeBilling;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=TypeCompany::class, inversedBy=\"users\")\r\n     * @Assert\\NotBlank(groups={\"validation:user:repairman:create\",\"validation:user:repairman:edit\"})\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?TypeCompany $TypeCompany;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"boolean\", options={\"default\" : true})\r\n     * @Groups({\"read:user:repairman\"})\r\n     */\r\n    private ?bool $isRegistrationCompleted = true;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $description;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"array\", nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\",\"read:user:achievements\"})\r\n     */\r\n    private ?array $achievements;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $website;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $twitter;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $facebook;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $instagram;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $linkedIn;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user:repairman\", \"read:user:repairman\",\"edit:user:repairman\"})\r\n     */\r\n    private ?string $youTube;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:service:details\", \"read:benefit:service\",\"read:benefit:user\",\"read:user:repairman\",\"edit:user:repairman\",\"write:user\",\"read:user\",\"read:command:user\"}) \r\n     */\r\n    private ?string $picture = null;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Command::class, mappedBy=\"client\", orphanRemoval=true)\r\n     * @Groups({\"read:command:related\"})\r\n     */\r\n    private $commands;\r\n\r\n    /**\r\n     * @Groups({\"read:user\",\"read:command:user\"})\r\n     */\r\n    private ?array $payload = [];\r\n\r\n    /**\r\n     * @Groups({\"read:user\",\"read:command:user\"})\r\n     */\r\n    private ?int $totalCommands = 0;\r\n\r\n    /**\r\n     * @Groups({\"read:user\",\"read:command:user\"})\r\n     */\r\n    private ?int $totalDevis = 0;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=Thread::class, mappedBy=\"users\")\r\n     */\r\n    private $threads;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Message::class, mappedBy=\"user\", orphanRemoval=true)\r\n     */\r\n    private $messages;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\", nullable=true)\r\n     * @Groups({\"read:lastseen\", \"read:user\",\"read:command:user\"})\r\n     */\r\n    private $lastSeen;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Address::class, mappedBy=\"user\", orphanRemoval=true,cascade={\"persist\", \"remove\"})\r\n     * @Groups({\"write:user\", \"read:user\",\"edit:user:addresses\"})\r\n     */\r\n    private $addresses;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    private $stripeCustomerId;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    private $stripeAccountId;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    private $stripeAccountLink;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:user\",\"read:command:user\"})\r\n     */\r\n    private $stripeAccountToken;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n     */\r\n    private $placeId = null;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"write:user\", \"read:user\",\"read:command:user\",\"edit:user:repairman\",\"read:benefit:user\"})\r\n     */\r\n    private $placeIdBilling = null;\r\n\r\n    /**\r\n     * @Groups({\"read:benefit:user\",\"read:user:repairman\"})\r\n     */\r\n    private $googleRating;\r\n\r\n    /**\r\n     * @Groups({\"read:benefit:user\",\"read:user:repairman\"})\r\n     */\r\n    private $googleReviews = [];\r\n\r\n    /**\r\n     * @Groups({\"write:user\", \"read:user\"})\r\n     */\r\n    private $captcha = null;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:user\",\"read:command:user\"})\r\n     */\r\n    private $stripePersonToken;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->showcases = new ArrayCollection();\r\n        $this->newServices = new ArrayCollection();\r\n        $this->benefits = new ArrayCollection();\r\n        $this->commands = new ArrayCollection();\r\n        $this->adresses = new ArrayCollection();\r\n        $this->threads = new ArrayCollection();\r\n        $this->messages = new ArrayCollection();\r\n        $this->addresses = new ArrayCollection();\r\n    }\r\n\r\n    /**\r\n     * A visual identifier that represents this user.\r\n     *\r\n     * @see UserInterface\r\n     */\r\n    public function getUsername(): string\r\n    {\r\n        return (string) $this->username;\r\n    }\r\n\r\n    public function setUsername(string $username)\r\n    {\r\n        $this->username = empty($username) ? $this->email : $username;\r\n    }\r\n\r\n    /**\r\n     * @see UserInterface\r\n     */\r\n    public function getRoles(): array\r\n    {\r\n        $roles = $this->roles;\r\n        // guarantee every user at least has ROLE_USER\r\n        $roles[] = 'ROLE_USER';\r\n\r\n        return array_unique($roles);\r\n    }\r\n\r\n    public function setRoles(array $roles)\r\n    {\r\n        $this->roles = $roles;\r\n    }\r\n\r\n    /**\r\n     * @see UserInterface\r\n     */\r\n    public function getPassword(): string\r\n    {\r\n        return (string) $this->password;\r\n    }\r\n\r\n    public function setPassword(string $password)\r\n    {\r\n        $this->password = $password;\r\n    }\r\n\r\n    /**\r\n     * Returning a salt is only needed, if you are not using a modern\r\n     * hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.\r\n     *\r\n     * @see UserInterface\r\n     */\r\n    public function getSalt(): ?string\r\n    {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @see UserInterface\r\n     */\r\n    public function eraseCredentials()\r\n    {\r\n        // If you store any temporary, sensitive data on the user, clear it here\r\n        // $this->plainPassword = null;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Universe[]\r\n     */\r\n    public function getShowcases(): Collection\r\n    {\r\n        return $this->showcases;\r\n    }\r\n\r\n    public function addShowcase(Universe $showcase)\r\n    {\r\n        if (!$this->showcases->contains($showcase)) {\r\n            $this->showcases[] = $showcase;\r\n        }\r\n    }\r\n\r\n    public function removeShowcase(Universe $showcase)\r\n    {\r\n        $this->showcases->removeElement($showcase);\r\n    }\r\n\r\n    public function getFirstName(): ?string\r\n    {\r\n        return $this->firstName;\r\n    }\r\n\r\n    public function setFirstname(string $firstName)\r\n    {\r\n        $this->firstName = $firstName;\r\n    }\r\n\r\n    public function getlastName(): ?string\r\n    {\r\n        return $this->lastName;\r\n    }\r\n\r\n    public function setlastName(string $lastName)\r\n    {\r\n        $this->lastName = $lastName;\r\n    }\r\n\r\n    public function getFullName(): ?string\r\n    {\r\n        return `{$this->firstName} {$this->lastName}`;\r\n    }\r\n\r\n    public function getEmail(): ?string\r\n    {\r\n        return $this->email;\r\n    }\r\n\r\n    public function setEmail(string $email)\r\n    {\r\n        $this->email = $email;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|NewService[]\r\n     */\r\n    public function getNewServices(): Collection\r\n    {\r\n        return $this->newServices;\r\n    }\r\n\r\n    public function addNewService(NewService $newService)\r\n    {\r\n        if (!$this->newServices->contains($newService)) {\r\n            $this->newServices[] = $newService;\r\n            $newService->setUser($this);\r\n        }\r\n    }\r\n\r\n    public function removeNewService(NewService $newService)\r\n    {\r\n        if ($this->newServices->removeElement($newService)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($newService->getUser() === $this) {\r\n                $newService->setUser(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Benefit[]\r\n     */\r\n    public function getBenefits(): Collection\r\n    {\r\n        return $this->benefits;\r\n    }\r\n\r\n    public function addBenefit(Benefit $benefit)\r\n    {\r\n        if (!$this->benefits->contains($benefit)) {\r\n            $this->benefits[] = $benefit;\r\n            $benefit->setUser($this);\r\n        }\r\n    }\r\n\r\n    public function removeBenefit(Benefit $benefit)\r\n    {\r\n        if ($this->benefits->removeElement($benefit)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($benefit->getUser() === $this) {\r\n                $benefit->setUser(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function getGender(): ?string\r\n    {\r\n        return $this->gender;\r\n    }\r\n\r\n    public function setGender(string $gender)\r\n    {\r\n        $this->gender = $gender;\r\n    }\r\n\r\n    public function getStatus(): ?int\r\n    {\r\n        return $this->status;\r\n    }\r\n\r\n    public function setStatus(int $status)\r\n    {\r\n        $this->status = $status;\r\n    }\r\n\r\n    public function getLastConnection(): ?DateTimeInterface\r\n    {\r\n        return $this->lastConnection;\r\n    }\r\n\r\n    public function setLastConnection(?DateTimeInterface $lastConnection)\r\n    {\r\n        $this->lastConnection = $lastConnection;\r\n    }\r\n\r\n    public function getSIRET(): ?string\r\n    {\r\n        return $this->SIRET;\r\n    }\r\n\r\n    public function setSIRET(string $SIRET)\r\n    {\r\n        $this->SIRET = $SIRET;\r\n    }\r\n\r\n    public function getEnterprise(): ?string\r\n    {\r\n        return $this->enterprise;\r\n    }\r\n\r\n    public function setEnterprise(?string $enterprise)\r\n    {\r\n        $this->enterprise = $enterprise;\r\n    }\r\n\r\n    public function getAddress(): ?string\r\n    {\r\n        return $this->address;\r\n    }\r\n\r\n    public function setAddress(?string $address)\r\n    {\r\n        $this->address = $address;\r\n    }\r\n\r\n    public function getAdditionalAddress(): ?string\r\n    {\r\n        return $this->additionalAddress;\r\n    }\r\n\r\n    public function setAdditionalAddress(?string $additionalAddress)\r\n    {\r\n        $this->additionalAddress = $additionalAddress;\r\n    }\r\n\r\n    public function getPostalCode(): ?string\r\n    {\r\n        return $this->postalCode;\r\n    }\r\n\r\n    public function setPostalCode(?string $postalCode)\r\n    {\r\n        $this->postalCode = $postalCode;\r\n    }\r\n\r\n    public function getCity(): ?string\r\n    {\r\n        return $this->city;\r\n    }\r\n\r\n    public function setCity(?string $city)\r\n    {\r\n        $this->city = $city;\r\n    }\r\n    public function getAddressBilling(): ?string\r\n    {\r\n        return $this->addressBilling;\r\n    }\r\n\r\n    public function setAddressBilling(?string $addressBilling)\r\n    {\r\n        $this->addressBilling = $addressBilling;\r\n    }\r\n\r\n    public function getAdditionalAddressBilling(): ?string\r\n    {\r\n        return $this->additionalAddressBilling;\r\n    }\r\n\r\n    public function setAdditionalAddressBilling(?string $additionalAddressBilling)\r\n    {\r\n        $this->additionalAddressBilling = $additionalAddressBilling;\r\n    }\r\n\r\n    public function getPostalCodeBilling(): ?string\r\n    {\r\n        return $this->postalCodeBilling;\r\n    }\r\n\r\n    public function setPostalCodeBilling(?string $postalCodeBilling)\r\n    {\r\n        $this->postalCodeBilling = $postalCodeBilling;\r\n    }\r\n\r\n    public function getCityBilling(): ?string\r\n    {\r\n        return $this->cityBilling;\r\n    }\r\n\r\n    public function setCityBilling(?string $cityBilling)\r\n    {\r\n        $this->cityBilling = $cityBilling;\r\n    }\r\n\r\n    public function getIntraCommunityVAT(): ?string\r\n    {\r\n        return $this->intraCommunityVAT;\r\n    }\r\n\r\n    public function setIntraCommunityVAT(?string $intraCommunityVAT)\r\n    {\r\n        $this->intraCommunityVAT = $intraCommunityVAT;\r\n    }\r\n\r\n    public function getPhone(): ?string\r\n    {\r\n        return $this->phone;\r\n    }\r\n\r\n    public function setPhone(?string $phone)\r\n    {\r\n        $this->phone = $phone;\r\n    }\r\n\r\n    public function getLatitude(): ?float\r\n    {\r\n        return $this->latitude;\r\n    }\r\n\r\n    public function setLatitude(?float $latitude)\r\n    {\r\n        $this->latitude = $latitude;\r\n    }\r\n\r\n    public function getLongitude(): ?float\r\n    {\r\n        return $this->longitude;\r\n    }\r\n\r\n    public function setLongitude(?float $longitude)\r\n    {\r\n        $this->longitude = $longitude;\r\n    }\r\n\r\n    public function getLatitudeBilling(): ?float\r\n    {\r\n        return $this->latitudeBilling;\r\n    }\r\n\r\n    public function setLatitudeBilling(?float $latitudeBilling)\r\n    {\r\n        $this->latitudeBilling = $latitudeBilling;\r\n    }\r\n\r\n    public function getLongitudeBilling(): ?float\r\n    {\r\n        return $this->longitudeBilling;\r\n    }\r\n\r\n    public function setLongitudeBilling(?float $longitudeBilling)\r\n    {\r\n        $this->longitudeBilling = $longitudeBilling;\r\n    }\r\n\r\n    public function getTypeCompany(): ?TypeCompany\r\n    {\r\n        return $this->TypeCompany;\r\n    }\r\n\r\n    public function setTypeCompany(?TypeCompany $TypeCompany)\r\n    {\r\n        $this->TypeCompany = $TypeCompany;\r\n    }\r\n\r\n    public function getPlainPassword(): string\r\n    {\r\n        return $this->plainPassword;\r\n    }\r\n\r\n    public function setPlainPassword($password)\r\n    {\r\n        $this->plainPassword = $password;\r\n    }\r\n\r\n    public function __call($name, $arguments)\r\n    {\r\n        // TODO: Implement @method string getUserIdentifier()\r\n    }\r\n\r\n    public function getIsRegistrationCompleted(): ?bool\r\n    {\r\n        return $this->isRegistrationCompleted;\r\n    }\r\n\r\n    public function setIsRegistrationCompleted(bool $isRegistrationCompleted)\r\n    {\r\n        $this->isRegistrationCompleted = $isRegistrationCompleted;\r\n    }\r\n\r\n    public function getDescription(): ?string\r\n    {\r\n        return $this->description;\r\n    }\r\n\r\n    public function setDescription(?string $description)\r\n    {\r\n        $this->description = $description;\r\n    }\r\n\r\n    public function getAchievements(): ?array\r\n    {\r\n        return $this->achievements;\r\n    }\r\n\r\n    public function setAchievements(?array $achievements)\r\n    {\r\n        $this->achievements = $achievements;\r\n    }\r\n\r\n    public function getWebsite(): ?string\r\n    {\r\n        return $this->website;\r\n    }\r\n\r\n    public function setWebsite(?string $website)\r\n    {\r\n        $this->website = $website;\r\n    }\r\n\r\n    public function getTwitter(): ?string\r\n    {\r\n        return $this->twitter;\r\n    }\r\n\r\n    public function setTwitter(?string $twitter)\r\n    {\r\n        $this->twitter = $twitter;\r\n    }\r\n\r\n    public function getFacebook(): ?string\r\n    {\r\n        return $this->facebook;\r\n    }\r\n\r\n    public function setFacebook(?string $facebook)\r\n    {\r\n        $this->facebook = $facebook;\r\n    }\r\n\r\n    public function getInstagram(): ?string\r\n    {\r\n        return $this->instagram;\r\n    }\r\n\r\n    public function setInstagram(?string $instagram)\r\n    {\r\n        $this->instagram = $instagram;\r\n    }\r\n\r\n    public function getLinkedIn(): ?string\r\n    {\r\n        return $this->linkedIn;\r\n    }\r\n\r\n    public function setLinkedIn(?string $linkedIn)\r\n    {\r\n        $this->linkedIn = $linkedIn;\r\n    }\r\n\r\n    public function getYouTube(): ?string\r\n    {\r\n        return $this->youTube;\r\n    }\r\n\r\n    public function setYouTube(?string $youTube)\r\n    {\r\n        $this->youTube = $youTube;\r\n    }\r\n\r\n    public function getPicture(): ?string\r\n    {\r\n        return $this->picture;\r\n    }\r\n\r\n    public function setPicture(?string $picture)\r\n    {\r\n        $this->picture = $picture;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Command[]\r\n     */\r\n    public function getCommands(): Collection\r\n    {\r\n        return $this->commands;\r\n    }\r\n\r\n    public function addCommand(Command $command)\r\n    {\r\n        if (!$this->commands->contains($command)) {\r\n            $this->commands[] = $command;\r\n            $command->setClient($this);\r\n        }\r\n    }\r\n\r\n    public function removeCommand(Command $command)\r\n    {\r\n        if ($this->commands->removeElement($command)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($command->getClient() === $this) {\r\n                $command->setClient(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function getPayload(): ?array\r\n    {\r\n        return $this->payload;\r\n    }\r\n\r\n    public function setPayload(?array $payload)\r\n    {\r\n        $this->payload = $payload;\r\n    }\r\n\r\n    public function getTotalCommands(): ?int\r\n    {\r\n        return $this->totalCommands;\r\n    }\r\n\r\n    public function setTotalCommands(int $totalCommands)\r\n    {\r\n        $this->totalCommands = $totalCommands;\r\n    }\r\n\r\n    public function getTotalDevis(): ?int\r\n    {\r\n        return $this->totalDevis;\r\n    }\r\n\r\n    public function setTotalDevis(int $totalDevis)\r\n    {\r\n        $this->totalDevis = $totalDevis;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Address[]\r\n     */\r\n    public function getAddresses(): Collection\r\n    {\r\n        return $this->addresses;\r\n    }\r\n\r\n    public function addAddress(Address $address)\r\n    {\r\n        if (!$this->addresses->contains($address)) {\r\n            $this->addresses[] = $address;\r\n            $address->setUser($this);\r\n        }\r\n    }\r\n\r\n    public function removeAddress(Address $address)\r\n    {\r\n        if ($this->addresses->removeElement($address)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($address->getUser() === $this) {\r\n                $address->setUser(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Thread[]\r\n     */\r\n    public function getThreads(): Collection\r\n    {\r\n        return $this->threads;\r\n    }\r\n\r\n    public function addThread(Thread $thread)\r\n    {\r\n        if (!$this->threads->contains($thread)) {\r\n            $this->threads[] = $thread;\r\n            $thread->addUser($this);\r\n        }\r\n    }\r\n\r\n    public function removeThread(Thread $thread)\r\n    {\r\n        if ($this->threads->removeElement($thread)) {\r\n            $thread->removeUser($this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Message[]\r\n     */\r\n    public function getMessages(): Collection\r\n    {\r\n        return $this->messages;\r\n    }\r\n\r\n    public function addMessage(Message $message)\r\n    {\r\n        if (!$this->messages->contains($message)) {\r\n            $this->messages[] = $message;\r\n            $message->setUser($this);\r\n        }\r\n    }\r\n\r\n    public function removeMessage(Message $message)\r\n    {\r\n        if ($this->messages->removeElement($message)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($message->getUser() === $this) {\r\n                $message->setUser(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function getLastSeen(): ?\\DateTimeInterface\r\n    {\r\n        return $this->lastSeen;\r\n    }\r\n\r\n    public function setLastSeen(?\\DateTimeInterface $lastSeen)\r\n    {\r\n        $this->lastSeen = $lastSeen;\r\n    }\r\n\r\n    public function getStripeCustomerId(): ?string\r\n    {\r\n        return $this->stripeCustomerId;\r\n    }\r\n\r\n    public function setStripeCustomerId(?string $stripeCustomerId)\r\n    {\r\n        $this->stripeCustomerId = $stripeCustomerId;\r\n    }\r\n\r\n    public function getStripeAccountId(): ?string\r\n    {\r\n        return $this->stripeAccountId;\r\n    }\r\n\r\n    public function setStripeAccountId(?string $stripeAccountId)\r\n    {\r\n        $this->stripeAccountId = $stripeAccountId;\r\n    }\r\n\r\n    public function getStripeAccountLink(): ?string\r\n    {\r\n        return $this->stripeAccountLink;\r\n    }\r\n\r\n    public function setStripeAccountLink(?string $stripeAccountLink)\r\n    {\r\n        $this->stripeAccountLink = $stripeAccountLink;\r\n    }\r\n\r\n    public function getStripeAccountToken(): ?string\r\n    {\r\n        return $this->stripeAccountToken;\r\n    }\r\n\r\n    public function setStripeAccountToken(?string $stripeAccountToken)\r\n    {\r\n        $this->stripeAccountToken = $stripeAccountToken;\r\n    }\r\n\r\n    public function getPlaceId(): ?string\r\n    {\r\n        return $this->placeId;\r\n    }\r\n\r\n    public function setPlaceId(?string $placeId)\r\n    {\r\n        $this->placeId = $placeId;\r\n    }\r\n\r\n    public function getPlaceIdBilling(): ?string\r\n    {\r\n        return $this->placeIdBilling;\r\n    }\r\n\r\n    public function setPlaceIdBilling(?string $placeIdBilling)\r\n    {\r\n        $this->placeIdBilling = $placeIdBilling;\r\n    }\r\n\r\n    public function getGoogleRating(): ?float\r\n    {\r\n        return $this->googleRating;\r\n    }\r\n\r\n    public function setGoogleRating(?float $googleRating)\r\n    {\r\n        $this->googleRating = $googleRating;\r\n    }\r\n\r\n    public function getGoogleReviews(): ?array\r\n    {\r\n        return $this->googleReviews;\r\n    }\r\n\r\n    public function setGoogleReviews(?array $googleReviews)\r\n    {\r\n        $this->googleReviews = $googleReviews;\r\n    }\r\n    \r\n    public function setCaptcha(?string $captcha)\r\n    {\r\n        $this->captcha = $captcha;\r\n    }\r\n\r\n    public function getCaptcha(): ?string\r\n    {\r\n        return $this->captcha;\r\n    }\r\n\r\n    public function getStripePersonToken(): ?string\r\n    {\r\n        return $this->stripePersonToken;\r\n    }\r\n\r\n    public function setStripePersonToken(?string $stripePersonToken)\r\n    {\r\n        $this->stripePersonToken = $stripePersonToken;\r\n    }\r\n}\r\n"
        }
    ]
}