{
    "sourceFile": "Entity/Universe.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1711101186527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711101422733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n  *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n  *          },\r\n  *     },\r\n  *     itemOperations = {\r\n- *          \"xget_universe\" = {\r\n+ *          \"get_universe\" = {\r\n  *              \"method\" = \"get\",\r\n  *              \"path\" = \"/anonymous/universe/{id}\",\r\n  *              \"normalization_context\"={\r\n  *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\"}\r\n"
                }
            ],
            "date": 1711101186527,
            "name": "Commit-0",
            "content": "<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Entity;\r\n\r\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\r\nuse App\\Repository\\UniverseRepository;\r\nuse App\\Controller\\Api\\DeleteUniverseAction;\r\nuse App\\Controller\\Api\\SearchUniversesAction;\r\nuse App\\Controller\\Api\\GetUniversesCategoriesDetailsAction;\r\nuse App\\Controller\\Api\\GetUniverseCategories;\r\nuse App\\Controller\\Api\\PutUniverseAction;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Doctrine\\Common\\Collections\\Collection;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse App\\Entity\\Traits\\IdentifiableTrait;\r\nuse App\\Entity\\Traits\\TimestampableTrait;\r\nuse Symfony\\Component\\Validator\\Constraints as Assert;\r\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\r\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\SearchFilter;\r\nuse ApiPlatform\\Core\\Annotation\\ApiFilter;\r\nuse Gedmo\\Mapping\\Annotation as Gedmo;\r\n\r\n/**\r\n * @ORM\\Entity(repositoryClass=UniverseRepository::class)\r\n * @ORM\\HasLifecycleCallbacks()\r\n * @ApiResource(\r\n *     attributes = {\r\n *          \"order\" = {\"position\": \"ASC\"},\r\n *          \"pagination_enabled\" = false,\r\n *     },\r\n *     collectionOperations={\r\n *          \"get_universes\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/universes\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:imagehome\"}\r\n *              },\r\n *          },\r\n *          \"get_universes_details\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/universes/details\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\"}\r\n *              },\r\n *          },\r\n *          \"get_universes_categories_details\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/universes/categories/details\",\r\n *              \"controller\" = GetUniversesCategoriesDetailsAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\",\"read:universe:categories:details\",\"read:universe:categories:children\"}\r\n *              },\r\n *          },\r\n *          \"get_all_universes_categories_details\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/all/universes/categories/details\",\r\n *              \"controller\" = GetUniversesCategoriesDetailsAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\",\"read:universe:categories:details\",\"read:universe:categories:children\"}\r\n *              },\r\n *          },\r\n *          \"get_universes_categories\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/universes/categories\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:categories\",\"read:universe:categories:children\"}\r\n *              },\r\n *          },\r\n *          \"get_universes_categories_repairman\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/universes/categories/repairman\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:categories\",\"read:universe:categories:children\"}\r\n *              },\r\n *          },\r\n *          \"get_search_universes\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/search/universes\",\r\n *              \"controller\" = SearchUniversesAction::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe:search\"}\r\n *              },\r\n *          },\r\n *          \"post_universe\" = {\r\n *              \"method\" = \"post\",\r\n *              \"path\" = \"/universe\",\r\n *              \"validation_groups\"={\"validation:universe:create\"},\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *     },\r\n *     itemOperations = {\r\n *          \"xget_universe\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/universe/{id}\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\"}\r\n *              },\r\n *          },\r\n *          \"get_universe_categories\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/anonymous/universe/{id}/categories\",\r\n *              \"controller\" = GetUniverseCategories::class,\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\",\"read:universe:categories:details\",\"read:universe:categories:children\"}\r\n *              },\r\n *          },\r\n *          \"get_universe_users\" = {\r\n *              \"method\" = \"get\",\r\n *              \"path\" = \"/universe/{id}/users\",\r\n *              \"normalization_context\"={\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\",\"read:universe:users\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"delete_universe\" = {\r\n *              \"method\" = \"delete\",\r\n *              \"path\" = \"/universe/{id}\",\r\n *              \"controller\" = DeleteUniverseAction::class,\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *          \"put_universe\" = {\r\n *              \"method\" = \"put\",\r\n *              \"path\" = \"/universe/{id}\",\r\n *              \"validation_groups\"={\"validation:universe:edit\"},\r\n *              \"controller\" =  PutUniverseAction::class,\r\n *              \"normalization_context\" = {\r\n *                  \"groups\"={\"read\",\"read:universe\",\"read:universe:details\",\"read:universe:categories\"}\r\n *              },\r\n *              \"denormalization_context\" = {\r\n *                  \"groups\"={\"edit:universe\"}\r\n *              },\r\n *              \"security\" = \"is_granted('ROLE_ADMIN')\",\r\n *          },\r\n *     },\r\n * )\r\n * @ApiFilter(SearchFilter::class, properties={\"users.id\": \"exact\"})\r\n */\r\nclass Universe\r\n{\r\n    use IdentifiableTrait;\r\n    use TimestampableTrait;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     * @Assert\\NotBlank(groups={\"validation:universe:create\",\"validation:universe:edit\"})\r\n     * @Groups({\"read:universe\",\"read:user:showcases\",\"edit:universe\",\"read:universe:search\",\"read:user:benefits\"})\r\n     */\r\n    private ?string $name;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     * @Gedmo\\Slug(fields={\"name\"})\r\n     * @Groups({\"read:universe\",\"read:user:showcases\",\"edit:universe\",\"read:universe:search\",\"read:user:benefits\"})\r\n     */\r\n    private $slug;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:user:benefits\"})\r\n     */\r\n    private ?int $position;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:search\"})\r\n     */\r\n    private ?string $description;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"text\", nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:search\"})\r\n     */\r\n    private ?string $descriptionPictures;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"array\", nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\"})\r\n     */\r\n    private ?array $pictures = [];\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Assert\\NotBlank(groups={\"validation:universe:create\",\"validation:universe:edit\"})\r\n     * @Groups({\"read:universe:details\",\"edit:universe\"})\r\n     */\r\n    private ?string $image;\r\n\r\n\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Category::class, mappedBy=\"universe\", orphanRemoval=true)\r\n     * @Groups({\"read:universe:categories\",\"read:universe:categories:details\",\"read:universe:categories:children\"})\r\n     */\r\n    private $categories;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=User::class, mappedBy=\"showcases\")\r\n     * @Groups({\"read:universe:users\"})\r\n     */\r\n    private $users;\r\n\r\n    /**\r\n     * @Groups({\"read:universe\"}) \r\n     */\r\n    private ?int $totalServices = 0;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true, options={\"default\" : 0})\r\n     * @Groups({\"read:universe\",\"edit:universe\"}) \r\n     */\r\n    private $enabled = false;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Service::class, mappedBy=\"universe\")\r\n     */\r\n    private $services;\r\n\r\n    /**\r\n     * @ORM\\Column(options={\"default\" : \"Catégorie\"})\r\n     * @Assert\\NotBlank(groups={\"validation:universe:create\",\"validation:universe:edit\"})\r\n     * @Groups({\"read:universe\",\"read:user:showcases\",\"edit:universe\",\"read:universe:search\"})\r\n     */\r\n    private ?string $nameCategory = \"Catégorie(s)\";\r\n\r\n    /**\r\n     * @ORM\\Column(options={\"default\" : \"Sous-catégorie\"})\r\n     * @Assert\\NotBlank(groups={\"validation:universe:create\",\"validation:universe:edit\"})\r\n     * @Groups({\"read:universe\",\"read:user:showcases\",\"edit:universe\",\"read:universe:search\"})\r\n     */\r\n    private ?string $nameSubCategory = \"Sous-catégorie(s)\";\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=1, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:imagehome\"})\r\n     */\r\n    private $bonusreparation;\r\n\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"boolean\", nullable=true, options={\"default\" : 0})\r\n     * @Groups({\"read:universe\",\"read:user:showcases\",\"edit:universe\",\"read:universe:search\"})\r\n     */\r\n    private ?bool $requireSearchSubCategory = false;\r\n    \r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:imagehome\"})\r\n     */\r\n    private ?string $imageHome;\r\n  \r\n   \r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:image_vitrine1\"})\r\n     */\r\n    private  ?string $image_vitrine1;\r\n   \r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:image_vitrine2\"})\r\n     */\r\n    private  ?string $image_vitrine2;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:image_vitrine3\"})\r\n     */\r\n    private  ?string $image_vitrine3;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:image_anatomie\"})\r\n     */\r\n    private  ?string $image_anatomie;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     * @Groups({\"read:universe:details\",\"edit:universe\",\"read:universe:labelanatomie\"})\r\n     */\r\n    private $labelanatomie;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->categories = new ArrayCollection();\r\n        $this->users = new ArrayCollection();\r\n        $this->services = new ArrayCollection();\r\n    }\r\n\r\n    public function getName(): ?string\r\n    {\r\n        return $this->name;\r\n    }\r\n\r\n    public function setName(string $name)\r\n    {\r\n        $this->name = $name;\r\n    }\r\n\r\n    public function getSlug(): ?string\r\n    {\r\n        return $this->slug;\r\n    }\r\n\r\n    public function setSlug(string $slug)\r\n    {\r\n        $this->slug = $slug;\r\n    }\r\n\r\n    public function getPosition(): ?int\r\n    {\r\n        return $this->position;\r\n    }\r\n\r\n    public function setPosition(?int $position)\r\n    {\r\n        $this->position = $position;\r\n    }\r\n\r\n    public function getDescription(): ?string\r\n    {\r\n        return $this->description;\r\n    }\r\n\r\n    public function setDescription(?string $description)\r\n    {\r\n        $this->description = $description;\r\n    }\r\n\r\n    public function getDescriptionPictures(): ?string\r\n    {\r\n        return $this->descriptionPictures;\r\n    }\r\n\r\n    public function setDescriptionPictures(?string $descriptionPictures)\r\n    {\r\n        $this->descriptionPictures = $descriptionPictures;\r\n    }\r\n\r\n    public function getPictures(): ?array\r\n    {\r\n        return $this->pictures;\r\n    }\r\n\r\n    public function setPictures(?array $pictures)\r\n    {\r\n        $this->pictures = $pictures;\r\n    }\r\n\r\n    public function getImage(): ?string\r\n    {\r\n        return $this->image;\r\n    }\r\n\r\n    public function setImage(?string $image)\r\n    {\r\n        $this->image = $image;\r\n    }\r\n\r\n  \r\n    /**\r\n     * @return Collection|Category[]\r\n     */\r\n    public function getCategories(): Collection\r\n    {\r\n        return $this->categories;\r\n    }\r\n\r\n    public function addCategory(Category $category)\r\n    {\r\n        if (!$this->categories->contains($category)) {\r\n            $this->categories[] = $category;\r\n            $category->setUniverse($this);\r\n        }\r\n    }\r\n\r\n    public function removeCategory(Category $category)\r\n    {\r\n        if ($this->categories->removeElement($category)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($category->getUniverse() === $this) {\r\n                $category->setUniverse(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Collection|User[]\r\n     */\r\n    public function getUsers(): Collection\r\n    {\r\n        return $this->users;\r\n    }\r\n\r\n    public function addUser(User $user)\r\n    {\r\n        if (!$this->users->contains($user)) {\r\n            $this->users[] = $user;\r\n            $user->addShowcase($this);\r\n        }\r\n    }\r\n\r\n    public function removeUser(User $user)\r\n    {\r\n        if ($this->users->removeElement($user)) {\r\n            $user->removeShowcase($this);\r\n        }\r\n    }\r\n\r\n    public function getTotalServices(): ?int\r\n    {\r\n        return $this->totalServices;\r\n    }\r\n\r\n    public function setTotalServices(int $totalServices)\r\n    {\r\n        $this->totalServices = $totalServices;\r\n    }\r\n\r\n    public function getEnabled(): ?bool\r\n    {\r\n        return $this->enabled;\r\n    }\r\n\r\n    public function setEnabled(?bool $enabled)\r\n    {\r\n        $this->enabled = $enabled;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Service[]\r\n     */\r\n    public function getServices(): Collection\r\n    {\r\n        return $this->services;\r\n    }\r\n\r\n    public function addService(Service $service)\r\n    {\r\n        if (!$this->services->contains($service)) {\r\n            $this->services[] = $service;\r\n            $service->setUniverse($this);\r\n        }\r\n    }\r\n\r\n    public function removeService(Service $service)\r\n    {\r\n        if ($this->services->removeElement($service)) {\r\n            // set the owning side to null (unless already changed)\r\n            if ($service->getUniverse() === $this) {\r\n                $service->setUniverse(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function getNameCategory(): ?string\r\n    {\r\n        return $this->nameCategory;\r\n    }\r\n\r\n    public function setNameCategory(string $nameCategory)\r\n    {\r\n        $this->nameCategory = $nameCategory;\r\n    }\r\n\r\n    public function getNameSubCategory(): ?string\r\n    {\r\n        return $this->nameSubCategory;\r\n    }\r\n\r\n    public function setNameSubCategory(string $nameSubCategory)\r\n    {\r\n        $this->nameSubCategory = $nameSubCategory;\r\n    }\r\n\r\n    public function getRequireSearchSubCategory(): ?bool\r\n    {\r\n        return $this->requireSearchSubCategory;\r\n    }\r\n\r\n    public function setRequireSearchSubCategory(?bool $requireSearchSubCategory)\r\n    {\r\n        $this->requireSearchSubCategory = $requireSearchSubCategory;\r\n    }\r\n    \r\n    public function getBonusreparation(): ?string\r\n    {\r\n        return $this->bonusreparation;\r\n    }\r\n\r\n    public function setBonusreparation(?string $bonusreparation): self\r\n    {\r\n        $this->bonusreparation = $bonusreparation;\r\n\r\n        return $this;\r\n    }\r\n    \r\n    public function getImageHome(): ?string\r\n    {\r\n        return $this->imageHome;\r\n    }\r\n\r\n    public function setImageHome(?string $imageHome)\r\n    {\r\n        $this->imageHome = $imageHome;\r\n    }\r\n\r\n\r\n    public function getImageVitrine1(): ?string\r\n    {\r\n        return $this->image_vitrine1;\r\n    }\r\n\r\n    public function setImageVitrine1(?string $image_vitrine1): self\r\n    {\r\n        $this->image_vitrine1 = $image_vitrine1;\r\n\r\n        return $this;\r\n    }\r\n\r\n  \r\n\r\n    public function getImageVitrine2(): ?string\r\n    {\r\n        return $this->image_vitrine2;\r\n    }\r\n\r\n    public function setImageVitrine2(?string $image_vitrine2): self\r\n    {\r\n        $this->image_vitrine2 = $image_vitrine2;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getImageVitrine3(): ?string\r\n    {\r\n        return $this->image_vitrine3;\r\n    }\r\n\r\n    public function setImageVitrine3(?string $image_vitrine3): self\r\n    {\r\n        $this->image_vitrine3 = $image_vitrine3;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getImageAnatomie(): ?string\r\n    {\r\n        return $this->image_anatomie;\r\n    }\r\n\r\n    public function setImageAnatomie(?string $image_anatomie): self\r\n    {\r\n        $this->image_anatomie = $image_anatomie;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getLabelanatomie(): ?string\r\n    {\r\n        return $this->labelanatomie;\r\n    }\r\n\r\n    public function setLabelanatomie(?string $labelanatomie): self\r\n    {\r\n        $this->labelanatomie = $labelanatomie;\r\n\r\n        return $this;\r\n    }\r\n}\r\n"
        }
    ]
}