{
    "sourceFile": "Service/PayRepairman.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1712780903699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1712781031423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     }\r\n \r\n     public function execute(Command $command)\r\n     {\r\n-        $response = array(\"status\" => \"error PAy repairman\", \"message\" => \"\", \"code\" => \"\");\r\n+        $response = array(\"status\" => \"error\", \"message\" => \"\", \"code\" => \"\");\r\n \r\n         try {\r\n             $nameUser = $command->getBenefit()->getUser()->getEmail() . \" #\" . $command->getId();\r\n             $nameCommand = ($command->getType() === \"devis\" ? \" le devis \" : \" la commande \") . \"#\" . $command->getId();\r\n"
                }
            ],
            "date": 1712780903699,
            "name": "Commit-0",
            "content": "<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\nnamespace App\\Service;\r\n\r\nuse Exception;\r\nuse App\\Entity\\User;\r\nuse App\\Entity\\Command;\r\nuse App\\Entity\\Paiement;\r\nuse App\\Service\\SendEmail;\r\nuse App\\Service\\StripeProvider;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse Stripe\\Exception\\InvalidRequestException;\r\n\r\nclass PayRepairman\r\n{\r\n    /**\r\n     * @var EntityManagerInterface\r\n     */\r\n    private $em;\r\n\r\n    /**\r\n     * @var StripeProvider\r\n     */\r\n    private $stripeProvider;\r\n\r\n    /**\r\n     * @var SendEmail\r\n     */\r\n    private $mailer;\r\n\r\n    /**\r\n     * @param EntityManagerInterface $em\r\n     * @param StripeProvider $stripeProvider\r\n     * @param SendEmail $mailer\r\n     */\r\n    public function __construct(EntityManagerInterface $em, StripeProvider $stripeProvider, SendEmail $mailer)\r\n    {\r\n        $this->em = $em;\r\n        $this->stripeProvider = $stripeProvider;\r\n        $this->mailer = $mailer;\r\n    }\r\n\r\n    public function execute(Command $command)\r\n    {\r\n        $response = array(\"status\" => \"error PAy repairman\", \"message\" => \"\", \"code\" => \"\");\r\n\r\n        try {\r\n            $nameUser = $command->getBenefit()->getUser()->getEmail() . \" #\" . $command->getId();\r\n            $nameCommand = ($command->getType() === \"devis\" ? \" le devis \" : \" la commande \") . \"#\" . $command->getId();\r\n\r\n            /**\r\n             * @var User $user\r\n             */\r\n            $user = $command->getBenefit()->getUser();\r\n\r\n            if (!$user->getStripeAccountId() && $user->getStripeAccountToken()) {\r\n                $account = $this->stripeProvider->createAccount($user);\r\n                if ($account && $account->id) {\r\n                    $user->setStripeAccountId($account->id);\r\n                    $this->em->persist($user);\r\n                    $this->em->flush();\r\n                }\r\n            }\r\n\r\n            if (!$user->getStripeAccountId() || !$user->getStripeAccountToken()) {\r\n                $response['message'] = \"Impossible de créer ce réparateur \" . $nameUser . \" sur strip.\";\r\n                return $response;\r\n            }\r\n\r\n            //create link if account type express \r\n            //dd($this->stripeProvider->createAccountLink($user->getStripeAccountId()));\r\n\r\n            $resultsTransfer = $this->em->createQueryBuilder()\r\n                ->from('App:Command', 'c')\r\n                ->join('c.paiements', 'p')\r\n                ->select('c.id, p.amount, p.transferId')\r\n                ->where('c.id = :id')\r\n                ->setParameter('id', $command->getId())\r\n                ->andwhere(\"p.object = 'transfer'\")\r\n                ->andwhere(\"c.isCommand = 1\")\r\n                ->setMaxResults(1)\r\n                ->getQuery()\r\n                ->getOneOrNullResult();\r\n\r\n            if ($resultsTransfer) {\r\n                $response['message'] = \"Le réparateur \" . $nameUser . \" a été déjà régle avec le montant \" . $resultsTransfer['amount'] . \" c€ lié au transfert #\" . $resultsTransfer['transferId'] . \" pour \" . $nameCommand . \".\";\r\n                return $response;\r\n            }\r\n\r\n            $resultsPayment = $this->em->createQueryBuilder()\r\n                ->from('App:Command', 'c')\r\n                ->join('c.paiements', 'p')\r\n                ->select('c.id, p.amount')\r\n                ->where('c.id = :id')\r\n                ->setParameter('id', $command->getId())\r\n                ->andWhere('c.adjust = 0 or c.adjust IS NULL')\r\n                ->andwhere(\"p.object = 'payment_intent'\")\r\n                ->andwhere(\"c.isCommand = 1\")\r\n                ->setMaxResults(1)\r\n                ->getQuery()\r\n                ->getOneOrNullResult();\r\n\r\n            if (!$resultsPayment) {\r\n                $response['message'] = \"Le réparateur \" . $nameUser . \" ne peut pas être régle, \" . $nameCommand . \" n'est pas lié(e) à aucun paiment ou déjà règle.\";\r\n                return $response;\r\n            }\r\n\r\n            $amount = $resultsPayment['amount'];\r\n\r\n            $transfer = $this->stripeProvider->createTransfer($user, $command, $amount);\r\n\r\n            if (!$transfer || !$transfer->id) {\r\n                $response['message'] = \"Nous ne pouvons pas effectuer le transfer pour ce réparateur \" . $nameUser . \".\";\r\n                return $response;\r\n            }\r\n            $paiement = new Paiement();\r\n            $paiement->setAmount($amount);\r\n            $paiement->setObject($transfer->object);\r\n            $paiement->setTransferId($transfer->id);\r\n            $paiement->setCommand($command);\r\n            $this->em->persist($paiement);\r\n\r\n            $command->setAdjust(true);\r\n            $command->setAdjustDate(new \\DateTime());\r\n            $this->em->persist($command);\r\n\r\n            $this->em->flush();\r\n\r\n            $response['status'] = 'success';\r\n            $response['message'] = \"Le réparateur \" . $nameUser . \" vient d'être régle avec le montant \" . $amount . \" c€ pour \" . $nameCommand . \".\";\r\n            return $response;\r\n        } catch (InvalidRequestException $e) {\r\n\r\n            if ($e->getError() && $e->getError()[\"code\"]) {\r\n                $response['code'] = $e->getError()[\"code\"];\r\n            }\r\n\r\n            //Email strip\r\n            $this->mailer->send(\r\n                $this->mailer->getStripEmail(),\r\n                'Un réparateur ne peut pas être réglé',\r\n                $response['code'] === \"balance_insufficient\" ? 'emails/repairman_balance_insufficient.html.twig' : 'emails/repairman_not_settled.html.twig',\r\n                [\r\n                    'user' => $user\r\n                ]\r\n            );\r\n\r\n            $response['message'] = \"Erreur : \" . $e->getMessage();\r\n            return $response;\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}